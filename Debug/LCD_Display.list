
LCD_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc84  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800bf1c  0800bf1c  0001bf1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bfa8  0800bfa8  0001bfa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bfb0  0800bfb0  0001bfb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bfb4  0800bfb4  0001bfb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800bfb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  0800bfc8  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800c028  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c30  240000d0  0800c088  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000d00  0800c088  00020d00  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003099c  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ec  00000000  00000000  00050a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002428  00000000  00000000  00054d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000022a8  00000000  00000000  000571b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041504  00000000  00000000  00059458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d2b8  00000000  00000000  0009a95c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a401b  00000000  00000000  000c7c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0026bc2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a0ec  00000000  00000000  0026bc80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800bf04 	.word	0x0800bf04

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800bf04 	.word	0x0800bf04

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__LCD_Delay>:

#include "LCD.h"

extern TIM_HandleTypeDef timer;

void __LCD_Delay(uint16_t delay) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&timer, 0);
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <__LCD_Delay+0x30>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2200      	movs	r2, #0
 80005ec:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < delay);
 80005ee:	bf00      	nop
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <__LCD_Delay+0x30>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d3f9      	bcc.n	80005f0 <__LCD_Delay+0x14>

}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	240006c4 	.word	0x240006c4

08000610 <__LCD_Write4Bits>:

void __LCD_Write4Bits(uint8_t value) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DATA4_PORT, DATA4_PIN, (value >> 3) & 0x01);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	08db      	lsrs	r3, r3, #3
 800061e:	b2db      	uxtb	r3, r3
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	461a      	mov	r2, r3
 8000628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062c:	481a      	ldr	r0, [pc, #104]	; (8000698 <__LCD_Write4Bits+0x88>)
 800062e:	f004 fd55 	bl	80050dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA3_PORT, DATA3_PIN, (value >> 2) & 0x01);
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	089b      	lsrs	r3, r3, #2
 8000636:	b2db      	uxtb	r3, r3
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	b2db      	uxtb	r3, r3
 800063e:	461a      	mov	r2, r3
 8000640:	2102      	movs	r1, #2
 8000642:	4816      	ldr	r0, [pc, #88]	; (800069c <__LCD_Write4Bits+0x8c>)
 8000644:	f004 fd4a 	bl	80050dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA2_PORT, DATA2_PIN, (value >> 1) & 0x01);
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	085b      	lsrs	r3, r3, #1
 800064c:	b2db      	uxtb	r3, r3
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	b2db      	uxtb	r3, r3
 8000654:	461a      	mov	r2, r3
 8000656:	2140      	movs	r1, #64	; 0x40
 8000658:	480f      	ldr	r0, [pc, #60]	; (8000698 <__LCD_Write4Bits+0x88>)
 800065a:	f004 fd3f 	bl	80050dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA1_PORT, DATA1_PIN, (value >> 0) & 0x01);
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	b2db      	uxtb	r3, r3
 8000666:	461a      	mov	r2, r3
 8000668:	2108      	movs	r1, #8
 800066a:	480d      	ldr	r0, [pc, #52]	; (80006a0 <__LCD_Write4Bits+0x90>)
 800066c:	f004 fd36 	bl	80050dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 1);
 8000670:	2201      	movs	r2, #1
 8000672:	2140      	movs	r1, #64	; 0x40
 8000674:	480b      	ldr	r0, [pc, #44]	; (80006a4 <__LCD_Write4Bits+0x94>)
 8000676:	f004 fd31 	bl	80050dc <HAL_GPIO_WritePin>
	__LCD_Delay(120);
 800067a:	2078      	movs	r0, #120	; 0x78
 800067c:	f7ff ffae 	bl	80005dc <__LCD_Delay>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	2140      	movs	r1, #64	; 0x40
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <__LCD_Write4Bits+0x94>)
 8000686:	f004 fd29 	bl	80050dc <HAL_GPIO_WritePin>
	__LCD_Delay(120);
 800068a:	2078      	movs	r0, #120	; 0x78
 800068c:	f7ff ffa6 	bl	80005dc <__LCD_Delay>

}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	58020000 	.word	0x58020000
 800069c:	58022800 	.word	0x58022800
 80006a0:	58021800 	.word	0x58021800
 80006a4:	58020400 	.word	0x58020400

080006a8 <__LCD_Send>:

void __LCD_Send(uint8_t value, int state) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(RS_PORT, RS_PIN, state);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	461a      	mov	r2, r3
 80006ba:	2180      	movs	r1, #128	; 0x80
 80006bc:	4808      	ldr	r0, [pc, #32]	; (80006e0 <__LCD_Send+0x38>)
 80006be:	f004 fd0d 	bl	80050dc <HAL_GPIO_WritePin>
	__LCD_Write4Bits(value >> 4);
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	091b      	lsrs	r3, r3, #4
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ffa1 	bl	8000610 <__LCD_Write4Bits>
	__LCD_Write4Bits(value);
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff9d 	bl	8000610 <__LCD_Write4Bits>

}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	58020400 	.word	0x58020400

080006e4 <__LCD_Cmd>:

void __LCD_Cmd(uint8_t value) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
	__LCD_Send(value, 0);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ffd8 	bl	80006a8 <__LCD_Send>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <__LCD_Data>:

void __LCD_Data(uint8_t value) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	__LCD_Send(value, 1);
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2101      	movs	r1, #1
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffca 	bl	80006a8 <__LCD_Send>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <LCD_Write>:

void LCD_Write(char *str) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]

	while (*str) {
 8000724:	e00a      	b.n	800073c <LCD_Write+0x20>
		__LCD_Data(*str++);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	1c5a      	adds	r2, r3, #1
 800072a:	607a      	str	r2, [r7, #4]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ffe6 	bl	8000700 <__LCD_Data>
		__LCD_Delay(5000);
 8000734:	f241 3088 	movw	r0, #5000	; 0x1388
 8000738:	f7ff ff50 	bl	80005dc <__LCD_Delay>
	while (*str) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1f0      	bne.n	8000726 <LCD_Write+0xa>
		// HAL_Delay(1000);
	}

}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <LCD_Pos_Cursor>:

void LCD_Pos_Cursor(int row, int col) {
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
 8000756:	6039      	str	r1, [r7, #0]

	switch (row) {
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d003      	beq.n	8000766 <LCD_Pos_Cursor+0x18>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d005      	beq.n	8000770 <LCD_Pos_Cursor+0x22>
 8000764:	e009      	b.n	800077a <LCD_Pos_Cursor+0x2c>
		case 0:
			col |= 0x80;
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	603b      	str	r3, [r7, #0]
	        break;
 800076e:	e004      	b.n	800077a <LCD_Pos_Cursor+0x2c>
	    case 1:
	        col |= 0xC0;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000776:	603b      	str	r3, [r7, #0]
	        break;
 8000778:	bf00      	nop
	}
	__LCD_Cmd(col);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ffb0 	bl	80006e4 <__LCD_Cmd>

}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <LCD_Scroll_Display_Right>:

	__LCD_Cmd(CLEAR);

}

void LCD_Scroll_Display_Right(void) {
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

	__LCD_Cmd(SCROLL_DISPLAY_RIGHT);
 8000790:	201c      	movs	r0, #28
 8000792:	f7ff ffa7 	bl	80006e4 <__LCD_Cmd>

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}

0800079a <LCD_Scroll_Display_Left>:

void LCD_Scroll_Display_Left(void) {
 800079a:	b580      	push	{r7, lr}
 800079c:	af00      	add	r7, sp, #0

	__LCD_Cmd(SCROLL_DISPLAY_LEFT);
 800079e:	2018      	movs	r0, #24
 80007a0:	f7ff ffa0 	bl	80006e4 <__LCD_Cmd>

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <LCD_Init>:

void LCD_Init(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

	// Init
	__LCD_Delay(50000);
 80007ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80007b0:	f7ff ff14 	bl	80005dc <__LCD_Delay>
	__LCD_Cmd(0x30);
 80007b4:	2030      	movs	r0, #48	; 0x30
 80007b6:	f7ff ff95 	bl	80006e4 <__LCD_Cmd>
	__LCD_Delay(4500);
 80007ba:	f241 1094 	movw	r0, #4500	; 0x1194
 80007be:	f7ff ff0d 	bl	80005dc <__LCD_Delay>
	__LCD_Cmd(0x30);
 80007c2:	2030      	movs	r0, #48	; 0x30
 80007c4:	f7ff ff8e 	bl	80006e4 <__LCD_Cmd>
	__LCD_Delay(150);
 80007c8:	2096      	movs	r0, #150	; 0x96
 80007ca:	f7ff ff07 	bl	80005dc <__LCD_Delay>
	__LCD_Cmd(0x30);
 80007ce:	2030      	movs	r0, #48	; 0x30
 80007d0:	f7ff ff88 	bl	80006e4 <__LCD_Cmd>

	// Go to 4 bit mode
	__LCD_Delay(10);
 80007d4:	200a      	movs	r0, #10
 80007d6:	f7ff ff01 	bl	80005dc <__LCD_Delay>
	__LCD_Cmd(0x20);
 80007da:	2020      	movs	r0, #32
 80007dc:	f7ff ff82 	bl	80006e4 <__LCD_Cmd>
	__LCD_Delay(50);
 80007e0:	2032      	movs	r0, #50	; 0x32
 80007e2:	f7ff fefb 	bl	80005dc <__LCD_Delay>

	// Set display lines and font
	__LCD_Cmd(0x28);
 80007e6:	2028      	movs	r0, #40	; 0x28
 80007e8:	f7ff ff7c 	bl	80006e4 <__LCD_Cmd>
	__LCD_Delay(50);
 80007ec:	2032      	movs	r0, #50	; 0x32
 80007ee:	f7ff fef5 	bl	80005dc <__LCD_Delay>

	// Display on/off
	__LCD_Cmd(0x08);
 80007f2:	2008      	movs	r0, #8
 80007f4:	f7ff ff76 	bl	80006e4 <__LCD_Cmd>
	__LCD_Delay(50);
 80007f8:	2032      	movs	r0, #50	; 0x32
 80007fa:	f7ff feef 	bl	80005dc <__LCD_Delay>

	// Display clear
	__LCD_Cmd(0x01);
 80007fe:	2001      	movs	r0, #1
 8000800:	f7ff ff70 	bl	80006e4 <__LCD_Cmd>
	__LCD_Delay(1500);
 8000804:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000808:	f7ff fee8 	bl	80005dc <__LCD_Delay>

	// Entry mode set
	__LCD_Cmd(0x06);
 800080c:	2006      	movs	r0, #6
 800080e:	f7ff ff69 	bl	80006e4 <__LCD_Cmd>
	__LCD_Delay(50);
 8000812:	2032      	movs	r0, #50	; 0x32
 8000814:	f7ff fee2 	bl	80005dc <__LCD_Delay>

	// Display on/off
	__LCD_Cmd(0x0F);
 8000818:	200f      	movs	r0, #15
 800081a:	f7ff ff63 	bl	80006e4 <__LCD_Cmd>

	__LCD_Delay(50000);
 800081e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000822:	f7ff fedb 	bl	80005dc <__LCD_Delay>
	LCD_Pos_Cursor(0, 0);
 8000826:	2100      	movs	r1, #0
 8000828:	2000      	movs	r0, #0
 800082a:	f7ff ff90 	bl	800074e <LCD_Pos_Cursor>

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083a:	f002 f8b9 	bl	80029b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083e:	f000 f853 	bl	80008e8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000842:	f000 f8d3 	bl	80009ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000846:	f000 fe5b 	bl	8001500 <MX_GPIO_Init>
  MX_ADC1_Init();
 800084a:	f000 f8ff 	bl	8000a4c <MX_ADC1_Init>
  MX_ADC2_Init();
 800084e:	f000 f973 	bl	8000b38 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000852:	f000 f9d5 	bl	8000c00 <MX_ADC3_Init>
  MX_ETH_Init();
 8000856:	f000 fa35 	bl	8000cc4 <MX_ETH_Init>
  MX_FDCAN1_Init();
 800085a:	f000 fa7f 	bl	8000d5c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800085e:	f000 fae1 	bl	8000e24 <MX_FDCAN2_Init>
  MX_FMC_Init();
 8000862:	f000 fdff 	bl	8001464 <MX_FMC_Init>
  MX_LTDC_Init();
 8000866:	f000 fb41 	bl	8000eec <MX_LTDC_Init>
  MX_RTC_Init();
 800086a:	f000 fbf1 	bl	8001050 <MX_RTC_Init>
  MX_SAI2_Init();
 800086e:	f000 fc17 	bl	80010a0 <MX_SAI2_Init>
  MX_SPI2_Init();
 8000872:	f000 fcd3 	bl	800121c <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000876:	f000 fd77 	bl	8001368 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800087a:	f000 fdc1 	bl	8001400 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800087e:	f000 fd21 	bl	80012c4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  int edge = 0, i = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
  LCD_Init();
 800088a:	f7ff ff8d 	bl	80007a8 <LCD_Init>
  HAL_Delay(1000);
 800088e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000892:	f002 f91f 	bl	8002ad4 <HAL_Delay>
  LCD_Write("Zdravo");
 8000896:	4813      	ldr	r0, [pc, #76]	; (80008e4 <main+0xb0>)
 8000898:	f7ff ff40 	bl	800071c <LCD_Write>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (i < 10 && edge == 0) {
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	2b09      	cmp	r3, #9
 80008a0:	dc0d      	bgt.n	80008be <main+0x8a>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d10a      	bne.n	80008be <main+0x8a>
		  LCD_Scroll_Display_Right();
 80008a8:	f7ff ff70 	bl	800078c <LCD_Scroll_Display_Right>
		  i++;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	3301      	adds	r3, #1
 80008b0:	603b      	str	r3, [r7, #0]
		  if (i == 10) {
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	2b0a      	cmp	r3, #10
 80008b6:	d10f      	bne.n	80008d8 <main+0xa4>
			  edge = 1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
		  if (i == 10) {
 80008bc:	e00c      	b.n	80008d8 <main+0xa4>
		  }
	  } else if (edge == 1) {
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d109      	bne.n	80008d8 <main+0xa4>
		  LCD_Scroll_Display_Left();
 80008c4:	f7ff ff69 	bl	800079a <LCD_Scroll_Display_Left>
		  i--;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	603b      	str	r3, [r7, #0]
		  if (i == 0) {
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d101      	bne.n	80008d8 <main+0xa4>
			  edge = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
		  }
	  }
	  HAL_Delay(1000);
 80008d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008dc:	f002 f8fa 	bl	8002ad4 <HAL_Delay>
	  if (i < 10 && edge == 0) {
 80008e0:	e7dc      	b.n	800089c <main+0x68>
 80008e2:	bf00      	nop
 80008e4:	0800bf1c 	.word	0x0800bf1c

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b09c      	sub	sp, #112	; 0x70
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	224c      	movs	r2, #76	; 0x4c
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f00b fafc 	bl	800bef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2220      	movs	r2, #32
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f00b faf6 	bl	800bef4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000908:	2002      	movs	r0, #2
 800090a:	f004 fff1 	bl	80058f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b34      	ldr	r3, [pc, #208]	; (80009e4 <SystemClock_Config+0xfc>)
 8000914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000916:	4a33      	ldr	r2, [pc, #204]	; (80009e4 <SystemClock_Config+0xfc>)
 8000918:	f023 0301 	bic.w	r3, r3, #1
 800091c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800091e:	4b31      	ldr	r3, [pc, #196]	; (80009e4 <SystemClock_Config+0xfc>)
 8000920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <SystemClock_Config+0x100>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000930:	4a2d      	ldr	r2, [pc, #180]	; (80009e8 <SystemClock_Config+0x100>)
 8000932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <SystemClock_Config+0x100>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000944:	bf00      	nop
 8000946:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <SystemClock_Config+0x100>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800094e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000952:	d1f8      	bne.n	8000946 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000954:	230b      	movs	r3, #11
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000958:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800095e:	2301      	movs	r3, #1
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000962:	2340      	movs	r3, #64	; 0x40
 8000964:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000966:	2301      	movs	r3, #1
 8000968:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096a:	2302      	movs	r3, #2
 800096c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096e:	2302      	movs	r3, #2
 8000970:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8000972:	2316      	movs	r3, #22
 8000974:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000976:	23a9      	movs	r3, #169	; 0xa9
 8000978:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800097a:	2302      	movs	r3, #2
 800097c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800097e:	2304      	movs	r3, #4
 8000980:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000982:	2302      	movs	r3, #2
 8000984:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000986:	2300      	movs	r3, #0
 8000988:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800098a:	2300      	movs	r3, #0
 800098c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	4618      	mov	r0, r3
 8000998:	f004 fff4 	bl	8005984 <HAL_RCC_OscConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80009a2:	f000 ffab 	bl	80018fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a6:	233f      	movs	r3, #63	; 0x3f
 80009a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2101      	movs	r1, #1
 80009ca:	4618      	mov	r0, r3
 80009cc:	f005 fc34 	bl	8006238 <HAL_RCC_ClockConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80009d6:	f000 ff91 	bl	80018fc <Error_Handler>
  }
}
 80009da:	bf00      	nop
 80009dc:	3770      	adds	r7, #112	; 0x70
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	58000400 	.word	0x58000400
 80009e8:	58024800 	.word	0x58024800

080009ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b0b0      	sub	sp, #192	; 0xc0
 80009f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f2:	463b      	mov	r3, r7
 80009f4:	22c0      	movs	r2, #192	; 0xc0
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f00b fa7b 	bl	800bef4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a02:	f04f 0300 	mov.w	r3, #0
 8000a06:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000a0e:	230c      	movs	r3, #12
 8000a10:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000a12:	2305      	movs	r3, #5
 8000a14:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a16:	2302      	movs	r3, #2
 8000a18:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a1e:	23c0      	movs	r3, #192	; 0xc0
 8000a20:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a22:	2320      	movs	r3, #32
 8000a24:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	4618      	mov	r0, r3
 8000a34:	f005 ff8c 	bl	8006950 <HAL_RCCEx_PeriphCLKConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000a3e:	f000 ff5d 	bl	80018fc <Error_Handler>
  }
}
 8000a42:	bf00      	nop
 8000a44:	37c0      	adds	r7, #192	; 0xc0
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a5e:	463b      	mov	r3, r7
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
 8000a6c:	615a      	str	r2, [r3, #20]
 8000a6e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a70:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a72:	4a30      	ldr	r2, [pc, #192]	; (8000b34 <MX_ADC1_Init+0xe8>)
 8000a74:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a76:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a7c:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a88:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a94:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a9a:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aa0:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa6:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aac:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000acc:	4818      	ldr	r0, [pc, #96]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000ace:	f002 f9e7 	bl	8002ea0 <HAL_ADC_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ad8:	f000 ff10 	bl	80018fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4812      	ldr	r0, [pc, #72]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000ae8:	f002 fffe 	bl	8003ae8 <HAL_ADCEx_MultiModeConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000af2:	f000 ff03 	bl	80018fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000af6:	2301      	movs	r3, #1
 8000af8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000afa:	2306      	movs	r3, #6
 8000afc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b02:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b06:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b14:	463b      	mov	r3, r7
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000b1a:	f002 fb63 	bl	80031e4 <HAL_ADC_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000b24:	f000 feea 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	; 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	24000124 	.word	0x24000124
 8000b34:	40022000 	.word	0x40022000

08000b38 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
 8000b4c:	615a      	str	r2, [r3, #20]
 8000b4e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b50:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <MX_ADC2_Init+0xc0>)
 8000b52:	4a2a      	ldr	r2, [pc, #168]	; (8000bfc <MX_ADC2_Init+0xc4>)
 8000b54:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b56:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <MX_ADC2_Init+0xc0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b5c:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <MX_ADC2_Init+0xc0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b62:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <MX_ADC2_Init+0xc0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b68:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <MX_ADC2_Init+0xc0>)
 8000b6a:	2204      	movs	r2, #4
 8000b6c:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b6e:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <MX_ADC2_Init+0xc0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b74:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <MX_ADC2_Init+0xc0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_ADC2_Init+0xc0>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_ADC2_Init+0xc0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_ADC2_Init+0xc0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_ADC2_Init+0xc0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_ADC2_Init+0xc0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_ADC2_Init+0xc0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_ADC2_Init+0xc0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_ADC2_Init+0xc0>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bac:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <MX_ADC2_Init+0xc0>)
 8000bae:	f002 f977 	bl	8002ea0 <HAL_ADC_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000bb8:	f000 fea0 	bl	80018fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc0:	2306      	movs	r3, #6
 8000bc2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bc8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000bcc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <MX_ADC2_Init+0xc0>)
 8000be0:	f002 fb00 	bl	80031e4 <HAL_ADC_ConfigChannel>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000bea:	f000 fe87 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	3720      	adds	r7, #32
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	24000188 	.word	0x24000188
 8000bfc:	40022100 	.word	0x40022100

08000c00 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
 8000c14:	615a      	str	r2, [r3, #20]
 8000c16:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000c18:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <MX_ADC3_Init+0xb8>)
 8000c1a:	4a28      	ldr	r2, [pc, #160]	; (8000cbc <MX_ADC3_Init+0xbc>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000c1e:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <MX_ADC3_Init+0xb8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c24:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <MX_ADC3_Init+0xb8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c2a:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <MX_ADC3_Init+0xb8>)
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c30:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <MX_ADC3_Init+0xb8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <MX_ADC3_Init+0xb8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <MX_ADC3_Init+0xb8>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c42:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <MX_ADC3_Init+0xb8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_ADC3_Init+0xb8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MX_ADC3_Init+0xb8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c54:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_ADC3_Init+0xb8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c5a:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <MX_ADC3_Init+0xb8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_ADC3_Init+0xb8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_ADC3_Init+0xb8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c6e:	4812      	ldr	r0, [pc, #72]	; (8000cb8 <MX_ADC3_Init+0xb8>)
 8000c70:	f002 f916 	bl	8002ea0 <HAL_ADC_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000c7a:	f000 fe3f 	bl	80018fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_ADC3_Init+0xc0>)
 8000c80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c82:	2306      	movs	r3, #6
 8000c84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c8a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c8e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c90:	2304      	movs	r3, #4
 8000c92:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_ADC3_Init+0xb8>)
 8000ca2:	f002 fa9f 	bl	80031e4 <HAL_ADC_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000cac:	f000 fe26 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	240001ec 	.word	0x240001ec
 8000cbc:	58026000 	.word	0x58026000
 8000cc0:	1d500080 	.word	0x1d500080

08000cc4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <MX_ETH_Init+0x80>)
 8000cca:	4a1f      	ldr	r2, [pc, #124]	; (8000d48 <MX_ETH_Init+0x84>)
 8000ccc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000cce:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_ETH_Init+0x88>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_ETH_Init+0x88>)
 8000cd6:	2280      	movs	r2, #128	; 0x80
 8000cd8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_ETH_Init+0x88>)
 8000cdc:	22e1      	movs	r2, #225	; 0xe1
 8000cde:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_ETH_Init+0x88>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_ETH_Init+0x88>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_ETH_Init+0x88>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <MX_ETH_Init+0x80>)
 8000cf4:	4a15      	ldr	r2, [pc, #84]	; (8000d4c <MX_ETH_Init+0x88>)
 8000cf6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <MX_ETH_Init+0x80>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_ETH_Init+0x80>)
 8000d00:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <MX_ETH_Init+0x8c>)
 8000d02:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_ETH_Init+0x80>)
 8000d06:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <MX_ETH_Init+0x90>)
 8000d08:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_ETH_Init+0x80>)
 8000d0c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d10:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d12:	480c      	ldr	r0, [pc, #48]	; (8000d44 <MX_ETH_Init+0x80>)
 8000d14:	f003 f8aa 	bl	8003e6c <HAL_ETH_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000d1e:	f000 fded 	bl	80018fc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d22:	2238      	movs	r2, #56	; 0x38
 8000d24:	2100      	movs	r1, #0
 8000d26:	480c      	ldr	r0, [pc, #48]	; (8000d58 <MX_ETH_Init+0x94>)
 8000d28:	f00b f8e4 	bl	800bef4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <MX_ETH_Init+0x94>)
 8000d2e:	2221      	movs	r2, #33	; 0x21
 8000d30:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_ETH_Init+0x94>)
 8000d34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d38:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <MX_ETH_Init+0x94>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	24000250 	.word	0x24000250
 8000d48:	40028000 	.word	0x40028000
 8000d4c:	24000ce4 	.word	0x24000ce4
 8000d50:	24000070 	.word	0x24000070
 8000d54:	24000010 	.word	0x24000010
 8000d58:	240000ec 	.word	0x240000ec

08000d5c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d60:	4b2e      	ldr	r3, [pc, #184]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000d62:	4a2f      	ldr	r2, [pc, #188]	; (8000e20 <MX_FDCAN1_Init+0xc4>)
 8000d64:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d66:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d6c:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d72:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d78:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d7e:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000d84:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000d86:	2210      	movs	r2, #16
 8000d88:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000d8a:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000d90:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000d92:	2202      	movs	r2, #2
 8000d94:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000d96:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000d98:	2202      	movs	r2, #2
 8000d9a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000da2:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000da8:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000dce:	2204      	movs	r2, #4
 8000dd0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000dd8:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000dda:	2204      	movs	r2, #4
 8000ddc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000de6:	2204      	movs	r2, #4
 8000de8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000e04:	2204      	movs	r2, #4
 8000e06:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <MX_FDCAN1_Init+0xc0>)
 8000e0a:	f003 fc53 	bl	80046b4 <HAL_FDCAN_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000e14:	f000 fd72 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	24000300 	.word	0x24000300
 8000e20:	4000a000 	.word	0x4000a000

08000e24 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000e28:	4b2e      	ldr	r3, [pc, #184]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000e2a:	4a2f      	ldr	r2, [pc, #188]	; (8000ee8 <MX_FDCAN2_Init+0xc4>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000e34:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000e3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000e40:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000e46:	4b27      	ldr	r3, [pc, #156]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000e4c:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000e4e:	2210      	movs	r2, #16
 8000e50:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000e52:	4b24      	ldr	r3, [pc, #144]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000e5e:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000e60:	2202      	movs	r2, #2
 8000e62:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000e64:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000e70:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000e76:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000e7c:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000e82:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000e96:	2204      	movs	r2, #4
 8000e98:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000e9a:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000eae:	2204      	movs	r2, #4
 8000eb0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000ecc:	2204      	movs	r2, #4
 8000ece:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <MX_FDCAN2_Init+0xc0>)
 8000ed2:	f003 fbef 	bl	80046b4 <HAL_FDCAN_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000edc:	f000 fd0e 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	240003a0 	.word	0x240003a0
 8000ee8:	4000a400 	.word	0x4000a400

08000eec <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b09a      	sub	sp, #104	; 0x68
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ef2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ef6:	2234      	movs	r2, #52	; 0x34
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f00a fffa 	bl	800bef4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000f00:	463b      	mov	r3, r7
 8000f02:	2234      	movs	r2, #52	; 0x34
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f00a fff4 	bl	800bef4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f0c:	4b4e      	ldr	r3, [pc, #312]	; (8001048 <MX_LTDC_Init+0x15c>)
 8000f0e:	4a4f      	ldr	r2, [pc, #316]	; (800104c <MX_LTDC_Init+0x160>)
 8000f10:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f12:	4b4d      	ldr	r3, [pc, #308]	; (8001048 <MX_LTDC_Init+0x15c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f18:	4b4b      	ldr	r3, [pc, #300]	; (8001048 <MX_LTDC_Init+0x15c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f1e:	4b4a      	ldr	r3, [pc, #296]	; (8001048 <MX_LTDC_Init+0x15c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f24:	4b48      	ldr	r3, [pc, #288]	; (8001048 <MX_LTDC_Init+0x15c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000f2a:	4b47      	ldr	r3, [pc, #284]	; (8001048 <MX_LTDC_Init+0x15c>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f30:	4b45      	ldr	r3, [pc, #276]	; (8001048 <MX_LTDC_Init+0x15c>)
 8000f32:	2203      	movs	r2, #3
 8000f34:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000f36:	4b44      	ldr	r3, [pc, #272]	; (8001048 <MX_LTDC_Init+0x15c>)
 8000f38:	220e      	movs	r2, #14
 8000f3a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000f3c:	4b42      	ldr	r3, [pc, #264]	; (8001048 <MX_LTDC_Init+0x15c>)
 8000f3e:	2205      	movs	r2, #5
 8000f40:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000f42:	4b41      	ldr	r3, [pc, #260]	; (8001048 <MX_LTDC_Init+0x15c>)
 8000f44:	f240 228e 	movw	r2, #654	; 0x28e
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000f4a:	4b3f      	ldr	r3, [pc, #252]	; (8001048 <MX_LTDC_Init+0x15c>)
 8000f4c:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000f50:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000f52:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <MX_LTDC_Init+0x15c>)
 8000f54:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000f58:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000f5a:	4b3b      	ldr	r3, [pc, #236]	; (8001048 <MX_LTDC_Init+0x15c>)
 8000f5c:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000f60:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f62:	4b39      	ldr	r3, [pc, #228]	; (8001048 <MX_LTDC_Init+0x15c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f6a:	4b37      	ldr	r3, [pc, #220]	; (8001048 <MX_LTDC_Init+0x15c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f72:	4b35      	ldr	r3, [pc, #212]	; (8001048 <MX_LTDC_Init+0x15c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f7a:	4833      	ldr	r0, [pc, #204]	; (8001048 <MX_LTDC_Init+0x15c>)
 8000f7c:	f004 f8c8 	bl	8005110 <HAL_LTDC_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000f86:	f000 fcb9 	bl	80018fc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000faa:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fac:	2305      	movs	r3, #5
 8000fae:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000fce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481c      	ldr	r0, [pc, #112]	; (8001048 <MX_LTDC_Init+0x15c>)
 8000fd8:	f004 f96a 	bl	80052b0 <HAL_LTDC_ConfigLayer>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000fe2:	f000 fc8b 	bl	80018fc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001006:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001008:	2305      	movs	r3, #5
 800100a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	2201      	movs	r2, #1
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_LTDC_Init+0x15c>)
 8001032:	f004 f93d 	bl	80052b0 <HAL_LTDC_ConfigLayer>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800103c:	f000 fc5e 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	3768      	adds	r7, #104	; 0x68
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	24000440 	.word	0x24000440
 800104c:	50001000 	.word	0x50001000

08001050 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001054:	4b10      	ldr	r3, [pc, #64]	; (8001098 <MX_RTC_Init+0x48>)
 8001056:	4a11      	ldr	r2, [pc, #68]	; (800109c <MX_RTC_Init+0x4c>)
 8001058:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MX_RTC_Init+0x48>)
 800105c:	2200      	movs	r2, #0
 800105e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001060:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <MX_RTC_Init+0x48>)
 8001062:	227f      	movs	r2, #127	; 0x7f
 8001064:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_RTC_Init+0x48>)
 8001068:	22ff      	movs	r2, #255	; 0xff
 800106a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <MX_RTC_Init+0x48>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_RTC_Init+0x48>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <MX_RTC_Init+0x48>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_RTC_Init+0x48>)
 8001080:	2200      	movs	r2, #0
 8001082:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001084:	4804      	ldr	r0, [pc, #16]	; (8001098 <MX_RTC_Init+0x48>)
 8001086:	f008 f961 	bl	800934c <HAL_RTC_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001090:	f000 fc34 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	240004e8 	.word	0x240004e8
 800109c:	58004000 	.word	0x58004000

080010a0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80010a4:	4b58      	ldr	r3, [pc, #352]	; (8001208 <MX_SAI2_Init+0x168>)
 80010a6:	4a59      	ldr	r2, [pc, #356]	; (800120c <MX_SAI2_Init+0x16c>)
 80010a8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80010aa:	4b57      	ldr	r3, [pc, #348]	; (8001208 <MX_SAI2_Init+0x168>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80010b0:	4b55      	ldr	r3, [pc, #340]	; (8001208 <MX_SAI2_Init+0x168>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80010b6:	4b54      	ldr	r3, [pc, #336]	; (8001208 <MX_SAI2_Init+0x168>)
 80010b8:	2240      	movs	r2, #64	; 0x40
 80010ba:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80010bc:	4b52      	ldr	r3, [pc, #328]	; (8001208 <MX_SAI2_Init+0x168>)
 80010be:	2200      	movs	r2, #0
 80010c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80010c2:	4b51      	ldr	r3, [pc, #324]	; (8001208 <MX_SAI2_Init+0x168>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80010c8:	4b4f      	ldr	r3, [pc, #316]	; (8001208 <MX_SAI2_Init+0x168>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010ce:	4b4e      	ldr	r3, [pc, #312]	; (8001208 <MX_SAI2_Init+0x168>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80010d4:	4b4c      	ldr	r3, [pc, #304]	; (8001208 <MX_SAI2_Init+0x168>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010da:	4b4b      	ldr	r3, [pc, #300]	; (8001208 <MX_SAI2_Init+0x168>)
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80010e0:	4b49      	ldr	r3, [pc, #292]	; (8001208 <MX_SAI2_Init+0x168>)
 80010e2:	4a4b      	ldr	r2, [pc, #300]	; (8001210 <MX_SAI2_Init+0x170>)
 80010e4:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010e6:	4b48      	ldr	r3, [pc, #288]	; (8001208 <MX_SAI2_Init+0x168>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80010ec:	4b46      	ldr	r3, [pc, #280]	; (8001208 <MX_SAI2_Init+0x168>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80010f2:	4b45      	ldr	r3, [pc, #276]	; (8001208 <MX_SAI2_Init+0x168>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80010f8:	4b43      	ldr	r3, [pc, #268]	; (8001208 <MX_SAI2_Init+0x168>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80010fe:	4b42      	ldr	r3, [pc, #264]	; (8001208 <MX_SAI2_Init+0x168>)
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8001106:	4b40      	ldr	r3, [pc, #256]	; (8001208 <MX_SAI2_Init+0x168>)
 8001108:	2201      	movs	r2, #1
 800110a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800110c:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <MX_SAI2_Init+0x168>)
 800110e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001112:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001114:	4b3c      	ldr	r3, [pc, #240]	; (8001208 <MX_SAI2_Init+0x168>)
 8001116:	2208      	movs	r2, #8
 8001118:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800111a:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <MX_SAI2_Init+0x168>)
 800111c:	2201      	movs	r2, #1
 800111e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001120:	4b39      	ldr	r3, [pc, #228]	; (8001208 <MX_SAI2_Init+0x168>)
 8001122:	2200      	movs	r2, #0
 8001124:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001126:	4b38      	ldr	r3, [pc, #224]	; (8001208 <MX_SAI2_Init+0x168>)
 8001128:	2200      	movs	r2, #0
 800112a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800112c:	4b36      	ldr	r3, [pc, #216]	; (8001208 <MX_SAI2_Init+0x168>)
 800112e:	2200      	movs	r2, #0
 8001130:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001132:	4b35      	ldr	r3, [pc, #212]	; (8001208 <MX_SAI2_Init+0x168>)
 8001134:	2200      	movs	r2, #0
 8001136:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001138:	4b33      	ldr	r3, [pc, #204]	; (8001208 <MX_SAI2_Init+0x168>)
 800113a:	2200      	movs	r2, #0
 800113c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800113e:	4b32      	ldr	r3, [pc, #200]	; (8001208 <MX_SAI2_Init+0x168>)
 8001140:	2201      	movs	r2, #1
 8001142:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001144:	4b30      	ldr	r3, [pc, #192]	; (8001208 <MX_SAI2_Init+0x168>)
 8001146:	2200      	movs	r2, #0
 8001148:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800114a:	482f      	ldr	r0, [pc, #188]	; (8001208 <MX_SAI2_Init+0x168>)
 800114c:	f008 fa16 	bl	800957c <HAL_SAI_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 8001156:	f000 fbd1 	bl	80018fc <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800115a:	4b2e      	ldr	r3, [pc, #184]	; (8001214 <MX_SAI2_Init+0x174>)
 800115c:	4a2e      	ldr	r2, [pc, #184]	; (8001218 <MX_SAI2_Init+0x178>)
 800115e:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001160:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <MX_SAI2_Init+0x174>)
 8001162:	2200      	movs	r2, #0
 8001164:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001166:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <MX_SAI2_Init+0x174>)
 8001168:	2203      	movs	r2, #3
 800116a:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800116c:	4b29      	ldr	r3, [pc, #164]	; (8001214 <MX_SAI2_Init+0x174>)
 800116e:	2240      	movs	r2, #64	; 0x40
 8001170:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001172:	4b28      	ldr	r3, [pc, #160]	; (8001214 <MX_SAI2_Init+0x174>)
 8001174:	2200      	movs	r2, #0
 8001176:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001178:	4b26      	ldr	r3, [pc, #152]	; (8001214 <MX_SAI2_Init+0x174>)
 800117a:	2200      	movs	r2, #0
 800117c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800117e:	4b25      	ldr	r3, [pc, #148]	; (8001214 <MX_SAI2_Init+0x174>)
 8001180:	2201      	movs	r2, #1
 8001182:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001184:	4b23      	ldr	r3, [pc, #140]	; (8001214 <MX_SAI2_Init+0x174>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800118a:	4b22      	ldr	r3, [pc, #136]	; (8001214 <MX_SAI2_Init+0x174>)
 800118c:	2200      	movs	r2, #0
 800118e:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001190:	4b20      	ldr	r3, [pc, #128]	; (8001214 <MX_SAI2_Init+0x174>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <MX_SAI2_Init+0x174>)
 8001198:	2200      	movs	r2, #0
 800119a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <MX_SAI2_Init+0x174>)
 800119e:	2200      	movs	r2, #0
 80011a0:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <MX_SAI2_Init+0x174>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_SAI2_Init+0x174>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <MX_SAI2_Init+0x174>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <MX_SAI2_Init+0x174>)
 80011b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011bc:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_SAI2_Init+0x174>)
 80011c0:	2208      	movs	r2, #8
 80011c2:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <MX_SAI2_Init+0x174>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_SAI2_Init+0x174>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <MX_SAI2_Init+0x174>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_SAI2_Init+0x174>)
 80011d8:	2200      	movs	r2, #0
 80011da:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <MX_SAI2_Init+0x174>)
 80011de:	2200      	movs	r2, #0
 80011e0:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_SAI2_Init+0x174>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <MX_SAI2_Init+0x174>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_SAI2_Init+0x174>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80011f4:	4807      	ldr	r0, [pc, #28]	; (8001214 <MX_SAI2_Init+0x174>)
 80011f6:	f008 f9c1 	bl	800957c <HAL_SAI_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 8001200:	f000 fb7c 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	2400050c 	.word	0x2400050c
 800120c:	40015c04 	.word	0x40015c04
 8001210:	0002ee00 	.word	0x0002ee00
 8001214:	240005a4 	.word	0x240005a4
 8001218:	40015c24 	.word	0x40015c24

0800121c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001220:	4b26      	ldr	r3, [pc, #152]	; (80012bc <MX_SPI2_Init+0xa0>)
 8001222:	4a27      	ldr	r2, [pc, #156]	; (80012c0 <MX_SPI2_Init+0xa4>)
 8001224:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001226:	4b25      	ldr	r3, [pc, #148]	; (80012bc <MX_SPI2_Init+0xa0>)
 8001228:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800122c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <MX_SPI2_Init+0xa0>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <MX_SPI2_Init+0xa0>)
 8001236:	2203      	movs	r2, #3
 8001238:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <MX_SPI2_Init+0xa0>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <MX_SPI2_Init+0xa0>)
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <MX_SPI2_Init+0xa0>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <MX_SPI2_Init+0xa0>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <MX_SPI2_Init+0xa0>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <MX_SPI2_Init+0xa0>)
 800125a:	2200      	movs	r2, #0
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <MX_SPI2_Init+0xa0>)
 8001260:	2200      	movs	r2, #0
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <MX_SPI2_Init+0xa0>)
 8001266:	2200      	movs	r2, #0
 8001268:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <MX_SPI2_Init+0xa0>)
 800126c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001270:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <MX_SPI2_Init+0xa0>)
 8001274:	2200      	movs	r2, #0
 8001276:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001278:	4b10      	ldr	r3, [pc, #64]	; (80012bc <MX_SPI2_Init+0xa0>)
 800127a:	2200      	movs	r2, #0
 800127c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <MX_SPI2_Init+0xa0>)
 8001280:	2200      	movs	r2, #0
 8001282:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001284:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <MX_SPI2_Init+0xa0>)
 8001286:	2200      	movs	r2, #0
 8001288:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <MX_SPI2_Init+0xa0>)
 800128c:	2200      	movs	r2, #0
 800128e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <MX_SPI2_Init+0xa0>)
 8001292:	2200      	movs	r2, #0
 8001294:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <MX_SPI2_Init+0xa0>)
 8001298:	2200      	movs	r2, #0
 800129a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <MX_SPI2_Init+0xa0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <MX_SPI2_Init+0xa0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012a8:	4804      	ldr	r0, [pc, #16]	; (80012bc <MX_SPI2_Init+0xa0>)
 80012aa:	f008 fc87 	bl	8009bbc <HAL_SPI_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 80012b4:	f000 fb22 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2400063c 	.word	0x2400063c
 80012c0:	40003800 	.word	0x40003800

080012c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <MX_TIM3_Init+0x9c>)
 80012e4:	4a1f      	ldr	r2, [pc, #124]	; (8001364 <MX_TIM3_Init+0xa0>)
 80012e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_TIM3_Init+0x9c>)
 80012ea:	223f      	movs	r2, #63	; 0x3f
 80012ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <MX_TIM3_Init+0x9c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_TIM3_Init+0x9c>)
 80012f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <MX_TIM3_Init+0x9c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <MX_TIM3_Init+0x9c>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001308:	4815      	ldr	r0, [pc, #84]	; (8001360 <MX_TIM3_Init+0x9c>)
 800130a:	f008 fd96 	bl	8009e3a <HAL_TIM_Base_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001314:	f000 faf2 	bl	80018fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	4619      	mov	r1, r3
 8001324:	480e      	ldr	r0, [pc, #56]	; (8001360 <MX_TIM3_Init+0x9c>)
 8001326:	f008 fe4f 	bl	8009fc8 <HAL_TIM_ConfigClockSource>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001330:	f000 fae4 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001334:	2300      	movs	r3, #0
 8001336:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	4619      	mov	r1, r3
 8001340:	4807      	ldr	r0, [pc, #28]	; (8001360 <MX_TIM3_Init+0x9c>)
 8001342:	f009 f871 	bl	800a428 <HAL_TIMEx_MasterConfigSynchronization>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800134c:	f000 fad6 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3);
 8001350:	4803      	ldr	r0, [pc, #12]	; (8001360 <MX_TIM3_Init+0x9c>)
 8001352:	f008 fdc9 	bl	8009ee8 <HAL_TIM_Base_Start>

  /* USER CODE END TIM3_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	3720      	adds	r7, #32
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	240006c4 	.word	0x240006c4
 8001364:	40000400 	.word	0x40000400

08001368 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800136c:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <MX_USART3_UART_Init+0x90>)
 800136e:	4a23      	ldr	r2, [pc, #140]	; (80013fc <MX_USART3_UART_Init+0x94>)
 8001370:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001372:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <MX_USART3_UART_Init+0x90>)
 8001374:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001378:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <MX_USART3_UART_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <MX_USART3_UART_Init+0x90>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001386:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <MX_USART3_UART_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <MX_USART3_UART_Init+0x90>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <MX_USART3_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <MX_USART3_UART_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <MX_USART3_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_USART3_UART_Init+0x90>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <MX_USART3_UART_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013b0:	4811      	ldr	r0, [pc, #68]	; (80013f8 <MX_USART3_UART_Init+0x90>)
 80013b2:	f009 f8c7 	bl	800a544 <HAL_UART_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013bc:	f000 fa9e 	bl	80018fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c0:	2100      	movs	r1, #0
 80013c2:	480d      	ldr	r0, [pc, #52]	; (80013f8 <MX_USART3_UART_Init+0x90>)
 80013c4:	f00a f8c9 	bl	800b55a <HAL_UARTEx_SetTxFifoThreshold>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013ce:	f000 fa95 	bl	80018fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d2:	2100      	movs	r1, #0
 80013d4:	4808      	ldr	r0, [pc, #32]	; (80013f8 <MX_USART3_UART_Init+0x90>)
 80013d6:	f00a f8fe 	bl	800b5d6 <HAL_UARTEx_SetRxFifoThreshold>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013e0:	f000 fa8c 	bl	80018fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013e4:	4804      	ldr	r0, [pc, #16]	; (80013f8 <MX_USART3_UART_Init+0x90>)
 80013e6:	f00a f87f 	bl	800b4e8 <HAL_UARTEx_DisableFifoMode>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013f0:	f000 fa84 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	24000710 	.word	0x24000710
 80013fc:	40004800 	.word	0x40004800

08001400 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001406:	4a16      	ldr	r2, [pc, #88]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001408:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800140c:	2209      	movs	r2, #9
 800140e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001412:	2202      	movs	r2, #2
 8001414:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800141e:	2202      	movs	r2, #2
 8001420:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001424:	2200      	movs	r2, #0
 8001426:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800142a:	2200      	movs	r2, #0
 800142c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001436:	2201      	movs	r2, #1
 8001438:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800143c:	2201      	movs	r2, #1
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001442:	2200      	movs	r2, #0
 8001444:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001448:	f004 f90a 	bl	8005660 <HAL_PCD_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001452:	f000 fa53 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	240007a4 	.word	0x240007a4
 8001460:	40080000 	.word	0x40080000

08001464 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
 8001478:	615a      	str	r2, [r3, #20]
 800147a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <MX_FMC_Init+0x94>)
 800147e:	4a1f      	ldr	r2, [pc, #124]	; (80014fc <MX_FMC_Init+0x98>)
 8001480:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <MX_FMC_Init+0x94>)
 8001484:	2201      	movs	r2, #1
 8001486:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <MX_FMC_Init+0x94>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <MX_FMC_Init+0x94>)
 8001490:	2204      	movs	r2, #4
 8001492:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <MX_FMC_Init+0x94>)
 8001496:	2210      	movs	r2, #16
 8001498:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <MX_FMC_Init+0x94>)
 800149c:	2240      	movs	r2, #64	; 0x40
 800149e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80014a0:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <MX_FMC_Init+0x94>)
 80014a2:	2280      	movs	r2, #128	; 0x80
 80014a4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80014a6:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <MX_FMC_Init+0x94>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <MX_FMC_Init+0x94>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_FMC_Init+0x94>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_FMC_Init+0x94>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80014be:	2310      	movs	r3, #16
 80014c0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80014c2:	2310      	movs	r3, #16
 80014c4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80014c6:	2310      	movs	r3, #16
 80014c8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80014ca:	2310      	movs	r3, #16
 80014cc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80014ce:	2310      	movs	r3, #16
 80014d0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80014d2:	2310      	movs	r3, #16
 80014d4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80014d6:	2310      	movs	r3, #16
 80014d8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4806      	ldr	r0, [pc, #24]	; (80014f8 <MX_FMC_Init+0x94>)
 80014e0:	f008 fb30 	bl	8009b44 <HAL_SDRAM_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80014ea:	f000 fa07 	bl	80018fc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80014ee:	bf00      	nop
 80014f0:	3720      	adds	r7, #32
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	24000cb0 	.word	0x24000cb0
 80014fc:	52004140 	.word	0x52004140

08001500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b090      	sub	sp, #64	; 0x40
 8001504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001516:	4bc0      	ldr	r3, [pc, #768]	; (8001818 <MX_GPIO_Init+0x318>)
 8001518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151c:	4abe      	ldr	r2, [pc, #760]	; (8001818 <MX_GPIO_Init+0x318>)
 800151e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001522:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001526:	4bbc      	ldr	r3, [pc, #752]	; (8001818 <MX_GPIO_Init+0x318>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
 8001532:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001534:	4bb8      	ldr	r3, [pc, #736]	; (8001818 <MX_GPIO_Init+0x318>)
 8001536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153a:	4ab7      	ldr	r2, [pc, #732]	; (8001818 <MX_GPIO_Init+0x318>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001544:	4bb4      	ldr	r3, [pc, #720]	; (8001818 <MX_GPIO_Init+0x318>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001552:	4bb1      	ldr	r3, [pc, #708]	; (8001818 <MX_GPIO_Init+0x318>)
 8001554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001558:	4aaf      	ldr	r2, [pc, #700]	; (8001818 <MX_GPIO_Init+0x318>)
 800155a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800155e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001562:	4bad      	ldr	r3, [pc, #692]	; (8001818 <MX_GPIO_Init+0x318>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156c:	623b      	str	r3, [r7, #32]
 800156e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001570:	4ba9      	ldr	r3, [pc, #676]	; (8001818 <MX_GPIO_Init+0x318>)
 8001572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001576:	4aa8      	ldr	r2, [pc, #672]	; (8001818 <MX_GPIO_Init+0x318>)
 8001578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800157c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001580:	4ba5      	ldr	r3, [pc, #660]	; (8001818 <MX_GPIO_Init+0x318>)
 8001582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800158a:	61fb      	str	r3, [r7, #28]
 800158c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	4ba2      	ldr	r3, [pc, #648]	; (8001818 <MX_GPIO_Init+0x318>)
 8001590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001594:	4aa0      	ldr	r2, [pc, #640]	; (8001818 <MX_GPIO_Init+0x318>)
 8001596:	f043 0304 	orr.w	r3, r3, #4
 800159a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800159e:	4b9e      	ldr	r3, [pc, #632]	; (8001818 <MX_GPIO_Init+0x318>)
 80015a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ac:	4b9a      	ldr	r3, [pc, #616]	; (8001818 <MX_GPIO_Init+0x318>)
 80015ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b2:	4a99      	ldr	r2, [pc, #612]	; (8001818 <MX_GPIO_Init+0x318>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015bc:	4b96      	ldr	r3, [pc, #600]	; (8001818 <MX_GPIO_Init+0x318>)
 80015be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ca:	4b93      	ldr	r3, [pc, #588]	; (8001818 <MX_GPIO_Init+0x318>)
 80015cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d0:	4a91      	ldr	r2, [pc, #580]	; (8001818 <MX_GPIO_Init+0x318>)
 80015d2:	f043 0310 	orr.w	r3, r3, #16
 80015d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015da:	4b8f      	ldr	r3, [pc, #572]	; (8001818 <MX_GPIO_Init+0x318>)
 80015dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e0:	f003 0310 	and.w	r3, r3, #16
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80015e8:	4b8b      	ldr	r3, [pc, #556]	; (8001818 <MX_GPIO_Init+0x318>)
 80015ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ee:	4a8a      	ldr	r2, [pc, #552]	; (8001818 <MX_GPIO_Init+0x318>)
 80015f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f8:	4b87      	ldr	r3, [pc, #540]	; (8001818 <MX_GPIO_Init+0x318>)
 80015fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001606:	4b84      	ldr	r3, [pc, #528]	; (8001818 <MX_GPIO_Init+0x318>)
 8001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160c:	4a82      	ldr	r2, [pc, #520]	; (8001818 <MX_GPIO_Init+0x318>)
 800160e:	f043 0308 	orr.w	r3, r3, #8
 8001612:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001616:	4b80      	ldr	r3, [pc, #512]	; (8001818 <MX_GPIO_Init+0x318>)
 8001618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001624:	4b7c      	ldr	r3, [pc, #496]	; (8001818 <MX_GPIO_Init+0x318>)
 8001626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162a:	4a7b      	ldr	r2, [pc, #492]	; (8001818 <MX_GPIO_Init+0x318>)
 800162c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001630:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001634:	4b78      	ldr	r3, [pc, #480]	; (8001818 <MX_GPIO_Init+0x318>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001642:	4b75      	ldr	r3, [pc, #468]	; (8001818 <MX_GPIO_Init+0x318>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001648:	4a73      	ldr	r2, [pc, #460]	; (8001818 <MX_GPIO_Init+0x318>)
 800164a:	f043 0320 	orr.w	r3, r3, #32
 800164e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001652:	4b71      	ldr	r3, [pc, #452]	; (8001818 <MX_GPIO_Init+0x318>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	f241 01c4 	movw	r1, #4292	; 0x10c4
 8001666:	486d      	ldr	r0, [pc, #436]	; (800181c <MX_GPIO_Init+0x31c>)
 8001668:	f003 fd38 	bl	80050dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_6, GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001672:	486b      	ldr	r0, [pc, #428]	; (8001820 <MX_GPIO_Init+0x320>)
 8001674:	f003 fd32 	bl	80050dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800167e:	4869      	ldr	r0, [pc, #420]	; (8001824 <MX_GPIO_Init+0x324>)
 8001680:	f003 fd2c 	bl	80050dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	2108      	movs	r1, #8
 8001688:	4867      	ldr	r0, [pc, #412]	; (8001828 <MX_GPIO_Init+0x328>)
 800168a:	f003 fd27 	bl	80050dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_1, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2102      	movs	r1, #2
 8001692:	4866      	ldr	r0, [pc, #408]	; (800182c <MX_GPIO_Init+0x32c>)
 8001694:	f003 fd22 	bl	80050dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	2104      	movs	r1, #4
 800169c:	4864      	ldr	r0, [pc, #400]	; (8001830 <MX_GPIO_Init+0x330>)
 800169e:	f003 fd1d 	bl	80050dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB6 PB7 MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 80016a2:	f241 03c4 	movw	r3, #4292	; 0x10c4
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b8:	4619      	mov	r1, r3
 80016ba:	4858      	ldr	r0, [pc, #352]	; (800181c <MX_GPIO_Init+0x31c>)
 80016bc:	f003 fb5e 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80016d2:	2303      	movs	r3, #3
 80016d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016da:	4619      	mov	r1, r3
 80016dc:	4855      	ldr	r0, [pc, #340]	; (8001834 <MX_GPIO_Init+0x334>)
 80016de:	f003 fb4d 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e6:	2300      	movs	r3, #0
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f2:	4619      	mov	r1, r3
 80016f4:	4850      	ldr	r0, [pc, #320]	; (8001838 <MX_GPIO_Init+0x338>)
 80016f6:	f003 fb41 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 80016fa:	2330      	movs	r3, #48	; 0x30
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800170a:	230a      	movs	r3, #10
 800170c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800170e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001712:	4619      	mov	r1, r3
 8001714:	4849      	ldr	r0, [pc, #292]	; (800183c <MX_GPIO_Init+0x33c>)
 8001716:	f003 fb31 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 800171a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001720:	2300      	movs	r3, #0
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800172c:	4619      	mov	r1, r3
 800172e:	483c      	ldr	r0, [pc, #240]	; (8001820 <MX_GPIO_Init+0x320>)
 8001730:	f003 fb24 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173a:	2300      	movs	r3, #0
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001742:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001746:	4619      	mov	r1, r3
 8001748:	483d      	ldr	r0, [pc, #244]	; (8001840 <MX_GPIO_Init+0x340>)
 800174a:	f003 fb17 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_6;
 800174e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001754:	2301      	movs	r3, #1
 8001756:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001764:	4619      	mov	r1, r3
 8001766:	482e      	ldr	r0, [pc, #184]	; (8001820 <MX_GPIO_Init+0x320>)
 8001768:	f003 fb08 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800177c:	2306      	movs	r3, #6
 800177e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001784:	4619      	mov	r1, r3
 8001786:	4828      	ldr	r0, [pc, #160]	; (8001828 <MX_GPIO_Init+0x328>)
 8001788:	f003 faf8 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800178c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	2301      	movs	r3, #1
 8001794:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a2:	4619      	mov	r1, r3
 80017a4:	481f      	ldr	r0, [pc, #124]	; (8001824 <MX_GPIO_Init+0x324>)
 80017a6:	f003 fae9 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017aa:	2308      	movs	r3, #8
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017be:	4619      	mov	r1, r3
 80017c0:	4819      	ldr	r0, [pc, #100]	; (8001828 <MX_GPIO_Init+0x328>)
 80017c2:	f003 fadb 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80017c6:	2304      	movs	r3, #4
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d8:	4619      	mov	r1, r3
 80017da:	4813      	ldr	r0, [pc, #76]	; (8001828 <MX_GPIO_Init+0x328>)
 80017dc:	f003 face 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80017e0:	2301      	movs	r3, #1
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e4:	2300      	movs	r3, #0
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80017ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f0:	4619      	mov	r1, r3
 80017f2:	480e      	ldr	r0, [pc, #56]	; (800182c <MX_GPIO_Init+0x32c>)
 80017f4:	f003 fac2 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017f8:	2302      	movs	r3, #2
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001808:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800180c:	4619      	mov	r1, r3
 800180e:	4807      	ldr	r0, [pc, #28]	; (800182c <MX_GPIO_Init+0x32c>)
 8001810:	f003 fab4 	bl	8004d7c <HAL_GPIO_Init>
 8001814:	e016      	b.n	8001844 <MX_GPIO_Init+0x344>
 8001816:	bf00      	nop
 8001818:	58024400 	.word	0x58024400
 800181c:	58020400 	.word	0x58020400
 8001820:	58020000 	.word	0x58020000
 8001824:	58022000 	.word	0x58022000
 8001828:	58021800 	.word	0x58021800
 800182c:	58022800 	.word	0x58022800
 8001830:	58022400 	.word	0x58022400
 8001834:	58021c00 	.word	0x58021c00
 8001838:	58020c00 	.word	0x58020c00
 800183c:	58021000 	.word	0x58021000
 8001840:	58020800 	.word	0x58020800

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001844:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001856:	2309      	movs	r3, #9
 8001858:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800185a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185e:	4619      	mov	r1, r3
 8001860:	4822      	ldr	r0, [pc, #136]	; (80018ec <MX_GPIO_Init+0x3ec>)
 8001862:	f003 fa8b 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001866:	f44f 7300 	mov.w	r3, #512	; 0x200
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001878:	230a      	movs	r3, #10
 800187a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800187c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001880:	4619      	mov	r1, r3
 8001882:	481a      	ldr	r0, [pc, #104]	; (80018ec <MX_GPIO_Init+0x3ec>)
 8001884:	f003 fa7a 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 8001888:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800188e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189c:	4619      	mov	r1, r3
 800189e:	4814      	ldr	r0, [pc, #80]	; (80018f0 <MX_GPIO_Init+0x3f0>)
 80018a0:	f003 fa6c 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80018b6:	2309      	movs	r3, #9
 80018b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018be:	4619      	mov	r1, r3
 80018c0:	480c      	ldr	r0, [pc, #48]	; (80018f4 <MX_GPIO_Init+0x3f4>)
 80018c2:	f003 fa5b 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80018c6:	2304      	movs	r3, #4
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ca:	2301      	movs	r3, #1
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80018d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018da:	4619      	mov	r1, r3
 80018dc:	4806      	ldr	r0, [pc, #24]	; (80018f8 <MX_GPIO_Init+0x3f8>)
 80018de:	f003 fa4d 	bl	8004d7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018e2:	bf00      	nop
 80018e4:	3740      	adds	r7, #64	; 0x40
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	58021400 	.word	0x58021400
 80018f0:	58021c00 	.word	0x58021c00
 80018f4:	58020c00 	.word	0x58020c00
 80018f8:	58022400 	.word	0x58022400

080018fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001900:	b672      	cpsid	i
}
 8001902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001904:	e7fe      	b.n	8001904 <Error_Handler+0x8>
	...

08001908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_MspInit+0x30>)
 8001910:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001914:	4a08      	ldr	r2, [pc, #32]	; (8001938 <HAL_MspInit+0x30>)
 8001916:	f043 0302 	orr.w	r3, r3, #2
 800191a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_MspInit+0x30>)
 8001920:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	58024400 	.word	0x58024400

0800193c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b090      	sub	sp, #64	; 0x40
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a72      	ldr	r2, [pc, #456]	; (8001b24 <HAL_ADC_MspInit+0x1e8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d14e      	bne.n	80019fc <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800195e:	4b72      	ldr	r3, [pc, #456]	; (8001b28 <HAL_ADC_MspInit+0x1ec>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3301      	adds	r3, #1
 8001964:	4a70      	ldr	r2, [pc, #448]	; (8001b28 <HAL_ADC_MspInit+0x1ec>)
 8001966:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001968:	4b6f      	ldr	r3, [pc, #444]	; (8001b28 <HAL_ADC_MspInit+0x1ec>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d10e      	bne.n	800198e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001970:	4b6e      	ldr	r3, [pc, #440]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 8001972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001976:	4a6d      	ldr	r2, [pc, #436]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 8001978:	f043 0320 	orr.w	r3, r3, #32
 800197c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001980:	4b6a      	ldr	r3, [pc, #424]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 8001982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001986:	f003 0320 	and.w	r3, r3, #32
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
 800198c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800198e:	4b67      	ldr	r3, [pc, #412]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 8001990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001994:	4a65      	ldr	r2, [pc, #404]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 8001996:	f043 0304 	orr.w	r3, r3, #4
 800199a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800199e:	4b63      	ldr	r3, [pc, #396]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 80019a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ac:	4b5f      	ldr	r3, [pc, #380]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 80019ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b2:	4a5e      	ldr	r2, [pc, #376]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019bc:	4b5b      	ldr	r3, [pc, #364]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 80019be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	623b      	str	r3, [r7, #32]
 80019c8:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019ca:	2301      	movs	r3, #1
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ce:	2303      	movs	r3, #3
 80019d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019da:	4619      	mov	r1, r3
 80019dc:	4854      	ldr	r0, [pc, #336]	; (8001b30 <HAL_ADC_MspInit+0x1f4>)
 80019de:	f003 f9cd 	bl	8004d7c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80019e2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80019e6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80019ea:	f001 f8b7 	bl	8002b5c <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80019ee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019f2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80019f6:	f001 f8b1 	bl	8002b5c <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80019fa:	e08f      	b.n	8001b1c <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a4c      	ldr	r2, [pc, #304]	; (8001b34 <HAL_ADC_MspInit+0x1f8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d133      	bne.n	8001a6e <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a06:	4b48      	ldr	r3, [pc, #288]	; (8001b28 <HAL_ADC_MspInit+0x1ec>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	4a46      	ldr	r2, [pc, #280]	; (8001b28 <HAL_ADC_MspInit+0x1ec>)
 8001a0e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a10:	4b45      	ldr	r3, [pc, #276]	; (8001b28 <HAL_ADC_MspInit+0x1ec>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d10e      	bne.n	8001a36 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a18:	4b44      	ldr	r3, [pc, #272]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 8001a1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a1e:	4a43      	ldr	r2, [pc, #268]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 8001a20:	f043 0320 	orr.w	r3, r3, #32
 8001a24:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a28:	4b40      	ldr	r3, [pc, #256]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 8001a2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a2e:	f003 0320 	and.w	r3, r3, #32
 8001a32:	61fb      	str	r3, [r7, #28]
 8001a34:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 8001a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3c:	4a3b      	ldr	r2, [pc, #236]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a46:	4b39      	ldr	r3, [pc, #228]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 8001a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001a54:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001a58:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001a5c:	f001 f87e 	bl	8002b5c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001a60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a64:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001a68:	f001 f878 	bl	8002b5c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001a6c:	e056      	b.n	8001b1c <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a31      	ldr	r2, [pc, #196]	; (8001b38 <HAL_ADC_MspInit+0x1fc>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d151      	bne.n	8001b1c <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a78:	4b2c      	ldr	r3, [pc, #176]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 8001a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7e:	4a2b      	ldr	r2, [pc, #172]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 8001a80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a88:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 8001a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a96:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 8001a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9c:	4a23      	ldr	r2, [pc, #140]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 8001a9e:	f043 0320 	orr.w	r3, r3, #32
 8001aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa6:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 8001aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aac:	f003 0320 	and.w	r3, r3, #32
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 8001ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aba:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_ADC_MspInit+0x1f0>)
 8001ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4815      	ldr	r0, [pc, #84]	; (8001b3c <HAL_ADC_MspInit+0x200>)
 8001ae8:	f003 f948 	bl	8004d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aec:	2301      	movs	r3, #1
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001af0:	2303      	movs	r3, #3
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001afc:	4619      	mov	r1, r3
 8001afe:	480c      	ldr	r0, [pc, #48]	; (8001b30 <HAL_ADC_MspInit+0x1f4>)
 8001b00:	f003 f93c 	bl	8004d7c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001b04:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001b08:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001b0c:	f001 f826 	bl	8002b5c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001b10:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001b14:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001b18:	f001 f820 	bl	8002b5c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001b1c:	bf00      	nop
 8001b1e:	3740      	adds	r7, #64	; 0x40
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40022000 	.word	0x40022000
 8001b28:	24000cec 	.word	0x24000cec
 8001b2c:	58024400 	.word	0x58024400
 8001b30:	58020800 	.word	0x58020800
 8001b34:	40022100 	.word	0x40022100
 8001b38:	58026000 	.word	0x58026000
 8001b3c:	58021400 	.word	0x58021400

08001b40 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b092      	sub	sp, #72	; 0x48
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a87      	ldr	r2, [pc, #540]	; (8001d7c <HAL_ETH_MspInit+0x23c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	f040 8108 	bne.w	8001d74 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001b64:	4b86      	ldr	r3, [pc, #536]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001b66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b6a:	4a85      	ldr	r2, [pc, #532]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b74:	4b82      	ldr	r3, [pc, #520]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001b76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001b82:	4b7f      	ldr	r3, [pc, #508]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001b84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b88:	4a7d      	ldr	r2, [pc, #500]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b92:	4b7b      	ldr	r3, [pc, #492]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001b94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001ba0:	4b77      	ldr	r3, [pc, #476]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001ba2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ba6:	4a76      	ldr	r2, [pc, #472]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bb0:	4b73      	ldr	r3, [pc, #460]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001bb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bbe:	4b70      	ldr	r3, [pc, #448]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc4:	4a6e      	ldr	r2, [pc, #440]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bce:	4b6c      	ldr	r3, [pc, #432]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bdc:	4b68      	ldr	r3, [pc, #416]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be2:	4a67      	ldr	r2, [pc, #412]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001be4:	f043 0310 	orr.w	r3, r3, #16
 8001be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bec:	4b64      	ldr	r3, [pc, #400]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	623b      	str	r3, [r7, #32]
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001bfa:	4b61      	ldr	r3, [pc, #388]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c00:	4a5f      	ldr	r2, [pc, #380]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c0a:	4b5d      	ldr	r3, [pc, #372]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c18:	4b59      	ldr	r3, [pc, #356]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1e:	4a58      	ldr	r2, [pc, #352]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c28:	4b55      	ldr	r3, [pc, #340]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c36:	4b52      	ldr	r3, [pc, #328]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3c:	4a50      	ldr	r2, [pc, #320]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c46:	4b4e      	ldr	r3, [pc, #312]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	4b4a      	ldr	r3, [pc, #296]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5a:	4a49      	ldr	r2, [pc, #292]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c64:	4b46      	ldr	r3, [pc, #280]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	4b43      	ldr	r3, [pc, #268]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c78:	4a41      	ldr	r2, [pc, #260]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c82:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <HAL_ETH_MspInit+0x240>)
 8001c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001c90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c94:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ca2:	230b      	movs	r3, #11
 8001ca4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ca6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001caa:	4619      	mov	r1, r3
 8001cac:	4835      	ldr	r0, [pc, #212]	; (8001d84 <HAL_ETH_MspInit+0x244>)
 8001cae:	f003 f865 	bl	8004d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cc2:	230b      	movs	r3, #11
 8001cc4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001cc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cca:	4619      	mov	r1, r3
 8001ccc:	482e      	ldr	r0, [pc, #184]	; (8001d88 <HAL_ETH_MspInit+0x248>)
 8001cce:	f003 f855 	bl	8004d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cd6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ce4:	230b      	movs	r3, #11
 8001ce6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001ce8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cec:	4619      	mov	r1, r3
 8001cee:	4827      	ldr	r0, [pc, #156]	; (8001d8c <HAL_ETH_MspInit+0x24c>)
 8001cf0:	f003 f844 	bl	8004d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001cf4:	233e      	movs	r3, #62	; 0x3e
 8001cf6:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d04:	230b      	movs	r3, #11
 8001d06:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4820      	ldr	r0, [pc, #128]	; (8001d90 <HAL_ETH_MspInit+0x250>)
 8001d10:	f003 f834 	bl	8004d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001d14:	230c      	movs	r3, #12
 8001d16:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d24:	230b      	movs	r3, #11
 8001d26:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4819      	ldr	r0, [pc, #100]	; (8001d94 <HAL_ETH_MspInit+0x254>)
 8001d30:	f003 f824 	bl	8004d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001d34:	2386      	movs	r3, #134	; 0x86
 8001d36:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d44:	230b      	movs	r3, #11
 8001d46:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4812      	ldr	r0, [pc, #72]	; (8001d98 <HAL_ETH_MspInit+0x258>)
 8001d50:	f003 f814 	bl	8004d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001d54:	2303      	movs	r3, #3
 8001d56:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d64:	230b      	movs	r3, #11
 8001d66:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	480b      	ldr	r0, [pc, #44]	; (8001d9c <HAL_ETH_MspInit+0x25c>)
 8001d70:	f003 f804 	bl	8004d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001d74:	bf00      	nop
 8001d76:	3748      	adds	r7, #72	; 0x48
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40028000 	.word	0x40028000
 8001d80:	58024400 	.word	0x58024400
 8001d84:	58021800 	.word	0x58021800
 8001d88:	58021000 	.word	0x58021000
 8001d8c:	58022000 	.word	0x58022000
 8001d90:	58020800 	.word	0x58020800
 8001d94:	58021c00 	.word	0x58021c00
 8001d98:	58020000 	.word	0x58020000
 8001d9c:	58020400 	.word	0x58020400

08001da0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b0bc      	sub	sp, #240	; 0xf0
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db8:	f107 0318 	add.w	r3, r7, #24
 8001dbc:	22c0      	movs	r2, #192	; 0xc0
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f00a f897 	bl	800bef4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a57      	ldr	r2, [pc, #348]	; (8001f28 <HAL_FDCAN_MspInit+0x188>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d151      	bne.n	8001e74 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001dd0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001ddc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001de0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001de4:	f107 0318 	add.w	r3, r7, #24
 8001de8:	4618      	mov	r0, r3
 8001dea:	f004 fdb1 	bl	8006950 <HAL_RCCEx_PeriphCLKConfig>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001df4:	f7ff fd82 	bl	80018fc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001df8:	4b4c      	ldr	r3, [pc, #304]	; (8001f2c <HAL_FDCAN_MspInit+0x18c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	4a4b      	ldr	r2, [pc, #300]	; (8001f2c <HAL_FDCAN_MspInit+0x18c>)
 8001e00:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001e02:	4b4a      	ldr	r3, [pc, #296]	; (8001f2c <HAL_FDCAN_MspInit+0x18c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d10e      	bne.n	8001e28 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e0a:	4b49      	ldr	r3, [pc, #292]	; (8001f30 <HAL_FDCAN_MspInit+0x190>)
 8001e0c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e10:	4a47      	ldr	r2, [pc, #284]	; (8001f30 <HAL_FDCAN_MspInit+0x190>)
 8001e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e16:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001e1a:	4b45      	ldr	r3, [pc, #276]	; (8001f30 <HAL_FDCAN_MspInit+0x190>)
 8001e1c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e28:	4b41      	ldr	r3, [pc, #260]	; (8001f30 <HAL_FDCAN_MspInit+0x190>)
 8001e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e2e:	4a40      	ldr	r2, [pc, #256]	; (8001f30 <HAL_FDCAN_MspInit+0x190>)
 8001e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e38:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <HAL_FDCAN_MspInit+0x190>)
 8001e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001e46:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001e60:	2309      	movs	r3, #9
 8001e62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e66:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4831      	ldr	r0, [pc, #196]	; (8001f34 <HAL_FDCAN_MspInit+0x194>)
 8001e6e:	f002 ff85 	bl	8004d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001e72:	e055      	b.n	8001f20 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a2f      	ldr	r2, [pc, #188]	; (8001f38 <HAL_FDCAN_MspInit+0x198>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d150      	bne.n	8001f20 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001e7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001e8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e92:	f107 0318 	add.w	r3, r7, #24
 8001e96:	4618      	mov	r0, r3
 8001e98:	f004 fd5a 	bl	8006950 <HAL_RCCEx_PeriphCLKConfig>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8001ea2:	f7ff fd2b 	bl	80018fc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <HAL_FDCAN_MspInit+0x18c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	4a1f      	ldr	r2, [pc, #124]	; (8001f2c <HAL_FDCAN_MspInit+0x18c>)
 8001eae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <HAL_FDCAN_MspInit+0x18c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d10e      	bne.n	8001ed6 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_FDCAN_MspInit+0x190>)
 8001eba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001ebe:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <HAL_FDCAN_MspInit+0x190>)
 8001ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001ec8:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <HAL_FDCAN_MspInit+0x190>)
 8001eca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <HAL_FDCAN_MspInit+0x190>)
 8001ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001edc:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <HAL_FDCAN_MspInit+0x190>)
 8001ede:	f043 0302 	orr.w	r3, r3, #2
 8001ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_FDCAN_MspInit+0x190>)
 8001ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8001ef4:	f242 0320 	movw	r3, #8224	; 0x2020
 8001ef8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001f0e:	2309      	movs	r3, #9
 8001f10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f14:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4808      	ldr	r0, [pc, #32]	; (8001f3c <HAL_FDCAN_MspInit+0x19c>)
 8001f1c:	f002 ff2e 	bl	8004d7c <HAL_GPIO_Init>
}
 8001f20:	bf00      	nop
 8001f22:	37f0      	adds	r7, #240	; 0xf0
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	4000a000 	.word	0x4000a000
 8001f2c:	24000cf0 	.word	0x24000cf0
 8001f30:	58024400 	.word	0x58024400
 8001f34:	58021c00 	.word	0x58021c00
 8001f38:	4000a400 	.word	0x4000a400
 8001f3c:	58020400 	.word	0x58020400

08001f40 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b0be      	sub	sp, #248	; 0xf8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f58:	f107 0320 	add.w	r3, r7, #32
 8001f5c:	22c0      	movs	r2, #192	; 0xc0
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f009 ffc7 	bl	800bef4 <memset>
  if(hltdc->Instance==LTDC)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a66      	ldr	r2, [pc, #408]	; (8002104 <HAL_LTDC_MspInit+0x1c4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	f040 80c4 	bne.w	80020fa <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f72:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001f7e:	2320      	movs	r3, #32
 8001f80:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001f82:	23c0      	movs	r3, #192	; 0xc0
 8001f84:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001f86:	2302      	movs	r3, #2
 8001f88:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001f92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f96:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f9c:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0.0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa2:	f107 0320 	add.w	r3, r7, #32
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 fcd2 	bl	8006950 <HAL_RCCEx_PeriphCLKConfig>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8001fb2:	f7ff fca3 	bl	80018fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001fb6:	4b54      	ldr	r3, [pc, #336]	; (8002108 <HAL_LTDC_MspInit+0x1c8>)
 8001fb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001fbc:	4a52      	ldr	r2, [pc, #328]	; (8002108 <HAL_LTDC_MspInit+0x1c8>)
 8001fbe:	f043 0308 	orr.w	r3, r3, #8
 8001fc2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8001fc6:	4b50      	ldr	r3, [pc, #320]	; (8002108 <HAL_LTDC_MspInit+0x1c8>)
 8001fc8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001fd4:	4b4c      	ldr	r3, [pc, #304]	; (8002108 <HAL_LTDC_MspInit+0x1c8>)
 8001fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fda:	4a4b      	ldr	r2, [pc, #300]	; (8002108 <HAL_LTDC_MspInit+0x1c8>)
 8001fdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fe4:	4b48      	ldr	r3, [pc, #288]	; (8002108 <HAL_LTDC_MspInit+0x1c8>)
 8001fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fee:	61bb      	str	r3, [r7, #24]
 8001ff0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ff2:	4b45      	ldr	r3, [pc, #276]	; (8002108 <HAL_LTDC_MspInit+0x1c8>)
 8001ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff8:	4a43      	ldr	r2, [pc, #268]	; (8002108 <HAL_LTDC_MspInit+0x1c8>)
 8001ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002002:	4b41      	ldr	r3, [pc, #260]	; (8002108 <HAL_LTDC_MspInit+0x1c8>)
 8002004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002010:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <HAL_LTDC_MspInit+0x1c8>)
 8002012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002016:	4a3c      	ldr	r2, [pc, #240]	; (8002108 <HAL_LTDC_MspInit+0x1c8>)
 8002018:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800201c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002020:	4b39      	ldr	r3, [pc, #228]	; (8002108 <HAL_LTDC_MspInit+0x1c8>)
 8002022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800202e:	4b36      	ldr	r3, [pc, #216]	; (8002108 <HAL_LTDC_MspInit+0x1c8>)
 8002030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002034:	4a34      	ldr	r2, [pc, #208]	; (8002108 <HAL_LTDC_MspInit+0x1c8>)
 8002036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800203a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800203e:	4b32      	ldr	r3, [pc, #200]	; (8002108 <HAL_LTDC_MspInit+0x1c8>)
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 800204c:	23fc      	movs	r3, #252	; 0xfc
 800204e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002064:	230e      	movs	r3, #14
 8002066:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800206a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800206e:	4619      	mov	r1, r3
 8002070:	4826      	ldr	r0, [pc, #152]	; (800210c <HAL_LTDC_MspInit+0x1cc>)
 8002072:	f002 fe83 	bl	8004d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8002076:	f24d 2303 	movw	r3, #53763	; 0xd203
 800207a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002090:	230e      	movs	r3, #14
 8002092:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002096:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800209a:	4619      	mov	r1, r3
 800209c:	481c      	ldr	r0, [pc, #112]	; (8002110 <HAL_LTDC_MspInit+0x1d0>)
 800209e:	f002 fe6d 	bl	8004d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 80020a2:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80020a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020bc:	230e      	movs	r3, #14
 80020be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80020c2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020c6:	4619      	mov	r1, r3
 80020c8:	4812      	ldr	r0, [pc, #72]	; (8002114 <HAL_LTDC_MspInit+0x1d4>)
 80020ca:	f002 fe57 	bl	8004d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020e8:	230e      	movs	r3, #14
 80020ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80020ee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020f2:	4619      	mov	r1, r3
 80020f4:	4808      	ldr	r0, [pc, #32]	; (8002118 <HAL_LTDC_MspInit+0x1d8>)
 80020f6:	f002 fe41 	bl	8004d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80020fa:	bf00      	nop
 80020fc:	37f8      	adds	r7, #248	; 0xf8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	50001000 	.word	0x50001000
 8002108:	58024400 	.word	0x58024400
 800210c:	58022800 	.word	0x58022800
 8002110:	58022000 	.word	0x58022000
 8002114:	58022400 	.word	0x58022400
 8002118:	58021c00 	.word	0x58021c00

0800211c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b0b2      	sub	sp, #200	; 0xc8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002124:	f107 0308 	add.w	r3, r7, #8
 8002128:	22c0      	movs	r2, #192	; 0xc0
 800212a:	2100      	movs	r1, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f009 fee1 	bl	800bef4 <memset>
  if(hrtc->Instance==RTC)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a10      	ldr	r2, [pc, #64]	; (8002178 <HAL_RTC_MspInit+0x5c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d119      	bne.n	8002170 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800213c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800214c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002150:	f107 0308 	add.w	r3, r7, #8
 8002154:	4618      	mov	r0, r3
 8002156:	f004 fbfb 	bl	8006950 <HAL_RCCEx_PeriphCLKConfig>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002160:	f7ff fbcc 	bl	80018fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_RTC_MspInit+0x60>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	4a04      	ldr	r2, [pc, #16]	; (800217c <HAL_RTC_MspInit+0x60>)
 800216a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800216e:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002170:	bf00      	nop
 8002172:	37c8      	adds	r7, #200	; 0xc8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	58004000 	.word	0x58004000
 800217c:	58024400 	.word	0x58024400

08002180 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b0bc      	sub	sp, #240	; 0xf0
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002198:	f107 0318 	add.w	r3, r7, #24
 800219c:	22c0      	movs	r2, #192	; 0xc0
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f009 fea7 	bl	800bef4 <memset>
  if(hspi->Instance==SPI2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a55      	ldr	r2, [pc, #340]	; (8002300 <HAL_SPI_MspInit+0x180>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	f040 80a3 	bne.w	80022f8 <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80021b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80021be:	2300      	movs	r3, #0
 80021c0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021c2:	f107 0318 	add.w	r3, r7, #24
 80021c6:	4618      	mov	r0, r3
 80021c8:	f004 fbc2 	bl	8006950 <HAL_RCCEx_PeriphCLKConfig>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80021d2:	f7ff fb93 	bl	80018fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021d6:	4b4b      	ldr	r3, [pc, #300]	; (8002304 <HAL_SPI_MspInit+0x184>)
 80021d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021dc:	4a49      	ldr	r2, [pc, #292]	; (8002304 <HAL_SPI_MspInit+0x184>)
 80021de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021e6:	4b47      	ldr	r3, [pc, #284]	; (8002304 <HAL_SPI_MspInit+0x184>)
 80021e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f4:	4b43      	ldr	r3, [pc, #268]	; (8002304 <HAL_SPI_MspInit+0x184>)
 80021f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021fa:	4a42      	ldr	r2, [pc, #264]	; (8002304 <HAL_SPI_MspInit+0x184>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002204:	4b3f      	ldr	r3, [pc, #252]	; (8002304 <HAL_SPI_MspInit+0x184>)
 8002206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002212:	4b3c      	ldr	r3, [pc, #240]	; (8002304 <HAL_SPI_MspInit+0x184>)
 8002214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002218:	4a3a      	ldr	r2, [pc, #232]	; (8002304 <HAL_SPI_MspInit+0x184>)
 800221a:	f043 0308 	orr.w	r3, r3, #8
 800221e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002222:	4b38      	ldr	r3, [pc, #224]	; (8002304 <HAL_SPI_MspInit+0x184>)
 8002224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002230:	4b34      	ldr	r3, [pc, #208]	; (8002304 <HAL_SPI_MspInit+0x184>)
 8002232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002236:	4a33      	ldr	r2, [pc, #204]	; (8002304 <HAL_SPI_MspInit+0x184>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002240:	4b30      	ldr	r3, [pc, #192]	; (8002304 <HAL_SPI_MspInit+0x184>)
 8002242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800224e:	2310      	movs	r3, #16
 8002250:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002266:	2307      	movs	r3, #7
 8002268:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002270:	4619      	mov	r1, r3
 8002272:	4825      	ldr	r0, [pc, #148]	; (8002308 <HAL_SPI_MspInit+0x188>)
 8002274:	f002 fd82 	bl	8004d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002278:	2308      	movs	r3, #8
 800227a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2300      	movs	r3, #0
 800228c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002290:	2305      	movs	r3, #5
 8002292:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002296:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800229a:	4619      	mov	r1, r3
 800229c:	481b      	ldr	r0, [pc, #108]	; (800230c <HAL_SPI_MspInit+0x18c>)
 800229e:	f002 fd6d 	bl	8004d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022a2:	2304      	movs	r3, #4
 80022a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	2302      	movs	r3, #2
 80022aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022ba:	2305      	movs	r3, #5
 80022bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022c4:	4619      	mov	r1, r3
 80022c6:	4812      	ldr	r0, [pc, #72]	; (8002310 <HAL_SPI_MspInit+0x190>)
 80022c8:	f002 fd58 	bl	8004d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022e6:	2305      	movs	r3, #5
 80022e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022f0:	4619      	mov	r1, r3
 80022f2:	4805      	ldr	r0, [pc, #20]	; (8002308 <HAL_SPI_MspInit+0x188>)
 80022f4:	f002 fd42 	bl	8004d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80022f8:	bf00      	nop
 80022fa:	37f0      	adds	r7, #240	; 0xf0
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40003800 	.word	0x40003800
 8002304:	58024400 	.word	0x58024400
 8002308:	58020400 	.word	0x58020400
 800230c:	58020c00 	.word	0x58020c00
 8002310:	58022000 	.word	0x58022000

08002314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <HAL_TIM_Base_MspInit+0x3c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d10e      	bne.n	8002344 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002326:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_TIM_Base_MspInit+0x40>)
 8002328:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800232c:	4a09      	ldr	r2, [pc, #36]	; (8002354 <HAL_TIM_Base_MspInit+0x40>)
 800232e:	f043 0302 	orr.w	r3, r3, #2
 8002332:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002336:	4b07      	ldr	r3, [pc, #28]	; (8002354 <HAL_TIM_Base_MspInit+0x40>)
 8002338:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	40000400 	.word	0x40000400
 8002354:	58024400 	.word	0x58024400

08002358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b0ba      	sub	sp, #232	; 0xe8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002370:	f107 0310 	add.w	r3, r7, #16
 8002374:	22c0      	movs	r2, #192	; 0xc0
 8002376:	2100      	movs	r1, #0
 8002378:	4618      	mov	r0, r3
 800237a:	f009 fdbb 	bl	800bef4 <memset>
  if(huart->Instance==USART3)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a27      	ldr	r2, [pc, #156]	; (8002420 <HAL_UART_MspInit+0xc8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d146      	bne.n	8002416 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002388:	f04f 0202 	mov.w	r2, #2
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800239a:	f107 0310 	add.w	r3, r7, #16
 800239e:	4618      	mov	r0, r3
 80023a0:	f004 fad6 	bl	8006950 <HAL_RCCEx_PeriphCLKConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80023aa:	f7ff faa7 	bl	80018fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_UART_MspInit+0xcc>)
 80023b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023b4:	4a1b      	ldr	r2, [pc, #108]	; (8002424 <HAL_UART_MspInit+0xcc>)
 80023b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023be:	4b19      	ldr	r3, [pc, #100]	; (8002424 <HAL_UART_MspInit+0xcc>)
 80023c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023cc:	4b15      	ldr	r3, [pc, #84]	; (8002424 <HAL_UART_MspInit+0xcc>)
 80023ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d2:	4a14      	ldr	r2, [pc, #80]	; (8002424 <HAL_UART_MspInit+0xcc>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <HAL_UART_MspInit+0xcc>)
 80023de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80023ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	2302      	movs	r3, #2
 80023f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2300      	movs	r3, #0
 8002400:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002404:	2307      	movs	r3, #7
 8002406:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800240e:	4619      	mov	r1, r3
 8002410:	4805      	ldr	r0, [pc, #20]	; (8002428 <HAL_UART_MspInit+0xd0>)
 8002412:	f002 fcb3 	bl	8004d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002416:	bf00      	nop
 8002418:	37e8      	adds	r7, #232	; 0xe8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40004800 	.word	0x40004800
 8002424:	58024400 	.word	0x58024400
 8002428:	58020400 	.word	0x58020400

0800242c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b0ba      	sub	sp, #232	; 0xe8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002444:	f107 0310 	add.w	r3, r7, #16
 8002448:	22c0      	movs	r2, #192	; 0xc0
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f009 fd51 	bl	800bef4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a30      	ldr	r2, [pc, #192]	; (8002518 <HAL_PCD_MspInit+0xec>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d159      	bne.n	8002510 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800245c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002468:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800246c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002470:	f107 0310 	add.w	r3, r7, #16
 8002474:	4618      	mov	r0, r3
 8002476:	f004 fa6b 	bl	8006950 <HAL_RCCEx_PeriphCLKConfig>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002480:	f7ff fa3c 	bl	80018fc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002484:	f003 fa6e 	bl	8005964 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002488:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_PCD_MspInit+0xf0>)
 800248a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800248e:	4a23      	ldr	r2, [pc, #140]	; (800251c <HAL_PCD_MspInit+0xf0>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002498:	4b20      	ldr	r3, [pc, #128]	; (800251c <HAL_PCD_MspInit+0xf0>)
 800249a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 80024a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ae:	2300      	movs	r3, #0
 80024b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 80024ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024be:	4619      	mov	r1, r3
 80024c0:	4817      	ldr	r0, [pc, #92]	; (8002520 <HAL_PCD_MspInit+0xf4>)
 80024c2:	f002 fc5b 	bl	8004d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 80024c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80024ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2302      	movs	r3, #2
 80024d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	2300      	movs	r3, #0
 80024dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80024e0:	230a      	movs	r3, #10
 80024e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024ea:	4619      	mov	r1, r3
 80024ec:	480c      	ldr	r0, [pc, #48]	; (8002520 <HAL_PCD_MspInit+0xf4>)
 80024ee:	f002 fc45 	bl	8004d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80024f2:	4b0a      	ldr	r3, [pc, #40]	; (800251c <HAL_PCD_MspInit+0xf0>)
 80024f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024f8:	4a08      	ldr	r2, [pc, #32]	; (800251c <HAL_PCD_MspInit+0xf0>)
 80024fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_PCD_MspInit+0xf0>)
 8002504:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002510:	bf00      	nop
 8002512:	37e8      	adds	r7, #232	; 0xe8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40080000 	.word	0x40080000
 800251c:	58024400 	.word	0x58024400
 8002520:	58020000 	.word	0x58020000

08002524 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002524:	b580      	push	{r7, lr}
 8002526:	b0b8      	sub	sp, #224	; 0xe0
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800252a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
 8002538:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800253a:	4b51      	ldr	r3, [pc, #324]	; (8002680 <HAL_FMC_MspInit+0x15c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 8099 	bne.w	8002676 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8002544:	4b4e      	ldr	r3, [pc, #312]	; (8002680 <HAL_FMC_MspInit+0x15c>)
 8002546:	2201      	movs	r2, #1
 8002548:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800254a:	f107 0308 	add.w	r3, r7, #8
 800254e:	22c0      	movs	r2, #192	; 0xc0
 8002550:	2100      	movs	r1, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f009 fcce 	bl	800bef4 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8002558:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8002564:	2300      	movs	r3, #0
 8002566:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002568:	f107 0308 	add.w	r3, r7, #8
 800256c:	4618      	mov	r0, r3
 800256e:	f004 f9ef 	bl	8006950 <HAL_RCCEx_PeriphCLKConfig>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8002578:	f7ff f9c0 	bl	80018fc <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800257c:	4b41      	ldr	r3, [pc, #260]	; (8002684 <HAL_FMC_MspInit+0x160>)
 800257e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002582:	4a40      	ldr	r2, [pc, #256]	; (8002684 <HAL_FMC_MspInit+0x160>)
 8002584:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002588:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800258c:	4b3d      	ldr	r3, [pc, #244]	; (8002684 <HAL_FMC_MspInit+0x160>)
 800258e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800259a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800259e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ae:	2303      	movs	r3, #3
 80025b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025b4:	230c      	movs	r3, #12
 80025b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025be:	4619      	mov	r1, r3
 80025c0:	4831      	ldr	r0, [pc, #196]	; (8002688 <HAL_FMC_MspInit+0x164>)
 80025c2:	f002 fbdb 	bl	8004d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80025c6:	f248 1333 	movw	r3, #33075	; 0x8133
 80025ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025da:	2303      	movs	r3, #3
 80025dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025e0:	230c      	movs	r3, #12
 80025e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025ea:	4619      	mov	r1, r3
 80025ec:	4827      	ldr	r0, [pc, #156]	; (800268c <HAL_FMC_MspInit+0x168>)
 80025ee:	f002 fbc5 	bl	8004d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80025f2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80025f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2302      	movs	r3, #2
 80025fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002606:	2303      	movs	r3, #3
 8002608:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800260c:	230c      	movs	r3, #12
 800260e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002612:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002616:	4619      	mov	r1, r3
 8002618:	481d      	ldr	r0, [pc, #116]	; (8002690 <HAL_FMC_MspInit+0x16c>)
 800261a:	f002 fbaf 	bl	8004d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800261e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002622:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002632:	2303      	movs	r3, #3
 8002634:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002638:	230c      	movs	r3, #12
 800263a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800263e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002642:	4619      	mov	r1, r3
 8002644:	4813      	ldr	r0, [pc, #76]	; (8002694 <HAL_FMC_MspInit+0x170>)
 8002646:	f002 fb99 	bl	8004d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800264a:	23e0      	movs	r3, #224	; 0xe0
 800264c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265c:	2303      	movs	r3, #3
 800265e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002662:	230c      	movs	r3, #12
 8002664:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002668:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800266c:	4619      	mov	r1, r3
 800266e:	480a      	ldr	r0, [pc, #40]	; (8002698 <HAL_FMC_MspInit+0x174>)
 8002670:	f002 fb84 	bl	8004d7c <HAL_GPIO_Init>
 8002674:	e000      	b.n	8002678 <HAL_FMC_MspInit+0x154>
    return;
 8002676:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002678:	37e0      	adds	r7, #224	; 0xe0
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	24000cf4 	.word	0x24000cf4
 8002684:	58024400 	.word	0x58024400
 8002688:	58021000 	.word	0x58021000
 800268c:	58021800 	.word	0x58021800
 8002690:	58020c00 	.word	0x58020c00
 8002694:	58021400 	.word	0x58021400
 8002698:	58021c00 	.word	0x58021c00

0800269c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80026a4:	f7ff ff3e 	bl	8002524 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b0ba      	sub	sp, #232	; 0xe8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026b8:	f107 0310 	add.w	r3, r7, #16
 80026bc:	22c0      	movs	r2, #192	; 0xc0
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f009 fc17 	bl	800bef4 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a45      	ldr	r2, [pc, #276]	; (80027e0 <HAL_SAI_MspInit+0x130>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d13e      	bne.n	800274e <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80026d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80026dc:	2300      	movs	r3, #0
 80026de:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026e0:	f107 0310 	add.w	r3, r7, #16
 80026e4:	4618      	mov	r0, r3
 80026e6:	f004 f933 	bl	8006950 <HAL_RCCEx_PeriphCLKConfig>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 80026f0:	f7ff f904 	bl	80018fc <Error_Handler>
    }

    if (SAI2_client == 0)
 80026f4:	4b3b      	ldr	r3, [pc, #236]	; (80027e4 <HAL_SAI_MspInit+0x134>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10e      	bne.n	800271a <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80026fc:	4b3a      	ldr	r3, [pc, #232]	; (80027e8 <HAL_SAI_MspInit+0x138>)
 80026fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002702:	4a39      	ldr	r2, [pc, #228]	; (80027e8 <HAL_SAI_MspInit+0x138>)
 8002704:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002708:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800270c:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <HAL_SAI_MspInit+0x138>)
 800270e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002712:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 800271a:	4b32      	ldr	r3, [pc, #200]	; (80027e4 <HAL_SAI_MspInit+0x134>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	3301      	adds	r3, #1
 8002720:	4a30      	ldr	r2, [pc, #192]	; (80027e4 <HAL_SAI_MspInit+0x134>)
 8002722:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8002724:	23f0      	movs	r3, #240	; 0xf0
 8002726:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800273c:	230a      	movs	r3, #10
 800273e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002742:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002746:	4619      	mov	r1, r3
 8002748:	4828      	ldr	r0, [pc, #160]	; (80027ec <HAL_SAI_MspInit+0x13c>)
 800274a:	f002 fb17 	bl	8004d7c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a27      	ldr	r2, [pc, #156]	; (80027f0 <HAL_SAI_MspInit+0x140>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d13f      	bne.n	80027d8 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002764:	2300      	movs	r3, #0
 8002766:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002768:	f107 0310 	add.w	r3, r7, #16
 800276c:	4618      	mov	r0, r3
 800276e:	f004 f8ef 	bl	8006950 <HAL_RCCEx_PeriphCLKConfig>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 8002778:	f7ff f8c0 	bl	80018fc <Error_Handler>
    }

      if (SAI2_client == 0)
 800277c:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <HAL_SAI_MspInit+0x134>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10e      	bne.n	80027a2 <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002784:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_SAI_MspInit+0x138>)
 8002786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800278a:	4a17      	ldr	r2, [pc, #92]	; (80027e8 <HAL_SAI_MspInit+0x138>)
 800278c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002790:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002794:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <HAL_SAI_MspInit+0x138>)
 8002796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800279a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_SAI_MspInit+0x134>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3301      	adds	r3, #1
 80027a8:	4a0e      	ldr	r2, [pc, #56]	; (80027e4 <HAL_SAI_MspInit+0x134>)
 80027aa:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80027c6:	230a      	movs	r3, #10
 80027c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027d0:	4619      	mov	r1, r3
 80027d2:	4808      	ldr	r0, [pc, #32]	; (80027f4 <HAL_SAI_MspInit+0x144>)
 80027d4:	f002 fad2 	bl	8004d7c <HAL_GPIO_Init>

    }
}
 80027d8:	bf00      	nop
 80027da:	37e8      	adds	r7, #232	; 0xe8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40015c04 	.word	0x40015c04
 80027e4:	24000cf8 	.word	0x24000cf8
 80027e8:	58024400 	.word	0x58024400
 80027ec:	58022000 	.word	0x58022000
 80027f0:	40015c24 	.word	0x40015c24
 80027f4:	58021800 	.word	0x58021800

080027f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027fc:	e7fe      	b.n	80027fc <NMI_Handler+0x4>

080027fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002802:	e7fe      	b.n	8002802 <HardFault_Handler+0x4>

08002804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002808:	e7fe      	b.n	8002808 <MemManage_Handler+0x4>

0800280a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800280e:	e7fe      	b.n	800280e <BusFault_Handler+0x4>

08002810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002814:	e7fe      	b.n	8002814 <UsageFault_Handler+0x4>

08002816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002844:	f000 f926 	bl	8002a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}

0800284c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002850:	4b37      	ldr	r3, [pc, #220]	; (8002930 <SystemInit+0xe4>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	4a36      	ldr	r2, [pc, #216]	; (8002930 <SystemInit+0xe4>)
 8002858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800285c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002860:	4b34      	ldr	r3, [pc, #208]	; (8002934 <SystemInit+0xe8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	2b06      	cmp	r3, #6
 800286a:	d807      	bhi.n	800287c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800286c:	4b31      	ldr	r3, [pc, #196]	; (8002934 <SystemInit+0xe8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f023 030f 	bic.w	r3, r3, #15
 8002874:	4a2f      	ldr	r2, [pc, #188]	; (8002934 <SystemInit+0xe8>)
 8002876:	f043 0307 	orr.w	r3, r3, #7
 800287a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800287c:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <SystemInit+0xec>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a2d      	ldr	r2, [pc, #180]	; (8002938 <SystemInit+0xec>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002888:	4b2b      	ldr	r3, [pc, #172]	; (8002938 <SystemInit+0xec>)
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800288e:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <SystemInit+0xec>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	4929      	ldr	r1, [pc, #164]	; (8002938 <SystemInit+0xec>)
 8002894:	4b29      	ldr	r3, [pc, #164]	; (800293c <SystemInit+0xf0>)
 8002896:	4013      	ands	r3, r2
 8002898:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800289a:	4b26      	ldr	r3, [pc, #152]	; (8002934 <SystemInit+0xe8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d007      	beq.n	80028b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028a6:	4b23      	ldr	r3, [pc, #140]	; (8002934 <SystemInit+0xe8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 030f 	bic.w	r3, r3, #15
 80028ae:	4a21      	ldr	r2, [pc, #132]	; (8002934 <SystemInit+0xe8>)
 80028b0:	f043 0307 	orr.w	r3, r3, #7
 80028b4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80028b6:	4b20      	ldr	r3, [pc, #128]	; (8002938 <SystemInit+0xec>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80028bc:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <SystemInit+0xec>)
 80028be:	2200      	movs	r2, #0
 80028c0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80028c2:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <SystemInit+0xec>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <SystemInit+0xec>)
 80028ca:	4a1d      	ldr	r2, [pc, #116]	; (8002940 <SystemInit+0xf4>)
 80028cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80028ce:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <SystemInit+0xec>)
 80028d0:	4a1c      	ldr	r2, [pc, #112]	; (8002944 <SystemInit+0xf8>)
 80028d2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80028d4:	4b18      	ldr	r3, [pc, #96]	; (8002938 <SystemInit+0xec>)
 80028d6:	4a1c      	ldr	r2, [pc, #112]	; (8002948 <SystemInit+0xfc>)
 80028d8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80028da:	4b17      	ldr	r3, [pc, #92]	; (8002938 <SystemInit+0xec>)
 80028dc:	2200      	movs	r2, #0
 80028de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80028e0:	4b15      	ldr	r3, [pc, #84]	; (8002938 <SystemInit+0xec>)
 80028e2:	4a19      	ldr	r2, [pc, #100]	; (8002948 <SystemInit+0xfc>)
 80028e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80028e6:	4b14      	ldr	r3, [pc, #80]	; (8002938 <SystemInit+0xec>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <SystemInit+0xec>)
 80028ee:	4a16      	ldr	r2, [pc, #88]	; (8002948 <SystemInit+0xfc>)
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <SystemInit+0xec>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <SystemInit+0xec>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0e      	ldr	r2, [pc, #56]	; (8002938 <SystemInit+0xec>)
 80028fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002902:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <SystemInit+0xec>)
 8002906:	2200      	movs	r2, #0
 8002908:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <SystemInit+0x100>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <SystemInit+0x104>)
 8002910:	4013      	ands	r3, r2
 8002912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002916:	d202      	bcs.n	800291e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002918:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <SystemInit+0x108>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <SystemInit+0x10c>)
 8002920:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002924:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002926:	bf00      	nop
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	e000ed00 	.word	0xe000ed00
 8002934:	52002000 	.word	0x52002000
 8002938:	58024400 	.word	0x58024400
 800293c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002940:	02020200 	.word	0x02020200
 8002944:	01ff0000 	.word	0x01ff0000
 8002948:	01010280 	.word	0x01010280
 800294c:	5c001000 	.word	0x5c001000
 8002950:	ffff0000 	.word	0xffff0000
 8002954:	51008108 	.word	0x51008108
 8002958:	52004000 	.word	0x52004000

0800295c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800295c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002994 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002960:	f7ff ff74 	bl	800284c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002964:	480c      	ldr	r0, [pc, #48]	; (8002998 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002966:	490d      	ldr	r1, [pc, #52]	; (800299c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002968:	4a0d      	ldr	r2, [pc, #52]	; (80029a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800296a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800296c:	e002      	b.n	8002974 <LoopCopyDataInit>

0800296e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800296e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002972:	3304      	adds	r3, #4

08002974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002978:	d3f9      	bcc.n	800296e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800297a:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800297c:	4c0a      	ldr	r4, [pc, #40]	; (80029a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800297e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002980:	e001      	b.n	8002986 <LoopFillZerobss>

08002982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002984:	3204      	adds	r2, #4

08002986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002988:	d3fb      	bcc.n	8002982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800298a:	f009 fa81 	bl	800be90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800298e:	f7fd ff51 	bl	8000834 <main>
  bx  lr
 8002992:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002994:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002998:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800299c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80029a0:	0800bfb8 	.word	0x0800bfb8
  ldr r2, =_sbss
 80029a4:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80029a8:	24000d00 	.word	0x24000d00

080029ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029ac:	e7fe      	b.n	80029ac <ADC3_IRQHandler>
	...

080029b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029b6:	2003      	movs	r0, #3
 80029b8:	f001 fa26 	bl	8003e08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029bc:	f003 fdf2 	bl	80065a4 <HAL_RCC_GetSysClockFreq>
 80029c0:	4602      	mov	r2, r0
 80029c2:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <HAL_Init+0x68>)
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	0a1b      	lsrs	r3, r3, #8
 80029c8:	f003 030f 	and.w	r3, r3, #15
 80029cc:	4913      	ldr	r1, [pc, #76]	; (8002a1c <HAL_Init+0x6c>)
 80029ce:	5ccb      	ldrb	r3, [r1, r3]
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
 80029d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <HAL_Init+0x68>)
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	4a0e      	ldr	r2, [pc, #56]	; (8002a1c <HAL_Init+0x6c>)
 80029e4:	5cd3      	ldrb	r3, [r2, r3]
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	fa22 f303 	lsr.w	r3, r2, r3
 80029f0:	4a0b      	ldr	r2, [pc, #44]	; (8002a20 <HAL_Init+0x70>)
 80029f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029f4:	4a0b      	ldr	r2, [pc, #44]	; (8002a24 <HAL_Init+0x74>)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029fa:	2000      	movs	r0, #0
 80029fc:	f000 f814 	bl	8002a28 <HAL_InitTick>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e002      	b.n	8002a10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a0a:	f7fe ff7d 	bl	8001908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	58024400 	.word	0x58024400
 8002a1c:	0800bf70 	.word	0x0800bf70
 8002a20:	24000004 	.word	0x24000004
 8002a24:	24000000 	.word	0x24000000

08002a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a30:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <HAL_InitTick+0x60>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e021      	b.n	8002a80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a3c:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <HAL_InitTick+0x64>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <HAL_InitTick+0x60>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	4619      	mov	r1, r3
 8002a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	4618      	mov	r0, r3
 8002a54:	f001 f9fd 	bl	8003e52 <HAL_SYSTICK_Config>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e00e      	b.n	8002a80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b0f      	cmp	r3, #15
 8002a66:	d80a      	bhi.n	8002a7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a70:	f001 f9d5 	bl	8003e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a74:	4a06      	ldr	r2, [pc, #24]	; (8002a90 <HAL_InitTick+0x68>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e000      	b.n	8002a80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	2400000c 	.word	0x2400000c
 8002a8c:	24000000 	.word	0x24000000
 8002a90:	24000008 	.word	0x24000008

08002a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_IncTick+0x20>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_IncTick+0x24>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <HAL_IncTick+0x24>)
 8002aa6:	6013      	str	r3, [r2, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	2400000c 	.word	0x2400000c
 8002ab8:	24000cfc 	.word	0x24000cfc

08002abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <HAL_GetTick+0x14>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	24000cfc 	.word	0x24000cfc

08002ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002adc:	f7ff ffee 	bl	8002abc <HAL_GetTick>
 8002ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d005      	beq.n	8002afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aee:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <HAL_Delay+0x44>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002afa:	bf00      	nop
 8002afc:	f7ff ffde 	bl	8002abc <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d8f7      	bhi.n	8002afc <HAL_Delay+0x28>
  {
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	2400000c 	.word	0x2400000c

08002b1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_GetREVID+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0c1b      	lsrs	r3, r3, #16
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	5c001000 	.word	0x5c001000

08002b34 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002b44:	4904      	ldr	r1, [pc, #16]	; (8002b58 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	604b      	str	r3, [r1, #4]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	58000400 	.word	0x58000400

08002b5c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	401a      	ands	r2, r3
 8002b70:	4904      	ldr	r1, [pc, #16]	; (8002b84 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	58000400 	.word	0x58000400

08002b88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	609a      	str	r2, [r3, #8]
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3360      	adds	r3, #96	; 0x60
 8002c02:	461a      	mov	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002c24:	bf00      	nop
 8002c26:	371c      	adds	r7, #28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f003 031f 	and.w	r3, r3, #31
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	431a      	orrs	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	611a      	str	r2, [r3, #16]
}
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b087      	sub	sp, #28
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3360      	adds	r3, #96	; 0x60
 8002c72:	461a      	mov	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	601a      	str	r2, [r3, #0]
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3330      	adds	r3, #48	; 0x30
 8002ca8:	461a      	mov	r2, r3
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	0a1b      	lsrs	r3, r3, #8
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	4413      	add	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	211f      	movs	r1, #31
 8002cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	401a      	ands	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	0e9b      	lsrs	r3, r3, #26
 8002cd0:	f003 011f 	and.w	r1, r3, #31
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f003 031f 	and.w	r3, r3, #31
 8002cda:	fa01 f303 	lsl.w	r3, r1, r3
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ce4:	bf00      	nop
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	3314      	adds	r3, #20
 8002d00:	461a      	mov	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	0e5b      	lsrs	r3, r3, #25
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	4413      	add	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	0d1b      	lsrs	r3, r3, #20
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	2107      	movs	r1, #7
 8002d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	401a      	ands	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	0d1b      	lsrs	r3, r3, #20
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	fa01 f303 	lsl.w	r3, r1, r3
 8002d34:	431a      	orrs	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d3a:	bf00      	nop
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d60:	43db      	mvns	r3, r3
 8002d62:	401a      	ands	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f003 0318 	and.w	r3, r3, #24
 8002d6a:	4908      	ldr	r1, [pc, #32]	; (8002d8c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d6c:	40d9      	lsrs	r1, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	400b      	ands	r3, r1
 8002d72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d76:	431a      	orrs	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	000fffff 	.word	0x000fffff

08002d90 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6093      	str	r3, [r2, #8]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	5fffffc0 	.word	0x5fffffc0

08002db4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc8:	d101      	bne.n	8002dce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <LL_ADC_EnableInternalRegulator+0x24>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	6fffffc0 	.word	0x6fffffc0

08002e04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e18:	d101      	bne.n	8002e1e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <LL_ADC_IsEnabled+0x18>
 8002e40:	2301      	movs	r3, #1
 8002e42:	e000      	b.n	8002e46 <LL_ADC_IsEnabled+0x1a>
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d101      	bne.n	8002e6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d101      	bne.n	8002e90 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b089      	sub	sp, #36	; 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e18f      	b.n	80031da <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d109      	bne.n	8002edc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7fe fd37 	bl	800193c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff67 	bl	8002db4 <LL_ADC_IsDeepPowerDownEnabled>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d004      	beq.n	8002ef6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff ff4d 	bl	8002d90 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff ff82 	bl	8002e04 <LL_ADC_IsInternalRegulatorEnabled>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d114      	bne.n	8002f30 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff ff66 	bl	8002ddc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f10:	4b87      	ldr	r3, [pc, #540]	; (8003130 <HAL_ADC_Init+0x290>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	099b      	lsrs	r3, r3, #6
 8002f16:	4a87      	ldr	r2, [pc, #540]	; (8003134 <HAL_ADC_Init+0x294>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	099b      	lsrs	r3, r3, #6
 8002f1e:	3301      	adds	r3, #1
 8002f20:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f22:	e002      	b.n	8002f2a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f9      	bne.n	8002f24 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff ff65 	bl	8002e04 <LL_ADC_IsInternalRegulatorEnabled>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10d      	bne.n	8002f5c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f44:	f043 0210 	orr.w	r2, r3, #16
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	f043 0201 	orr.w	r2, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff76 	bl	8002e52 <LL_ADC_REG_IsConversionOngoing>
 8002f66:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f040 8129 	bne.w	80031c8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f040 8125 	bne.w	80031c8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f82:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f86:	f043 0202 	orr.w	r2, r3, #2
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff ff4a 	bl	8002e2c <LL_ADC_IsEnabled>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d136      	bne.n	800300c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a65      	ldr	r2, [pc, #404]	; (8003138 <HAL_ADC_Init+0x298>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d004      	beq.n	8002fb2 <HAL_ADC_Init+0x112>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a63      	ldr	r2, [pc, #396]	; (800313c <HAL_ADC_Init+0x29c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d10e      	bne.n	8002fd0 <HAL_ADC_Init+0x130>
 8002fb2:	4861      	ldr	r0, [pc, #388]	; (8003138 <HAL_ADC_Init+0x298>)
 8002fb4:	f7ff ff3a 	bl	8002e2c <LL_ADC_IsEnabled>
 8002fb8:	4604      	mov	r4, r0
 8002fba:	4860      	ldr	r0, [pc, #384]	; (800313c <HAL_ADC_Init+0x29c>)
 8002fbc:	f7ff ff36 	bl	8002e2c <LL_ADC_IsEnabled>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4323      	orrs	r3, r4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	e008      	b.n	8002fe2 <HAL_ADC_Init+0x142>
 8002fd0:	485b      	ldr	r0, [pc, #364]	; (8003140 <HAL_ADC_Init+0x2a0>)
 8002fd2:	f7ff ff2b 	bl	8002e2c <LL_ADC_IsEnabled>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d012      	beq.n	800300c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a53      	ldr	r2, [pc, #332]	; (8003138 <HAL_ADC_Init+0x298>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d004      	beq.n	8002ffa <HAL_ADC_Init+0x15a>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a51      	ldr	r2, [pc, #324]	; (800313c <HAL_ADC_Init+0x29c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_Init+0x15e>
 8002ffa:	4a52      	ldr	r2, [pc, #328]	; (8003144 <HAL_ADC_Init+0x2a4>)
 8002ffc:	e000      	b.n	8003000 <HAL_ADC_Init+0x160>
 8002ffe:	4a52      	ldr	r2, [pc, #328]	; (8003148 <HAL_ADC_Init+0x2a8>)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4619      	mov	r1, r3
 8003006:	4610      	mov	r0, r2
 8003008:	f7ff fdbe 	bl	8002b88 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800300c:	f7ff fd86 	bl	8002b1c <HAL_GetREVID>
 8003010:	4603      	mov	r3, r0
 8003012:	f241 0203 	movw	r2, #4099	; 0x1003
 8003016:	4293      	cmp	r3, r2
 8003018:	d914      	bls.n	8003044 <HAL_ADC_Init+0x1a4>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b10      	cmp	r3, #16
 8003020:	d110      	bne.n	8003044 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	7d5b      	ldrb	r3, [r3, #21]
 8003026:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800302c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003032:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	7f1b      	ldrb	r3, [r3, #28]
 8003038:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800303a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800303c:	f043 030c 	orr.w	r3, r3, #12
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	e00d      	b.n	8003060 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	7d5b      	ldrb	r3, [r3, #21]
 8003048:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800304e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003054:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	7f1b      	ldrb	r3, [r3, #28]
 800305a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	7f1b      	ldrb	r3, [r3, #28]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d106      	bne.n	8003076 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	3b01      	subs	r3, #1
 800306e:	045b      	lsls	r3, r3, #17
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	2b00      	cmp	r3, #0
 800307c:	d009      	beq.n	8003092 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	4b2c      	ldr	r3, [pc, #176]	; (800314c <HAL_ADC_Init+0x2ac>)
 800309a:	4013      	ands	r3, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	69b9      	ldr	r1, [r7, #24]
 80030a2:	430b      	orrs	r3, r1
 80030a4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff fed1 	bl	8002e52 <LL_ADC_REG_IsConversionOngoing>
 80030b0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff fede 	bl	8002e78 <LL_ADC_INJ_IsConversionOngoing>
 80030bc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d15f      	bne.n	8003184 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d15c      	bne.n	8003184 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	7d1b      	ldrb	r3, [r3, #20]
 80030ce:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <HAL_ADC_Init+0x2b0>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	69b9      	ldr	r1, [r7, #24]
 80030e8:	430b      	orrs	r3, r1
 80030ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d130      	bne.n	8003158 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	4b14      	ldr	r3, [pc, #80]	; (8003154 <HAL_ADC_Init+0x2b4>)
 8003104:	4013      	ands	r3, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800310a:	3a01      	subs	r2, #1
 800310c:	0411      	lsls	r1, r2, #16
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003112:	4311      	orrs	r1, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003118:	4311      	orrs	r1, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800311e:	430a      	orrs	r2, r1
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	611a      	str	r2, [r3, #16]
 800312c:	e01c      	b.n	8003168 <HAL_ADC_Init+0x2c8>
 800312e:	bf00      	nop
 8003130:	24000000 	.word	0x24000000
 8003134:	053e2d63 	.word	0x053e2d63
 8003138:	40022000 	.word	0x40022000
 800313c:	40022100 	.word	0x40022100
 8003140:	58026000 	.word	0x58026000
 8003144:	40022300 	.word	0x40022300
 8003148:	58026300 	.word	0x58026300
 800314c:	fff0c003 	.word	0xfff0c003
 8003150:	ffffbffc 	.word	0xffffbffc
 8003154:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0201 	bic.w	r2, r2, #1
 8003166:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fb80 	bl	8003884 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d10c      	bne.n	80031a6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	f023 010f 	bic.w	r1, r3, #15
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	1e5a      	subs	r2, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	631a      	str	r2, [r3, #48]	; 0x30
 80031a4:	e007      	b.n	80031b6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 020f 	bic.w	r2, r2, #15
 80031b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	f023 0303 	bic.w	r3, r3, #3
 80031be:	f043 0201 	orr.w	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
 80031c6:	e007      	b.n	80031d8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031cc:	f043 0210 	orr.w	r2, r3, #16
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3724      	adds	r7, #36	; 0x24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd90      	pop	{r4, r7, pc}
 80031e2:	bf00      	nop

080031e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b0a1      	sub	sp, #132	; 0x84
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4a9d      	ldr	r2, [pc, #628]	; (8003474 <HAL_ADC_ConfigChannel+0x290>)
 80031fe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_ADC_ConfigChannel+0x2a>
 800320a:	2302      	movs	r3, #2
 800320c:	e321      	b.n	8003852 <HAL_ADC_ConfigChannel+0x66e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff fe19 	bl	8002e52 <LL_ADC_REG_IsConversionOngoing>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	f040 8306 	bne.w	8003834 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003230:	2b00      	cmp	r3, #0
 8003232:	d108      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x62>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	0e9b      	lsrs	r3, r3, #26
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	2201      	movs	r2, #1
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	e016      	b.n	8003274 <HAL_ADC_ConfigChannel+0x90>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003254:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003256:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003258:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800325e:	2320      	movs	r3, #32
 8003260:	e003      	b.n	800326a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003262:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f003 031f 	and.w	r3, r3, #31
 800326e:	2201      	movs	r2, #1
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	69d1      	ldr	r1, [r2, #28]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	430b      	orrs	r3, r1
 8003280:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6859      	ldr	r1, [r3, #4]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	f7ff fd02 	bl	8002c98 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fdda 	bl	8002e52 <LL_ADC_REG_IsConversionOngoing>
 800329e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff fde7 	bl	8002e78 <LL_ADC_INJ_IsConversionOngoing>
 80032aa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f040 80b3 	bne.w	800341a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f040 80af 	bne.w	800341a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6819      	ldr	r1, [r3, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	461a      	mov	r2, r3
 80032ca:	f7ff fd11 	bl	8002cf0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80032ce:	4b6a      	ldr	r3, [pc, #424]	; (8003478 <HAL_ADC_ConfigChannel+0x294>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80032d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032da:	d10b      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x110>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	089b      	lsrs	r3, r3, #2
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	e01d      	b.n	8003330 <HAL_ADC_ConfigChannel+0x14c>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0310 	and.w	r3, r3, #16
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10b      	bne.n	800331a <HAL_ADC_ConfigChannel+0x136>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	089b      	lsrs	r3, r3, #2
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	e00a      	b.n	8003330 <HAL_ADC_ConfigChannel+0x14c>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695a      	ldr	r2, [r3, #20]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	089b      	lsrs	r3, r3, #2
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	2b04      	cmp	r3, #4
 8003338:	d027      	beq.n	800338a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	6919      	ldr	r1, [r3, #16]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003348:	f7ff fc52 	bl	8002bf0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	6919      	ldr	r1, [r3, #16]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	7e5b      	ldrb	r3, [r3, #25]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d102      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x17e>
 800335c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003360:	e000      	b.n	8003364 <HAL_ADC_ConfigChannel+0x180>
 8003362:	2300      	movs	r3, #0
 8003364:	461a      	mov	r2, r3
 8003366:	f7ff fc7c 	bl	8002c62 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6919      	ldr	r1, [r3, #16]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	7e1b      	ldrb	r3, [r3, #24]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d102      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x19c>
 800337a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800337e:	e000      	b.n	8003382 <HAL_ADC_ConfigChannel+0x19e>
 8003380:	2300      	movs	r3, #0
 8003382:	461a      	mov	r2, r3
 8003384:	f7ff fc54 	bl	8002c30 <LL_ADC_SetDataRightShift>
 8003388:	e047      	b.n	800341a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003390:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	069b      	lsls	r3, r3, #26
 800339a:	429a      	cmp	r2, r3
 800339c:	d107      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033ac:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	069b      	lsls	r3, r3, #26
 80033be:	429a      	cmp	r2, r3
 80033c0:	d107      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033d0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	069b      	lsls	r3, r3, #26
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d107      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033f4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	069b      	lsls	r3, r3, #26
 8003406:	429a      	cmp	r2, r3
 8003408:	d107      	bne.n	800341a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003418:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fd04 	bl	8002e2c <LL_ADC_IsEnabled>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	f040 820d 	bne.w	8003846 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6818      	ldr	r0, [r3, #0]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	6819      	ldr	r1, [r3, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	461a      	mov	r2, r3
 800343a:	f7ff fc85 	bl	8002d48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	4a0c      	ldr	r2, [pc, #48]	; (8003474 <HAL_ADC_ConfigChannel+0x290>)
 8003444:	4293      	cmp	r3, r2
 8003446:	f040 8133 	bne.w	80036b0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003456:	2b00      	cmp	r3, #0
 8003458:	d110      	bne.n	800347c <HAL_ADC_ConfigChannel+0x298>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	0e9b      	lsrs	r3, r3, #26
 8003460:	3301      	adds	r3, #1
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	2b09      	cmp	r3, #9
 8003468:	bf94      	ite	ls
 800346a:	2301      	movls	r3, #1
 800346c:	2300      	movhi	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	e01e      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x2cc>
 8003472:	bf00      	nop
 8003474:	47ff0000 	.word	0x47ff0000
 8003478:	5c001000 	.word	0x5c001000
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003484:	fa93 f3a3 	rbit	r3, r3
 8003488:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800348a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800348c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800348e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003494:	2320      	movs	r3, #32
 8003496:	e003      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	3301      	adds	r3, #1
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	2b09      	cmp	r3, #9
 80034a8:	bf94      	ite	ls
 80034aa:	2301      	movls	r3, #1
 80034ac:	2300      	movhi	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d079      	beq.n	80035a8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d107      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x2ec>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	0e9b      	lsrs	r3, r3, #26
 80034c6:	3301      	adds	r3, #1
 80034c8:	069b      	lsls	r3, r3, #26
 80034ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034ce:	e015      	b.n	80034fc <HAL_ADC_ConfigChannel+0x318>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80034de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80034e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80034e8:	2320      	movs	r3, #32
 80034ea:	e003      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80034ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ee:	fab3 f383 	clz	r3, r3
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	3301      	adds	r3, #1
 80034f6:	069b      	lsls	r3, r3, #26
 80034f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003504:	2b00      	cmp	r3, #0
 8003506:	d109      	bne.n	800351c <HAL_ADC_ConfigChannel+0x338>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	0e9b      	lsrs	r3, r3, #26
 800350e:	3301      	adds	r3, #1
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	2101      	movs	r1, #1
 8003516:	fa01 f303 	lsl.w	r3, r1, r3
 800351a:	e017      	b.n	800354c <HAL_ADC_ConfigChannel+0x368>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003524:	fa93 f3a3 	rbit	r3, r3
 8003528:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800352a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800352e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003534:	2320      	movs	r3, #32
 8003536:	e003      	b.n	8003540 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800353a:	fab3 f383 	clz	r3, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	3301      	adds	r3, #1
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	2101      	movs	r1, #1
 8003548:	fa01 f303 	lsl.w	r3, r1, r3
 800354c:	ea42 0103 	orr.w	r1, r2, r3
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10a      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x38e>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	0e9b      	lsrs	r3, r3, #26
 8003562:	3301      	adds	r3, #1
 8003564:	f003 021f 	and.w	r2, r3, #31
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	051b      	lsls	r3, r3, #20
 8003570:	e018      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x3c0>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357a:	fa93 f3a3 	rbit	r3, r3
 800357e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003582:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800358a:	2320      	movs	r3, #32
 800358c:	e003      	b.n	8003596 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800358e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003590:	fab3 f383 	clz	r3, r3
 8003594:	b2db      	uxtb	r3, r3
 8003596:	3301      	adds	r3, #1
 8003598:	f003 021f 	and.w	r2, r3, #31
 800359c:	4613      	mov	r3, r2
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	4413      	add	r3, r2
 80035a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035a4:	430b      	orrs	r3, r1
 80035a6:	e07e      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d107      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x3e0>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	0e9b      	lsrs	r3, r3, #26
 80035ba:	3301      	adds	r3, #1
 80035bc:	069b      	lsls	r3, r3, #26
 80035be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035c2:	e015      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x40c>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035cc:	fa93 f3a3 	rbit	r3, r3
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80035d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80035dc:	2320      	movs	r3, #32
 80035de:	e003      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80035e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e2:	fab3 f383 	clz	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	3301      	adds	r3, #1
 80035ea:	069b      	lsls	r3, r3, #26
 80035ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d109      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x42c>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	0e9b      	lsrs	r3, r3, #26
 8003602:	3301      	adds	r3, #1
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	2101      	movs	r1, #1
 800360a:	fa01 f303 	lsl.w	r3, r1, r3
 800360e:	e017      	b.n	8003640 <HAL_ADC_ConfigChannel+0x45c>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	61bb      	str	r3, [r7, #24]
  return result;
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003628:	2320      	movs	r3, #32
 800362a:	e003      	b.n	8003634 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	3301      	adds	r3, #1
 8003636:	f003 031f 	and.w	r3, r3, #31
 800363a:	2101      	movs	r1, #1
 800363c:	fa01 f303 	lsl.w	r3, r1, r3
 8003640:	ea42 0103 	orr.w	r1, r2, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10d      	bne.n	800366c <HAL_ADC_ConfigChannel+0x488>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	0e9b      	lsrs	r3, r3, #26
 8003656:	3301      	adds	r3, #1
 8003658:	f003 021f 	and.w	r2, r3, #31
 800365c:	4613      	mov	r3, r2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	4413      	add	r3, r2
 8003662:	3b1e      	subs	r3, #30
 8003664:	051b      	lsls	r3, r3, #20
 8003666:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800366a:	e01b      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x4c0>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	fa93 f3a3 	rbit	r3, r3
 8003678:	60fb      	str	r3, [r7, #12]
  return result;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003684:	2320      	movs	r3, #32
 8003686:	e003      	b.n	8003690 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	fab3 f383 	clz	r3, r3
 800368e:	b2db      	uxtb	r3, r3
 8003690:	3301      	adds	r3, #1
 8003692:	f003 021f 	and.w	r2, r3, #31
 8003696:	4613      	mov	r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	4413      	add	r3, r2
 800369c:	3b1e      	subs	r3, #30
 800369e:	051b      	lsls	r3, r3, #20
 80036a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036a4:	430b      	orrs	r3, r1
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	6892      	ldr	r2, [r2, #8]
 80036aa:	4619      	mov	r1, r3
 80036ac:	f7ff fb20 	bl	8002cf0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f280 80c6 	bge.w	8003846 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a67      	ldr	r2, [pc, #412]	; (800385c <HAL_ADC_ConfigChannel+0x678>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d004      	beq.n	80036ce <HAL_ADC_ConfigChannel+0x4ea>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a65      	ldr	r2, [pc, #404]	; (8003860 <HAL_ADC_ConfigChannel+0x67c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d101      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x4ee>
 80036ce:	4b65      	ldr	r3, [pc, #404]	; (8003864 <HAL_ADC_ConfigChannel+0x680>)
 80036d0:	e000      	b.n	80036d4 <HAL_ADC_ConfigChannel+0x4f0>
 80036d2:	4b65      	ldr	r3, [pc, #404]	; (8003868 <HAL_ADC_ConfigChannel+0x684>)
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fa7d 	bl	8002bd4 <LL_ADC_GetCommonPathInternalCh>
 80036da:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a5e      	ldr	r2, [pc, #376]	; (800385c <HAL_ADC_ConfigChannel+0x678>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d004      	beq.n	80036f0 <HAL_ADC_ConfigChannel+0x50c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a5d      	ldr	r2, [pc, #372]	; (8003860 <HAL_ADC_ConfigChannel+0x67c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d10e      	bne.n	800370e <HAL_ADC_ConfigChannel+0x52a>
 80036f0:	485a      	ldr	r0, [pc, #360]	; (800385c <HAL_ADC_ConfigChannel+0x678>)
 80036f2:	f7ff fb9b 	bl	8002e2c <LL_ADC_IsEnabled>
 80036f6:	4604      	mov	r4, r0
 80036f8:	4859      	ldr	r0, [pc, #356]	; (8003860 <HAL_ADC_ConfigChannel+0x67c>)
 80036fa:	f7ff fb97 	bl	8002e2c <LL_ADC_IsEnabled>
 80036fe:	4603      	mov	r3, r0
 8003700:	4323      	orrs	r3, r4
 8003702:	2b00      	cmp	r3, #0
 8003704:	bf0c      	ite	eq
 8003706:	2301      	moveq	r3, #1
 8003708:	2300      	movne	r3, #0
 800370a:	b2db      	uxtb	r3, r3
 800370c:	e008      	b.n	8003720 <HAL_ADC_ConfigChannel+0x53c>
 800370e:	4857      	ldr	r0, [pc, #348]	; (800386c <HAL_ADC_ConfigChannel+0x688>)
 8003710:	f7ff fb8c 	bl	8002e2c <LL_ADC_IsEnabled>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	bf0c      	ite	eq
 800371a:	2301      	moveq	r3, #1
 800371c:	2300      	movne	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d07d      	beq.n	8003820 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a51      	ldr	r2, [pc, #324]	; (8003870 <HAL_ADC_ConfigChannel+0x68c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d130      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x5ac>
 800372e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003730:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d12b      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a4b      	ldr	r2, [pc, #300]	; (800386c <HAL_ADC_ConfigChannel+0x688>)
 800373e:	4293      	cmp	r3, r2
 8003740:	f040 8081 	bne.w	8003846 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a44      	ldr	r2, [pc, #272]	; (800385c <HAL_ADC_ConfigChannel+0x678>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d004      	beq.n	8003758 <HAL_ADC_ConfigChannel+0x574>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a43      	ldr	r2, [pc, #268]	; (8003860 <HAL_ADC_ConfigChannel+0x67c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d101      	bne.n	800375c <HAL_ADC_ConfigChannel+0x578>
 8003758:	4a42      	ldr	r2, [pc, #264]	; (8003864 <HAL_ADC_ConfigChannel+0x680>)
 800375a:	e000      	b.n	800375e <HAL_ADC_ConfigChannel+0x57a>
 800375c:	4a42      	ldr	r2, [pc, #264]	; (8003868 <HAL_ADC_ConfigChannel+0x684>)
 800375e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003760:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003764:	4619      	mov	r1, r3
 8003766:	4610      	mov	r0, r2
 8003768:	f7ff fa21 	bl	8002bae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800376c:	4b41      	ldr	r3, [pc, #260]	; (8003874 <HAL_ADC_ConfigChannel+0x690>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	4a41      	ldr	r2, [pc, #260]	; (8003878 <HAL_ADC_ConfigChannel+0x694>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	099b      	lsrs	r3, r3, #6
 800377a:	3301      	adds	r3, #1
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003780:	e002      	b.n	8003788 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	3b01      	subs	r3, #1
 8003786:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f9      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800378e:	e05a      	b.n	8003846 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a39      	ldr	r2, [pc, #228]	; (800387c <HAL_ADC_ConfigChannel+0x698>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d11e      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x5f4>
 800379a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800379c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d119      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a30      	ldr	r2, [pc, #192]	; (800386c <HAL_ADC_ConfigChannel+0x688>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d14b      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a2a      	ldr	r2, [pc, #168]	; (800385c <HAL_ADC_ConfigChannel+0x678>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d004      	beq.n	80037c2 <HAL_ADC_ConfigChannel+0x5de>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a28      	ldr	r2, [pc, #160]	; (8003860 <HAL_ADC_ConfigChannel+0x67c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d101      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x5e2>
 80037c2:	4a28      	ldr	r2, [pc, #160]	; (8003864 <HAL_ADC_ConfigChannel+0x680>)
 80037c4:	e000      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x5e4>
 80037c6:	4a28      	ldr	r2, [pc, #160]	; (8003868 <HAL_ADC_ConfigChannel+0x684>)
 80037c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ce:	4619      	mov	r1, r3
 80037d0:	4610      	mov	r0, r2
 80037d2:	f7ff f9ec 	bl	8002bae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037d6:	e036      	b.n	8003846 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a28      	ldr	r2, [pc, #160]	; (8003880 <HAL_ADC_ConfigChannel+0x69c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d131      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x662>
 80037e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d12c      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1e      	ldr	r2, [pc, #120]	; (800386c <HAL_ADC_ConfigChannel+0x688>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d127      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a18      	ldr	r2, [pc, #96]	; (800385c <HAL_ADC_ConfigChannel+0x678>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d004      	beq.n	800380a <HAL_ADC_ConfigChannel+0x626>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a16      	ldr	r2, [pc, #88]	; (8003860 <HAL_ADC_ConfigChannel+0x67c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d101      	bne.n	800380e <HAL_ADC_ConfigChannel+0x62a>
 800380a:	4a16      	ldr	r2, [pc, #88]	; (8003864 <HAL_ADC_ConfigChannel+0x680>)
 800380c:	e000      	b.n	8003810 <HAL_ADC_ConfigChannel+0x62c>
 800380e:	4a16      	ldr	r2, [pc, #88]	; (8003868 <HAL_ADC_ConfigChannel+0x684>)
 8003810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003812:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003816:	4619      	mov	r1, r3
 8003818:	4610      	mov	r0, r2
 800381a:	f7ff f9c8 	bl	8002bae <LL_ADC_SetCommonPathInternalCh>
 800381e:	e012      	b.n	8003846 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003824:	f043 0220 	orr.w	r2, r3, #32
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003832:	e008      	b.n	8003846 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003838:	f043 0220 	orr.w	r2, r3, #32
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800384e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003852:	4618      	mov	r0, r3
 8003854:	3784      	adds	r7, #132	; 0x84
 8003856:	46bd      	mov	sp, r7
 8003858:	bd90      	pop	{r4, r7, pc}
 800385a:	bf00      	nop
 800385c:	40022000 	.word	0x40022000
 8003860:	40022100 	.word	0x40022100
 8003864:	40022300 	.word	0x40022300
 8003868:	58026300 	.word	0x58026300
 800386c:	58026000 	.word	0x58026000
 8003870:	cb840000 	.word	0xcb840000
 8003874:	24000000 	.word	0x24000000
 8003878:	053e2d63 	.word	0x053e2d63
 800387c:	c7520000 	.word	0xc7520000
 8003880:	cfb80000 	.word	0xcfb80000

08003884 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a7a      	ldr	r2, [pc, #488]	; (8003a7c <ADC_ConfigureBoostMode+0x1f8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <ADC_ConfigureBoostMode+0x1c>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a79      	ldr	r2, [pc, #484]	; (8003a80 <ADC_ConfigureBoostMode+0x1fc>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d109      	bne.n	80038b4 <ADC_ConfigureBoostMode+0x30>
 80038a0:	4b78      	ldr	r3, [pc, #480]	; (8003a84 <ADC_ConfigureBoostMode+0x200>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bf14      	ite	ne
 80038ac:	2301      	movne	r3, #1
 80038ae:	2300      	moveq	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	e008      	b.n	80038c6 <ADC_ConfigureBoostMode+0x42>
 80038b4:	4b74      	ldr	r3, [pc, #464]	; (8003a88 <ADC_ConfigureBoostMode+0x204>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf14      	ite	ne
 80038c0:	2301      	movne	r3, #1
 80038c2:	2300      	moveq	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d01c      	beq.n	8003904 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80038ca:	f002 ffe5 	bl	8006898 <HAL_RCC_GetHCLKFreq>
 80038ce:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038d8:	d010      	beq.n	80038fc <ADC_ConfigureBoostMode+0x78>
 80038da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038de:	d873      	bhi.n	80039c8 <ADC_ConfigureBoostMode+0x144>
 80038e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e4:	d002      	beq.n	80038ec <ADC_ConfigureBoostMode+0x68>
 80038e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038ea:	d16d      	bne.n	80039c8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f8:	60fb      	str	r3, [r7, #12]
        break;
 80038fa:	e068      	b.n	80039ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	089b      	lsrs	r3, r3, #2
 8003900:	60fb      	str	r3, [r7, #12]
        break;
 8003902:	e064      	b.n	80039ce <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003904:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003908:	f04f 0100 	mov.w	r1, #0
 800390c:	f004 fa2a 	bl	8007d64 <HAL_RCCEx_GetPeriphCLKFreq>
 8003910:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800391a:	d051      	beq.n	80039c0 <ADC_ConfigureBoostMode+0x13c>
 800391c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003920:	d854      	bhi.n	80039cc <ADC_ConfigureBoostMode+0x148>
 8003922:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003926:	d047      	beq.n	80039b8 <ADC_ConfigureBoostMode+0x134>
 8003928:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800392c:	d84e      	bhi.n	80039cc <ADC_ConfigureBoostMode+0x148>
 800392e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003932:	d03d      	beq.n	80039b0 <ADC_ConfigureBoostMode+0x12c>
 8003934:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003938:	d848      	bhi.n	80039cc <ADC_ConfigureBoostMode+0x148>
 800393a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800393e:	d033      	beq.n	80039a8 <ADC_ConfigureBoostMode+0x124>
 8003940:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003944:	d842      	bhi.n	80039cc <ADC_ConfigureBoostMode+0x148>
 8003946:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800394a:	d029      	beq.n	80039a0 <ADC_ConfigureBoostMode+0x11c>
 800394c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003950:	d83c      	bhi.n	80039cc <ADC_ConfigureBoostMode+0x148>
 8003952:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003956:	d01a      	beq.n	800398e <ADC_ConfigureBoostMode+0x10a>
 8003958:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800395c:	d836      	bhi.n	80039cc <ADC_ConfigureBoostMode+0x148>
 800395e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003962:	d014      	beq.n	800398e <ADC_ConfigureBoostMode+0x10a>
 8003964:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003968:	d830      	bhi.n	80039cc <ADC_ConfigureBoostMode+0x148>
 800396a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800396e:	d00e      	beq.n	800398e <ADC_ConfigureBoostMode+0x10a>
 8003970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003974:	d82a      	bhi.n	80039cc <ADC_ConfigureBoostMode+0x148>
 8003976:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800397a:	d008      	beq.n	800398e <ADC_ConfigureBoostMode+0x10a>
 800397c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003980:	d824      	bhi.n	80039cc <ADC_ConfigureBoostMode+0x148>
 8003982:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003986:	d002      	beq.n	800398e <ADC_ConfigureBoostMode+0x10a>
 8003988:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800398c:	d11e      	bne.n	80039cc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	0c9b      	lsrs	r3, r3, #18
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	fbb2 f3f3 	udiv	r3, r2, r3
 800399c:	60fb      	str	r3, [r7, #12]
        break;
 800399e:	e016      	b.n	80039ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	091b      	lsrs	r3, r3, #4
 80039a4:	60fb      	str	r3, [r7, #12]
        break;
 80039a6:	e012      	b.n	80039ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	60fb      	str	r3, [r7, #12]
        break;
 80039ae:	e00e      	b.n	80039ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	099b      	lsrs	r3, r3, #6
 80039b4:	60fb      	str	r3, [r7, #12]
        break;
 80039b6:	e00a      	b.n	80039ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	09db      	lsrs	r3, r3, #7
 80039bc:	60fb      	str	r3, [r7, #12]
        break;
 80039be:	e006      	b.n	80039ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	60fb      	str	r3, [r7, #12]
        break;
 80039c6:	e002      	b.n	80039ce <ADC_ConfigureBoostMode+0x14a>
        break;
 80039c8:	bf00      	nop
 80039ca:	e000      	b.n	80039ce <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80039cc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80039ce:	f7ff f8a5 	bl	8002b1c <HAL_GetREVID>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80039d8:	4293      	cmp	r3, r2
 80039da:	d815      	bhi.n	8003a08 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4a2b      	ldr	r2, [pc, #172]	; (8003a8c <ADC_ConfigureBoostMode+0x208>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d908      	bls.n	80039f6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80039f4:	e03e      	b.n	8003a74 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a04:	609a      	str	r2, [r3, #8]
}
 8003a06:	e035      	b.n	8003a74 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4a1f      	ldr	r2, [pc, #124]	; (8003a90 <ADC_ConfigureBoostMode+0x20c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d808      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a24:	609a      	str	r2, [r3, #8]
}
 8003a26:	e025      	b.n	8003a74 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4a1a      	ldr	r2, [pc, #104]	; (8003a94 <ADC_ConfigureBoostMode+0x210>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d80a      	bhi.n	8003a46 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a42:	609a      	str	r2, [r3, #8]
}
 8003a44:	e016      	b.n	8003a74 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4a13      	ldr	r2, [pc, #76]	; (8003a98 <ADC_ConfigureBoostMode+0x214>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d80a      	bhi.n	8003a64 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a60:	609a      	str	r2, [r3, #8]
}
 8003a62:	e007      	b.n	8003a74 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003a72:	609a      	str	r2, [r3, #8]
}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40022000 	.word	0x40022000
 8003a80:	40022100 	.word	0x40022100
 8003a84:	40022300 	.word	0x40022300
 8003a88:	58026300 	.word	0x58026300
 8003a8c:	01312d00 	.word	0x01312d00
 8003a90:	005f5e10 	.word	0x005f5e10
 8003a94:	00bebc20 	.word	0x00bebc20
 8003a98:	017d7840 	.word	0x017d7840

08003a9c <LL_ADC_IsEnabled>:
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <LL_ADC_IsEnabled+0x18>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <LL_ADC_IsEnabled+0x1a>
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 0304 	and.w	r3, r3, #4
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d101      	bne.n	8003ada <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003ae8:	b590      	push	{r4, r7, lr}
 8003aea:	b09f      	sub	sp, #124	; 0x7c
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e0be      	b.n	8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a5c      	ldr	r2, [pc, #368]	; (8003c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d102      	bne.n	8003b26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b20:	4b5b      	ldr	r3, [pc, #364]	; (8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	e001      	b.n	8003b2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b26:	2300      	movs	r3, #0
 8003b28:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10b      	bne.n	8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b34:	f043 0220 	orr.w	r2, r3, #32
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e09d      	b.n	8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff ffb9 	bl	8003ac2 <LL_ADC_REG_IsConversionOngoing>
 8003b50:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff ffb3 	bl	8003ac2 <LL_ADC_REG_IsConversionOngoing>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d17f      	bne.n	8003c62 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d17c      	bne.n	8003c62 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a47      	ldr	r2, [pc, #284]	; (8003c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d004      	beq.n	8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a46      	ldr	r2, [pc, #280]	; (8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d101      	bne.n	8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003b7c:	4b45      	ldr	r3, [pc, #276]	; (8003c94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b7e:	e000      	b.n	8003b82 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003b80:	4b45      	ldr	r3, [pc, #276]	; (8003c98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b82:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d039      	beq.n	8003c00 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a3a      	ldr	r2, [pc, #232]	; (8003c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d004      	beq.n	8003bb2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a38      	ldr	r2, [pc, #224]	; (8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d10e      	bne.n	8003bd0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003bb2:	4836      	ldr	r0, [pc, #216]	; (8003c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003bb4:	f7ff ff72 	bl	8003a9c <LL_ADC_IsEnabled>
 8003bb8:	4604      	mov	r4, r0
 8003bba:	4835      	ldr	r0, [pc, #212]	; (8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003bbc:	f7ff ff6e 	bl	8003a9c <LL_ADC_IsEnabled>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	4323      	orrs	r3, r4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	bf0c      	ite	eq
 8003bc8:	2301      	moveq	r3, #1
 8003bca:	2300      	movne	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	e008      	b.n	8003be2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003bd0:	4832      	ldr	r0, [pc, #200]	; (8003c9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003bd2:	f7ff ff63 	bl	8003a9c <LL_ADC_IsEnabled>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d047      	beq.n	8003c76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	4b2d      	ldr	r3, [pc, #180]	; (8003ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	6811      	ldr	r1, [r2, #0]
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	6892      	ldr	r2, [r2, #8]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bfc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bfe:	e03a      	b.n	8003c76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c0a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a1e      	ldr	r2, [pc, #120]	; (8003c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d004      	beq.n	8003c20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a1d      	ldr	r2, [pc, #116]	; (8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d10e      	bne.n	8003c3e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003c20:	481a      	ldr	r0, [pc, #104]	; (8003c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c22:	f7ff ff3b 	bl	8003a9c <LL_ADC_IsEnabled>
 8003c26:	4604      	mov	r4, r0
 8003c28:	4819      	ldr	r0, [pc, #100]	; (8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c2a:	f7ff ff37 	bl	8003a9c <LL_ADC_IsEnabled>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4323      	orrs	r3, r4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	bf0c      	ite	eq
 8003c36:	2301      	moveq	r3, #1
 8003c38:	2300      	movne	r3, #0
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	e008      	b.n	8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003c3e:	4817      	ldr	r0, [pc, #92]	; (8003c9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003c40:	f7ff ff2c 	bl	8003a9c <LL_ADC_IsEnabled>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d010      	beq.n	8003c76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c5e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c60:	e009      	b.n	8003c76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c66:	f043 0220 	orr.w	r2, r3, #32
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003c74:	e000      	b.n	8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c76:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c80:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	377c      	adds	r7, #124	; 0x7c
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd90      	pop	{r4, r7, pc}
 8003c8c:	40022000 	.word	0x40022000
 8003c90:	40022100 	.word	0x40022100
 8003c94:	40022300 	.word	0x40022300
 8003c98:	58026300 	.word	0x58026300
 8003c9c:	58026000 	.word	0x58026000
 8003ca0:	fffff0e0 	.word	0xfffff0e0

08003ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cd2:	4a04      	ldr	r2, [pc, #16]	; (8003ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	60d3      	str	r3, [r2, #12]
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	e000ed00 	.word	0xe000ed00
 8003ce8:	05fa0000 	.word	0x05fa0000

08003cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cf0:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <__NVIC_GetPriorityGrouping+0x18>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	0a1b      	lsrs	r3, r3, #8
 8003cf6:	f003 0307 	and.w	r3, r3, #7
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	6039      	str	r1, [r7, #0]
 8003d12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	db0a      	blt.n	8003d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	490c      	ldr	r1, [pc, #48]	; (8003d54 <__NVIC_SetPriority+0x4c>)
 8003d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d26:	0112      	lsls	r2, r2, #4
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d30:	e00a      	b.n	8003d48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	4908      	ldr	r1, [pc, #32]	; (8003d58 <__NVIC_SetPriority+0x50>)
 8003d38:	88fb      	ldrh	r3, [r7, #6]
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	3b04      	subs	r3, #4
 8003d40:	0112      	lsls	r2, r2, #4
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	440b      	add	r3, r1
 8003d46:	761a      	strb	r2, [r3, #24]
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000e100 	.word	0xe000e100
 8003d58:	e000ed00 	.word	0xe000ed00

08003d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b089      	sub	sp, #36	; 0x24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f1c3 0307 	rsb	r3, r3, #7
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	bf28      	it	cs
 8003d7a:	2304      	movcs	r3, #4
 8003d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	3304      	adds	r3, #4
 8003d82:	2b06      	cmp	r3, #6
 8003d84:	d902      	bls.n	8003d8c <NVIC_EncodePriority+0x30>
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	3b03      	subs	r3, #3
 8003d8a:	e000      	b.n	8003d8e <NVIC_EncodePriority+0x32>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d90:	f04f 32ff 	mov.w	r2, #4294967295
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43da      	mvns	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	401a      	ands	r2, r3
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003da4:	f04f 31ff 	mov.w	r1, #4294967295
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dae:	43d9      	mvns	r1, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db4:	4313      	orrs	r3, r2
         );
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3724      	adds	r7, #36	; 0x24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dd4:	d301      	bcc.n	8003dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e00f      	b.n	8003dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dda:	4a0a      	ldr	r2, [pc, #40]	; (8003e04 <SysTick_Config+0x40>)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003de2:	210f      	movs	r1, #15
 8003de4:	f04f 30ff 	mov.w	r0, #4294967295
 8003de8:	f7ff ff8e 	bl	8003d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <SysTick_Config+0x40>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003df2:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <SysTick_Config+0x40>)
 8003df4:	2207      	movs	r2, #7
 8003df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	e000e010 	.word	0xe000e010

08003e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff ff47 	bl	8003ca4 <__NVIC_SetPriorityGrouping>
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b086      	sub	sp, #24
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	4603      	mov	r3, r0
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
 8003e2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e2c:	f7ff ff5e 	bl	8003cec <__NVIC_GetPriorityGrouping>
 8003e30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	6978      	ldr	r0, [r7, #20]
 8003e38:	f7ff ff90 	bl	8003d5c <NVIC_EncodePriority>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ff5f 	bl	8003d08 <__NVIC_SetPriority>
}
 8003e4a:	bf00      	nop
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff ffb2 	bl	8003dc4 <SysTick_Config>
 8003e60:	4603      	mov	r3, r0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e0cf      	b.n	800401e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d106      	bne.n	8003e96 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2223      	movs	r2, #35	; 0x23
 8003e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7fd fe55 	bl	8001b40 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e96:	4b64      	ldr	r3, [pc, #400]	; (8004028 <HAL_ETH_Init+0x1bc>)
 8003e98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e9c:	4a62      	ldr	r2, [pc, #392]	; (8004028 <HAL_ETH_Init+0x1bc>)
 8003e9e:	f043 0302 	orr.w	r3, r3, #2
 8003ea2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ea6:	4b60      	ldr	r3, [pc, #384]	; (8004028 <HAL_ETH_Init+0x1bc>)
 8003ea8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	60bb      	str	r3, [r7, #8]
 8003eb2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	7a1b      	ldrb	r3, [r3, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d103      	bne.n	8003ec4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f7fe fe39 	bl	8002b34 <HAL_SYSCFG_ETHInterfaceSelect>
 8003ec2:	e003      	b.n	8003ecc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003ec4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003ec8:	f7fe fe34 	bl	8002b34 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003ecc:	4b57      	ldr	r3, [pc, #348]	; (800402c <HAL_ETH_Init+0x1c0>)
 8003ece:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ee6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ee8:	f7fe fde8 	bl	8002abc <HAL_GetTick>
 8003eec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003eee:	e011      	b.n	8003f14 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003ef0:	f7fe fde4 	bl	8002abc <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003efe:	d909      	bls.n	8003f14 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2204      	movs	r2, #4
 8003f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	22e0      	movs	r2, #224	; 0xe0
 8003f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e084      	b.n	800401e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1e4      	bne.n	8003ef0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f886 	bl	8004038 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003f2c:	f002 fcb4 	bl	8006898 <HAL_RCC_GetHCLKFreq>
 8003f30:	4603      	mov	r3, r0
 8003f32:	4a3f      	ldr	r2, [pc, #252]	; (8004030 <HAL_ETH_Init+0x1c4>)
 8003f34:	fba2 2303 	umull	r2, r3, r2, r3
 8003f38:	0c9a      	lsrs	r2, r3, #18
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3a01      	subs	r2, #1
 8003f40:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fa71 	bl	800442c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f52:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f56:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f66:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	22e0      	movs	r2, #224	; 0xe0
 8003f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e049      	b.n	800401e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f92:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003f96:	4b27      	ldr	r3, [pc, #156]	; (8004034 <HAL_ETH_Init+0x1c8>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6952      	ldr	r2, [r2, #20]
 8003f9e:	0051      	lsls	r1, r2, #1
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003faa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fad9 	bl	8004566 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 fb1f 	bl	80045f8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	3305      	adds	r3, #5
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	021a      	lsls	r2, r3, #8
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	4619      	mov	r1, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	3303      	adds	r3, #3
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	061a      	lsls	r2, r3, #24
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	3302      	adds	r3, #2
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	041b      	lsls	r3, r3, #16
 8003fec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ff8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004006:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004008:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2210      	movs	r2, #16
 8004018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	58024400 	.word	0x58024400
 800402c:	58000400 	.word	0x58000400
 8004030:	431bde83 	.word	0x431bde83
 8004034:	ffff8001 	.word	0xffff8001

08004038 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004048:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004050:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004052:	f002 fc21 	bl	8006898 <HAL_RCC_GetHCLKFreq>
 8004056:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4a1e      	ldr	r2, [pc, #120]	; (80040d4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d908      	bls.n	8004072 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4a1d      	ldr	r2, [pc, #116]	; (80040d8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d804      	bhi.n	8004072 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	e027      	b.n	80040c2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	4a18      	ldr	r2, [pc, #96]	; (80040d8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d908      	bls.n	800408c <HAL_ETH_SetMDIOClockRange+0x54>
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	4a17      	ldr	r2, [pc, #92]	; (80040dc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d204      	bcs.n	800408c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	e01a      	b.n	80040c2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4a13      	ldr	r2, [pc, #76]	; (80040dc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d303      	bcc.n	800409c <HAL_ETH_SetMDIOClockRange+0x64>
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4a12      	ldr	r2, [pc, #72]	; (80040e0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d911      	bls.n	80040c0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4a10      	ldr	r2, [pc, #64]	; (80040e0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d908      	bls.n	80040b6 <HAL_ETH_SetMDIOClockRange+0x7e>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4a0f      	ldr	r2, [pc, #60]	; (80040e4 <HAL_ETH_SetMDIOClockRange+0xac>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d804      	bhi.n	80040b6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	e005      	b.n	80040c2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	e000      	b.n	80040c2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80040c0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	01312cff 	.word	0x01312cff
 80040d8:	02160ebf 	.word	0x02160ebf
 80040dc:	03938700 	.word	0x03938700
 80040e0:	05f5e0ff 	.word	0x05f5e0ff
 80040e4:	08f0d17f 	.word	0x08f0d17f

080040e8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80040fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	791b      	ldrb	r3, [r3, #4]
 8004100:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004102:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	7b1b      	ldrb	r3, [r3, #12]
 8004108:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800410a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	7b5b      	ldrb	r3, [r3, #13]
 8004110:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004112:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	7b9b      	ldrb	r3, [r3, #14]
 8004118:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800411a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	7bdb      	ldrb	r3, [r3, #15]
 8004120:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004122:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	7c12      	ldrb	r2, [r2, #16]
 8004128:	2a00      	cmp	r2, #0
 800412a:	d102      	bne.n	8004132 <ETH_SetMACConfig+0x4a>
 800412c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004130:	e000      	b.n	8004134 <ETH_SetMACConfig+0x4c>
 8004132:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004134:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	7c52      	ldrb	r2, [r2, #17]
 800413a:	2a00      	cmp	r2, #0
 800413c:	d102      	bne.n	8004144 <ETH_SetMACConfig+0x5c>
 800413e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004142:	e000      	b.n	8004146 <ETH_SetMACConfig+0x5e>
 8004144:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004146:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	7c9b      	ldrb	r3, [r3, #18]
 800414c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800414e:	431a      	orrs	r2, r3
               macconf->Speed |
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004154:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800415a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	7f1b      	ldrb	r3, [r3, #28]
 8004160:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004162:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	7f5b      	ldrb	r3, [r3, #29]
 8004168:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800416a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	7f92      	ldrb	r2, [r2, #30]
 8004170:	2a00      	cmp	r2, #0
 8004172:	d102      	bne.n	800417a <ETH_SetMACConfig+0x92>
 8004174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004178:	e000      	b.n	800417c <ETH_SetMACConfig+0x94>
 800417a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800417c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	7fdb      	ldrb	r3, [r3, #31]
 8004182:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004184:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	f892 2020 	ldrb.w	r2, [r2, #32]
 800418c:	2a00      	cmp	r2, #0
 800418e:	d102      	bne.n	8004196 <ETH_SetMACConfig+0xae>
 8004190:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004194:	e000      	b.n	8004198 <ETH_SetMACConfig+0xb0>
 8004196:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004198:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800419e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041a6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80041a8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	4b56      	ldr	r3, [pc, #344]	; (8004314 <ETH_SetMACConfig+0x22c>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	68f9      	ldr	r1, [r7, #12]
 80041c2:	430b      	orrs	r3, r1
 80041c4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ca:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041d2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80041d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80041dc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80041de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80041e6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80041e8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80041f0:	2a00      	cmp	r2, #0
 80041f2:	d102      	bne.n	80041fa <ETH_SetMACConfig+0x112>
 80041f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041f8:	e000      	b.n	80041fc <ETH_SetMACConfig+0x114>
 80041fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80041fc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	4b42      	ldr	r3, [pc, #264]	; (8004318 <ETH_SetMACConfig+0x230>)
 800420e:	4013      	ands	r3, r2
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	68f9      	ldr	r1, [r7, #12]
 8004216:	430b      	orrs	r3, r1
 8004218:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004220:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	4b3a      	ldr	r3, [pc, #232]	; (800431c <ETH_SetMACConfig+0x234>)
 8004232:	4013      	ands	r3, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	68f9      	ldr	r1, [r7, #12]
 800423a:	430b      	orrs	r3, r1
 800423c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004244:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800424a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004252:	2a00      	cmp	r2, #0
 8004254:	d101      	bne.n	800425a <ETH_SetMACConfig+0x172>
 8004256:	2280      	movs	r2, #128	; 0x80
 8004258:	e000      	b.n	800425c <ETH_SetMACConfig+0x174>
 800425a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800425c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004262:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800426e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004272:	4013      	ands	r3, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	68f9      	ldr	r1, [r7, #12]
 800427a:	430b      	orrs	r3, r1
 800427c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004284:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800428c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429a:	f023 0103 	bic.w	r1, r3, #3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80042b2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80042ce:	2a00      	cmp	r2, #0
 80042d0:	d101      	bne.n	80042d6 <ETH_SetMACConfig+0x1ee>
 80042d2:	2240      	movs	r2, #64	; 0x40
 80042d4:	e000      	b.n	80042d8 <ETH_SetMACConfig+0x1f0>
 80042d6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80042d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80042e0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80042e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80042ea:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80042f8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	430a      	orrs	r2, r1
 8004304:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004308:	bf00      	nop
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	00048083 	.word	0x00048083
 8004318:	c0f88000 	.word	0xc0f88000
 800431c:	fffffef0 	.word	0xfffffef0

08004320 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	4b38      	ldr	r3, [pc, #224]	; (8004418 <ETH_SetDMAConfig+0xf8>)
 8004336:	4013      	ands	r3, r2
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	6811      	ldr	r1, [r2, #0]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	430b      	orrs	r3, r1
 8004342:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004346:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	791b      	ldrb	r3, [r3, #4]
 800434c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004352:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	7b1b      	ldrb	r3, [r3, #12]
 8004358:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	4b2c      	ldr	r3, [pc, #176]	; (800441c <ETH_SetDMAConfig+0xfc>)
 800436a:	4013      	ands	r3, r2
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	68f9      	ldr	r1, [r7, #12]
 8004372:	430b      	orrs	r3, r1
 8004374:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004378:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	7b5b      	ldrb	r3, [r3, #13]
 800437e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004384:	4313      	orrs	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004390:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004394:	4b22      	ldr	r3, [pc, #136]	; (8004420 <ETH_SetDMAConfig+0x100>)
 8004396:	4013      	ands	r3, r2
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	68f9      	ldr	r1, [r7, #12]
 800439e:	430b      	orrs	r3, r1
 80043a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043a4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	7d1b      	ldrb	r3, [r3, #20]
 80043b0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80043b2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	7f5b      	ldrb	r3, [r3, #29]
 80043b8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80043ca:	4b16      	ldr	r3, [pc, #88]	; (8004424 <ETH_SetDMAConfig+0x104>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	68f9      	ldr	r1, [r7, #12]
 80043d4:	430b      	orrs	r3, r1
 80043d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043da:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	7f1b      	ldrb	r3, [r3, #28]
 80043e2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <ETH_SetDMAConfig+0x108>)
 80043fa:	4013      	ands	r3, r2
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6812      	ldr	r2, [r2, #0]
 8004400:	68f9      	ldr	r1, [r7, #12]
 8004402:	430b      	orrs	r3, r1
 8004404:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004408:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800440c:	bf00      	nop
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	ffff87fd 	.word	0xffff87fd
 800441c:	ffff2ffe 	.word	0xffff2ffe
 8004420:	fffec000 	.word	0xfffec000
 8004424:	ffc0efef 	.word	0xffc0efef
 8004428:	7fc0ffff 	.word	0x7fc0ffff

0800442c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b0a4      	sub	sp, #144	; 0x90
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004434:	2301      	movs	r3, #1
 8004436:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800443a:	2300      	movs	r3, #0
 800443c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800443e:	2300      	movs	r3, #0
 8004440:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004444:	2300      	movs	r3, #0
 8004446:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800444a:	2301      	movs	r3, #1
 800444c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004450:	2301      	movs	r3, #1
 8004452:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004456:	2301      	movs	r3, #1
 8004458:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800445c:	2300      	movs	r3, #0
 800445e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004462:	2301      	movs	r3, #1
 8004464:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800446c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800446e:	2300      	movs	r3, #0
 8004470:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004474:	2300      	movs	r3, #0
 8004476:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004478:	2300      	movs	r3, #0
 800447a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800447e:	2300      	movs	r3, #0
 8004480:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004484:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004488:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800448a:	2300      	movs	r3, #0
 800448c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004490:	2300      	movs	r3, #0
 8004492:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004494:	2301      	movs	r3, #1
 8004496:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800449a:	2300      	movs	r3, #0
 800449c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80044a0:	2300      	movs	r3, #0
 80044a2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80044a6:	2300      	movs	r3, #0
 80044a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80044ae:	2300      	movs	r3, #0
 80044b0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80044b8:	2300      	movs	r3, #0
 80044ba:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80044be:	2301      	movs	r3, #1
 80044c0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80044c4:	2320      	movs	r3, #32
 80044c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80044ca:	2301      	movs	r3, #1
 80044cc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80044d0:	2300      	movs	r3, #0
 80044d2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80044d6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80044da:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80044dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044e0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80044e2:	2300      	movs	r3, #0
 80044e4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80044e8:	2302      	movs	r3, #2
 80044ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80044ee:	2300      	movs	r3, #0
 80044f0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80044f4:	2300      	movs	r3, #0
 80044f6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80044fa:	2300      	movs	r3, #0
 80044fc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004500:	2301      	movs	r3, #1
 8004502:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004506:	2300      	movs	r3, #0
 8004508:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800450a:	2301      	movs	r3, #1
 800450c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004510:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004514:	4619      	mov	r1, r3
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff fde6 	bl	80040e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800451c:	2301      	movs	r3, #1
 800451e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004520:	2301      	movs	r3, #1
 8004522:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004524:	2300      	movs	r3, #0
 8004526:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004528:	2300      	movs	r3, #0
 800452a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800452e:	2300      	movs	r3, #0
 8004530:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004532:	2300      	movs	r3, #0
 8004534:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004536:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800453a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800453c:	2300      	movs	r3, #0
 800453e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004540:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004544:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004546:	2300      	movs	r3, #0
 8004548:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800454c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004552:	f107 0308 	add.w	r3, r7, #8
 8004556:	4619      	mov	r1, r3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff fee1 	bl	8004320 <ETH_SetDMAConfig>
}
 800455e:	bf00      	nop
 8004560:	3790      	adds	r7, #144	; 0x90
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004566:	b480      	push	{r7}
 8004568:	b085      	sub	sp, #20
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	e01d      	b.n	80045b0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68d9      	ldr	r1, [r3, #12]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4613      	mov	r3, r2
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	4413      	add	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	440b      	add	r3, r1
 8004584:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2200      	movs	r2, #0
 8004590:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2200      	movs	r2, #0
 8004596:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2200      	movs	r2, #0
 800459c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	3206      	adds	r2, #6
 80045a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3301      	adds	r3, #1
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d9de      	bls.n	8004574 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c4:	461a      	mov	r2, r3
 80045c6:	2303      	movs	r3, #3
 80045c8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80045ec:	bf00      	nop
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	e023      	b.n	800464e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6919      	ldr	r1, [r3, #16]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	4613      	mov	r3, r2
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	4413      	add	r3, r2
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	440b      	add	r3, r1
 8004616:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2200      	movs	r2, #0
 8004622:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2200      	movs	r2, #0
 8004628:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2200      	movs	r2, #0
 800462e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2200      	movs	r2, #0
 8004634:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2200      	movs	r2, #0
 800463a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800463c:	68b9      	ldr	r1, [r7, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	3212      	adds	r2, #18
 8004644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	3301      	adds	r3, #1
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b03      	cmp	r3, #3
 8004652:	d9d8      	bls.n	8004606 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800467a:	461a      	mov	r2, r3
 800467c:	2303      	movs	r3, #3
 800467e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800468e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80046a6:	bf00      	nop
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
	...

080046b4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b098      	sub	sp, #96	; 0x60
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80046bc:	4a84      	ldr	r2, [pc, #528]	; (80048d0 <HAL_FDCAN_Init+0x21c>)
 80046be:	f107 030c 	add.w	r3, r7, #12
 80046c2:	4611      	mov	r1, r2
 80046c4:	224c      	movs	r2, #76	; 0x4c
 80046c6:	4618      	mov	r0, r3
 80046c8:	f007 fc06 	bl	800bed8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e1c6      	b.n	8004a64 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a7e      	ldr	r2, [pc, #504]	; (80048d4 <HAL_FDCAN_Init+0x220>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d106      	bne.n	80046ee <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80046e8:	461a      	mov	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fd fb4c 	bl	8001da0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0210 	bic.w	r2, r2, #16
 8004716:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004718:	f7fe f9d0 	bl	8002abc <HAL_GetTick>
 800471c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800471e:	e014      	b.n	800474a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004720:	f7fe f9cc 	bl	8002abc <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b0a      	cmp	r3, #10
 800472c:	d90d      	bls.n	800474a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004734:	f043 0201 	orr.w	r2, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2203      	movs	r2, #3
 8004742:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e18c      	b.n	8004a64 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b08      	cmp	r3, #8
 8004756:	d0e3      	beq.n	8004720 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004768:	f7fe f9a8 	bl	8002abc <HAL_GetTick>
 800476c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800476e:	e014      	b.n	800479a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004770:	f7fe f9a4 	bl	8002abc <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b0a      	cmp	r3, #10
 800477c:	d90d      	bls.n	800479a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004784:	f043 0201 	orr.w	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2203      	movs	r2, #3
 8004792:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e164      	b.n	8004a64 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0e3      	beq.n	8004770 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0202 	orr.w	r2, r2, #2
 80047b6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	7c1b      	ldrb	r3, [r3, #16]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d108      	bne.n	80047d2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ce:	619a      	str	r2, [r3, #24]
 80047d0:	e007      	b.n	80047e2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699a      	ldr	r2, [r3, #24]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047e0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	7c5b      	ldrb	r3, [r3, #17]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d108      	bne.n	80047fc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699a      	ldr	r2, [r3, #24]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047f8:	619a      	str	r2, [r3, #24]
 80047fa:	e007      	b.n	800480c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699a      	ldr	r2, [r3, #24]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800480a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	7c9b      	ldrb	r3, [r3, #18]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d108      	bne.n	8004826 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004822:	619a      	str	r2, [r3, #24]
 8004824:	e007      	b.n	8004836 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699a      	ldr	r2, [r3, #24]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004834:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800485a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0210 	bic.w	r2, r2, #16
 800486a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d108      	bne.n	8004886 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0204 	orr.w	r2, r2, #4
 8004882:	619a      	str	r2, [r3, #24]
 8004884:	e030      	b.n	80048e8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d02c      	beq.n	80048e8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d020      	beq.n	80048d8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699a      	ldr	r2, [r3, #24]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048a4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0210 	orr.w	r2, r2, #16
 80048b4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	2b03      	cmp	r3, #3
 80048bc:	d114      	bne.n	80048e8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	699a      	ldr	r2, [r3, #24]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f042 0220 	orr.w	r2, r2, #32
 80048cc:	619a      	str	r2, [r3, #24]
 80048ce:	e00b      	b.n	80048e8 <HAL_FDCAN_Init+0x234>
 80048d0:	0800bf24 	.word	0x0800bf24
 80048d4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0220 	orr.w	r2, r2, #32
 80048e6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80048f8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004900:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	3b01      	subs	r3, #1
 800490a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004910:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004912:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800491c:	d115      	bne.n	800494a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004922:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	3b01      	subs	r3, #1
 800492a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800492c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	3b01      	subs	r3, #1
 8004934:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004936:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	3b01      	subs	r3, #1
 8004940:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004946:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004948:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004970:	4413      	add	r3, r2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d011      	beq.n	800499a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800497e:	f023 0107 	bic.w	r1, r3, #7
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	3360      	adds	r3, #96	; 0x60
 800498a:	443b      	add	r3, r7
 800498c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d011      	beq.n	80049c6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80049aa:	f023 0107 	bic.w	r1, r3, #7
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	3360      	adds	r3, #96	; 0x60
 80049b6:	443b      	add	r3, r7
 80049b8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d012      	beq.n	80049f4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80049d6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	3360      	adds	r3, #96	; 0x60
 80049e2:	443b      	add	r3, r7
 80049e4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80049e8:	011a      	lsls	r2, r3, #4
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d012      	beq.n	8004a22 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004a04:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	3360      	adds	r3, #96	; 0x60
 8004a10:	443b      	add	r3, r7
 8004a12:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004a16:	021a      	lsls	r2, r3, #8
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a11      	ldr	r2, [pc, #68]	; (8004a6c <HAL_FDCAN_Init+0x3b8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d107      	bne.n	8004a3c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f022 0203 	bic.w	r2, r2, #3
 8004a3a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f80b 	bl	8004a70 <FDCAN_CalcultateRamBlockAddresses>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004a60:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3760      	adds	r7, #96	; 0x60
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	4000a000 	.word	0x4000a000

08004a70 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004a86:	4ba7      	ldr	r3, [pc, #668]	; (8004d24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	0091      	lsls	r1, r2, #2
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6812      	ldr	r2, [r2, #0]
 8004a92:	430b      	orrs	r3, r1
 8004a94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	041a      	lsls	r2, r3, #16
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	4413      	add	r3, r2
 8004abc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ac6:	4b97      	ldr	r3, [pc, #604]	; (8004d24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	0091      	lsls	r1, r2, #2
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6812      	ldr	r2, [r2, #0]
 8004ad2:	430b      	orrs	r3, r1
 8004ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae8:	041a      	lsls	r2, r3, #16
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	4413      	add	r3, r2
 8004afe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004b08:	4b86      	ldr	r3, [pc, #536]	; (8004d24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	0091      	lsls	r1, r2, #2
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	430b      	orrs	r3, r1
 8004b16:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b22:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	041a      	lsls	r2, r3, #16
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b3e:	fb02 f303 	mul.w	r3, r2, r3
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	4413      	add	r3, r2
 8004b46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004b50:	4b74      	ldr	r3, [pc, #464]	; (8004d24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	0091      	lsls	r1, r2, #2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b6a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b72:	041a      	lsls	r2, r3, #16
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004b86:	fb02 f303 	mul.w	r3, r2, r3
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004b98:	4b62      	ldr	r3, [pc, #392]	; (8004d24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	0091      	lsls	r1, r2, #2
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	4413      	add	r3, r2
 8004bba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004bc4:	4b57      	ldr	r3, [pc, #348]	; (8004d24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	0091      	lsls	r1, r2, #2
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6812      	ldr	r2, [r2, #0]
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004bde:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be6:	041a      	lsls	r2, r3, #16
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004c06:	4b47      	ldr	r3, [pc, #284]	; (8004d24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	0091      	lsls	r1, r2, #2
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6812      	ldr	r2, [r2, #0]
 8004c12:	430b      	orrs	r3, r1
 8004c14:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004c20:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c28:	041a      	lsls	r2, r3, #16
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004c3c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c44:	061a      	lsls	r2, r3, #24
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c54:	4b34      	ldr	r3, [pc, #208]	; (8004d28 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004c56:	4413      	add	r3, r2
 8004c58:	009a      	lsls	r2, r3, #2
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	441a      	add	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	441a      	add	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	6879      	ldr	r1, [r7, #4]
 8004c88:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004c8a:	fb01 f303 	mul.w	r3, r1, r3
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	441a      	add	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004ca2:	fb01 f303 	mul.w	r3, r1, r3
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	441a      	add	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004cba:	fb01 f303 	mul.w	r3, r1, r3
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	441a      	add	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	441a      	add	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004cea:	fb01 f303 	mul.w	r3, r1, r3
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	441a      	add	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004d06:	fb01 f303 	mul.w	r3, r1, r3
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	441a      	add	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1a:	4a04      	ldr	r2, [pc, #16]	; (8004d2c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d915      	bls.n	8004d4c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004d20:	e006      	b.n	8004d30 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004d22:	bf00      	nop
 8004d24:	ffff0003 	.word	0xffff0003
 8004d28:	10002b00 	.word	0x10002b00
 8004d2c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d36:	f043 0220 	orr.w	r2, r3, #32
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2203      	movs	r2, #3
 8004d44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e010      	b.n	8004d6e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	e005      	b.n	8004d60 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d3f3      	bcc.n	8004d54 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop

08004d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b089      	sub	sp, #36	; 0x24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004d8a:	4b89      	ldr	r3, [pc, #548]	; (8004fb0 <HAL_GPIO_Init+0x234>)
 8004d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d8e:	e194      	b.n	80050ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	2101      	movs	r1, #1
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 8186 	beq.w	80050b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d005      	beq.n	8004dc0 <HAL_GPIO_Init+0x44>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0303 	and.w	r3, r3, #3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d130      	bne.n	8004e22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	2203      	movs	r2, #3
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004df6:	2201      	movs	r2, #1
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	4013      	ands	r3, r2
 8004e04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	091b      	lsrs	r3, r3, #4
 8004e0c:	f003 0201 	and.w	r2, r3, #1
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d017      	beq.n	8004e5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	2203      	movs	r2, #3
 8004e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3e:	43db      	mvns	r3, r3
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4013      	ands	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d123      	bne.n	8004eb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	08da      	lsrs	r2, r3, #3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3208      	adds	r2, #8
 8004e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	220f      	movs	r2, #15
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	43db      	mvns	r3, r3
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	08da      	lsrs	r2, r3, #3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3208      	adds	r2, #8
 8004eac:	69b9      	ldr	r1, [r7, #24]
 8004eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	2203      	movs	r2, #3
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f003 0203 	and.w	r2, r3, #3
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 80e0 	beq.w	80050b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ef4:	4b2f      	ldr	r3, [pc, #188]	; (8004fb4 <HAL_GPIO_Init+0x238>)
 8004ef6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004efa:	4a2e      	ldr	r2, [pc, #184]	; (8004fb4 <HAL_GPIO_Init+0x238>)
 8004efc:	f043 0302 	orr.w	r3, r3, #2
 8004f00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f04:	4b2b      	ldr	r3, [pc, #172]	; (8004fb4 <HAL_GPIO_Init+0x238>)
 8004f06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f12:	4a29      	ldr	r2, [pc, #164]	; (8004fb8 <HAL_GPIO_Init+0x23c>)
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	089b      	lsrs	r3, r3, #2
 8004f18:	3302      	adds	r3, #2
 8004f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	220f      	movs	r2, #15
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	43db      	mvns	r3, r3
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	4013      	ands	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a20      	ldr	r2, [pc, #128]	; (8004fbc <HAL_GPIO_Init+0x240>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d052      	beq.n	8004fe4 <HAL_GPIO_Init+0x268>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a1f      	ldr	r2, [pc, #124]	; (8004fc0 <HAL_GPIO_Init+0x244>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d031      	beq.n	8004faa <HAL_GPIO_Init+0x22e>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a1e      	ldr	r2, [pc, #120]	; (8004fc4 <HAL_GPIO_Init+0x248>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d02b      	beq.n	8004fa6 <HAL_GPIO_Init+0x22a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a1d      	ldr	r2, [pc, #116]	; (8004fc8 <HAL_GPIO_Init+0x24c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d025      	beq.n	8004fa2 <HAL_GPIO_Init+0x226>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a1c      	ldr	r2, [pc, #112]	; (8004fcc <HAL_GPIO_Init+0x250>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d01f      	beq.n	8004f9e <HAL_GPIO_Init+0x222>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a1b      	ldr	r2, [pc, #108]	; (8004fd0 <HAL_GPIO_Init+0x254>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d019      	beq.n	8004f9a <HAL_GPIO_Init+0x21e>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a1a      	ldr	r2, [pc, #104]	; (8004fd4 <HAL_GPIO_Init+0x258>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d013      	beq.n	8004f96 <HAL_GPIO_Init+0x21a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a19      	ldr	r2, [pc, #100]	; (8004fd8 <HAL_GPIO_Init+0x25c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00d      	beq.n	8004f92 <HAL_GPIO_Init+0x216>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a18      	ldr	r2, [pc, #96]	; (8004fdc <HAL_GPIO_Init+0x260>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d007      	beq.n	8004f8e <HAL_GPIO_Init+0x212>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a17      	ldr	r2, [pc, #92]	; (8004fe0 <HAL_GPIO_Init+0x264>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d101      	bne.n	8004f8a <HAL_GPIO_Init+0x20e>
 8004f86:	2309      	movs	r3, #9
 8004f88:	e02d      	b.n	8004fe6 <HAL_GPIO_Init+0x26a>
 8004f8a:	230a      	movs	r3, #10
 8004f8c:	e02b      	b.n	8004fe6 <HAL_GPIO_Init+0x26a>
 8004f8e:	2308      	movs	r3, #8
 8004f90:	e029      	b.n	8004fe6 <HAL_GPIO_Init+0x26a>
 8004f92:	2307      	movs	r3, #7
 8004f94:	e027      	b.n	8004fe6 <HAL_GPIO_Init+0x26a>
 8004f96:	2306      	movs	r3, #6
 8004f98:	e025      	b.n	8004fe6 <HAL_GPIO_Init+0x26a>
 8004f9a:	2305      	movs	r3, #5
 8004f9c:	e023      	b.n	8004fe6 <HAL_GPIO_Init+0x26a>
 8004f9e:	2304      	movs	r3, #4
 8004fa0:	e021      	b.n	8004fe6 <HAL_GPIO_Init+0x26a>
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e01f      	b.n	8004fe6 <HAL_GPIO_Init+0x26a>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	e01d      	b.n	8004fe6 <HAL_GPIO_Init+0x26a>
 8004faa:	2301      	movs	r3, #1
 8004fac:	e01b      	b.n	8004fe6 <HAL_GPIO_Init+0x26a>
 8004fae:	bf00      	nop
 8004fb0:	58000080 	.word	0x58000080
 8004fb4:	58024400 	.word	0x58024400
 8004fb8:	58000400 	.word	0x58000400
 8004fbc:	58020000 	.word	0x58020000
 8004fc0:	58020400 	.word	0x58020400
 8004fc4:	58020800 	.word	0x58020800
 8004fc8:	58020c00 	.word	0x58020c00
 8004fcc:	58021000 	.word	0x58021000
 8004fd0:	58021400 	.word	0x58021400
 8004fd4:	58021800 	.word	0x58021800
 8004fd8:	58021c00 	.word	0x58021c00
 8004fdc:	58022000 	.word	0x58022000
 8004fe0:	58022400 	.word	0x58022400
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	f002 0203 	and.w	r2, r2, #3
 8004fec:	0092      	lsls	r2, r2, #2
 8004fee:	4093      	lsls	r3, r2
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ff6:	4938      	ldr	r1, [pc, #224]	; (80050d8 <HAL_GPIO_Init+0x35c>)
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	089b      	lsrs	r3, r3, #2
 8004ffc:	3302      	adds	r3, #2
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	43db      	mvns	r3, r3
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	4013      	ands	r3, r2
 8005014:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800502a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	43db      	mvns	r3, r3
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	4013      	ands	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	4313      	orrs	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005058:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	43db      	mvns	r3, r3
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	4013      	ands	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	43db      	mvns	r3, r3
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	4013      	ands	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	3301      	adds	r3, #1
 80050b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f47f ae63 	bne.w	8004d90 <HAL_GPIO_Init+0x14>
  }
}
 80050ca:	bf00      	nop
 80050cc:	bf00      	nop
 80050ce:	3724      	adds	r7, #36	; 0x24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	58000400 	.word	0x58000400

080050dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	460b      	mov	r3, r1
 80050e6:	807b      	strh	r3, [r7, #2]
 80050e8:	4613      	mov	r3, r2
 80050ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050ec:	787b      	ldrb	r3, [r7, #1]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050f2:	887a      	ldrh	r2, [r7, #2]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80050f8:	e003      	b.n	8005102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80050fa:	887b      	ldrh	r3, [r7, #2]
 80050fc:	041a      	lsls	r2, r3, #16
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	619a      	str	r2, [r3, #24]
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
	...

08005110 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e0bf      	b.n	80052a2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fc ff02 	bl	8001f40 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699a      	ldr	r2, [r3, #24]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005152:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6999      	ldr	r1, [r3, #24]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005168:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6899      	ldr	r1, [r3, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4b4a      	ldr	r3, [pc, #296]	; (80052ac <HAL_LTDC_Init+0x19c>)
 8005184:	400b      	ands	r3, r1
 8005186:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	041b      	lsls	r3, r3, #16
 800518e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6899      	ldr	r1, [r3, #8]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68d9      	ldr	r1, [r3, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	4b3e      	ldr	r3, [pc, #248]	; (80052ac <HAL_LTDC_Init+0x19c>)
 80051b2:	400b      	ands	r3, r1
 80051b4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	041b      	lsls	r3, r3, #16
 80051bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68d9      	ldr	r1, [r3, #12]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1a      	ldr	r2, [r3, #32]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6919      	ldr	r1, [r3, #16]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	4b33      	ldr	r3, [pc, #204]	; (80052ac <HAL_LTDC_Init+0x19c>)
 80051e0:	400b      	ands	r3, r1
 80051e2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	041b      	lsls	r3, r3, #16
 80051ea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6919      	ldr	r1, [r3, #16]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6959      	ldr	r1, [r3, #20]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	4b27      	ldr	r3, [pc, #156]	; (80052ac <HAL_LTDC_Init+0x19c>)
 800520e:	400b      	ands	r3, r1
 8005210:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	041b      	lsls	r3, r3, #16
 8005218:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6959      	ldr	r1, [r3, #20]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005236:	021b      	lsls	r3, r3, #8
 8005238:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005252:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0206 	orr.w	r2, r2, #6
 800527e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0201 	orr.w	r2, r2, #1
 800528e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	f000f800 	.word	0xf000f800

080052b0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80052b0:	b5b0      	push	{r4, r5, r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_LTDC_ConfigLayer+0x1a>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e02c      	b.n	8005324 <HAL_LTDC_ConfigLayer+0x74>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2202      	movs	r2, #2
 80052d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2134      	movs	r1, #52	; 0x34
 80052e0:	fb01 f303 	mul.w	r3, r1, r3
 80052e4:	4413      	add	r3, r2
 80052e6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	4614      	mov	r4, r2
 80052ee:	461d      	mov	r5, r3
 80052f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052fc:	682b      	ldr	r3, [r5, #0]
 80052fe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f811 	bl	800532c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2201      	movs	r2, #1
 8005310:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bdb0      	pop	{r4, r5, r7, pc}

0800532c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800532c:	b480      	push	{r7}
 800532e:	b089      	sub	sp, #36	; 0x24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	0c1b      	lsrs	r3, r3, #16
 8005344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005348:	4413      	add	r3, r2
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	461a      	mov	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	01db      	lsls	r3, r3, #7
 8005358:	4413      	add	r3, r2
 800535a:	3384      	adds	r3, #132	; 0x84
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	6812      	ldr	r2, [r2, #0]
 8005362:	4611      	mov	r1, r2
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	01d2      	lsls	r2, r2, #7
 8005368:	440a      	add	r2, r1
 800536a:	3284      	adds	r2, #132	; 0x84
 800536c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005370:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	0c1b      	lsrs	r3, r3, #16
 800537e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005382:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005384:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4619      	mov	r1, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	01db      	lsls	r3, r3, #7
 8005390:	440b      	add	r3, r1
 8005392:	3384      	adds	r3, #132	; 0x84
 8005394:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800539a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053aa:	4413      	add	r3, r2
 80053ac:	041b      	lsls	r3, r3, #16
 80053ae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	01db      	lsls	r3, r3, #7
 80053ba:	4413      	add	r3, r2
 80053bc:	3384      	adds	r3, #132	; 0x84
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	6812      	ldr	r2, [r2, #0]
 80053c4:	4611      	mov	r1, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	01d2      	lsls	r2, r2, #7
 80053ca:	440a      	add	r2, r1
 80053cc:	3284      	adds	r2, #132	; 0x84
 80053ce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80053d2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053e2:	4413      	add	r3, r2
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4619      	mov	r1, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	01db      	lsls	r3, r3, #7
 80053f0:	440b      	add	r3, r1
 80053f2:	3384      	adds	r3, #132	; 0x84
 80053f4:	4619      	mov	r1, r3
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	461a      	mov	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	01db      	lsls	r3, r3, #7
 8005406:	4413      	add	r3, r2
 8005408:	3384      	adds	r3, #132	; 0x84
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	4611      	mov	r1, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	01d2      	lsls	r2, r2, #7
 8005416:	440a      	add	r2, r1
 8005418:	3284      	adds	r2, #132	; 0x84
 800541a:	f023 0307 	bic.w	r3, r3, #7
 800541e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	01db      	lsls	r3, r3, #7
 800542a:	4413      	add	r3, r2
 800542c:	3384      	adds	r3, #132	; 0x84
 800542e:	461a      	mov	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005446:	041b      	lsls	r3, r3, #16
 8005448:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	061b      	lsls	r3, r3, #24
 8005450:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	01db      	lsls	r3, r3, #7
 800545c:	4413      	add	r3, r2
 800545e:	3384      	adds	r3, #132	; 0x84
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	01db      	lsls	r3, r3, #7
 800546c:	4413      	add	r3, r2
 800546e:	3384      	adds	r3, #132	; 0x84
 8005470:	461a      	mov	r2, r3
 8005472:	2300      	movs	r3, #0
 8005474:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800547c:	461a      	mov	r2, r3
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	431a      	orrs	r2, r3
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	431a      	orrs	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4619      	mov	r1, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	01db      	lsls	r3, r3, #7
 8005490:	440b      	add	r3, r1
 8005492:	3384      	adds	r3, #132	; 0x84
 8005494:	4619      	mov	r1, r3
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	01db      	lsls	r3, r3, #7
 80054a6:	4413      	add	r3, r2
 80054a8:	3384      	adds	r3, #132	; 0x84
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	6812      	ldr	r2, [r2, #0]
 80054b0:	4611      	mov	r1, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	01d2      	lsls	r2, r2, #7
 80054b6:	440a      	add	r2, r1
 80054b8:	3284      	adds	r2, #132	; 0x84
 80054ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80054be:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	01db      	lsls	r3, r3, #7
 80054ca:	4413      	add	r3, r2
 80054cc:	3384      	adds	r3, #132	; 0x84
 80054ce:	461a      	mov	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	01db      	lsls	r3, r3, #7
 80054e0:	4413      	add	r3, r2
 80054e2:	3384      	adds	r3, #132	; 0x84
 80054e4:	69da      	ldr	r2, [r3, #28]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4619      	mov	r1, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	01db      	lsls	r3, r3, #7
 80054f0:	440b      	add	r3, r1
 80054f2:	3384      	adds	r3, #132	; 0x84
 80054f4:	4619      	mov	r1, r3
 80054f6:	4b58      	ldr	r3, [pc, #352]	; (8005658 <LTDC_SetConfig+0x32c>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	68f9      	ldr	r1, [r7, #12]
 8005506:	6809      	ldr	r1, [r1, #0]
 8005508:	4608      	mov	r0, r1
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	01c9      	lsls	r1, r1, #7
 800550e:	4401      	add	r1, r0
 8005510:	3184      	adds	r1, #132	; 0x84
 8005512:	4313      	orrs	r3, r2
 8005514:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	01db      	lsls	r3, r3, #7
 8005520:	4413      	add	r3, r2
 8005522:	3384      	adds	r3, #132	; 0x84
 8005524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	01db      	lsls	r3, r3, #7
 8005530:	4413      	add	r3, r2
 8005532:	3384      	adds	r3, #132	; 0x84
 8005534:	461a      	mov	r2, r3
 8005536:	2300      	movs	r3, #0
 8005538:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	01db      	lsls	r3, r3, #7
 8005544:	4413      	add	r3, r2
 8005546:	3384      	adds	r3, #132	; 0x84
 8005548:	461a      	mov	r2, r3
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d102      	bne.n	800555e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005558:	2304      	movs	r3, #4
 800555a:	61fb      	str	r3, [r7, #28]
 800555c:	e01b      	b.n	8005596 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d102      	bne.n	800556c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005566:	2303      	movs	r3, #3
 8005568:	61fb      	str	r3, [r7, #28]
 800556a:	e014      	b.n	8005596 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	2b04      	cmp	r3, #4
 8005572:	d00b      	beq.n	800558c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005578:	2b02      	cmp	r3, #2
 800557a:	d007      	beq.n	800558c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005580:	2b03      	cmp	r3, #3
 8005582:	d003      	beq.n	800558c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005588:	2b07      	cmp	r3, #7
 800558a:	d102      	bne.n	8005592 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800558c:	2302      	movs	r3, #2
 800558e:	61fb      	str	r3, [r7, #28]
 8005590:	e001      	b.n	8005596 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005592:	2301      	movs	r3, #1
 8005594:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	01db      	lsls	r3, r3, #7
 80055a0:	4413      	add	r3, r2
 80055a2:	3384      	adds	r3, #132	; 0x84
 80055a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	6812      	ldr	r2, [r2, #0]
 80055aa:	4611      	mov	r1, r2
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	01d2      	lsls	r2, r2, #7
 80055b0:	440a      	add	r2, r1
 80055b2:	3284      	adds	r2, #132	; 0x84
 80055b4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80055b8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	fb02 f303 	mul.w	r3, r2, r3
 80055c4:	041a      	lsls	r2, r3, #16
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	6859      	ldr	r1, [r3, #4]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	1acb      	subs	r3, r1, r3
 80055d0:	69f9      	ldr	r1, [r7, #28]
 80055d2:	fb01 f303 	mul.w	r3, r1, r3
 80055d6:	3307      	adds	r3, #7
 80055d8:	68f9      	ldr	r1, [r7, #12]
 80055da:	6809      	ldr	r1, [r1, #0]
 80055dc:	4608      	mov	r0, r1
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	01c9      	lsls	r1, r1, #7
 80055e2:	4401      	add	r1, r0
 80055e4:	3184      	adds	r1, #132	; 0x84
 80055e6:	4313      	orrs	r3, r2
 80055e8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	01db      	lsls	r3, r3, #7
 80055f4:	4413      	add	r3, r2
 80055f6:	3384      	adds	r3, #132	; 0x84
 80055f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4619      	mov	r1, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	01db      	lsls	r3, r3, #7
 8005604:	440b      	add	r3, r1
 8005606:	3384      	adds	r3, #132	; 0x84
 8005608:	4619      	mov	r1, r3
 800560a:	4b14      	ldr	r3, [pc, #80]	; (800565c <LTDC_SetConfig+0x330>)
 800560c:	4013      	ands	r3, r2
 800560e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	01db      	lsls	r3, r3, #7
 800561a:	4413      	add	r3, r2
 800561c:	3384      	adds	r3, #132	; 0x84
 800561e:	461a      	mov	r2, r3
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	461a      	mov	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	01db      	lsls	r3, r3, #7
 8005630:	4413      	add	r3, r2
 8005632:	3384      	adds	r3, #132	; 0x84
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	4611      	mov	r1, r2
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	01d2      	lsls	r2, r2, #7
 8005640:	440a      	add	r2, r1
 8005642:	3284      	adds	r2, #132	; 0x84
 8005644:	f043 0301 	orr.w	r3, r3, #1
 8005648:	6013      	str	r3, [r2, #0]
}
 800564a:	bf00      	nop
 800564c:	3724      	adds	r7, #36	; 0x24
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	fffff8f8 	.word	0xfffff8f8
 800565c:	fffff800 	.word	0xfffff800

08005660 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005662:	b08f      	sub	sp, #60	; 0x3c
 8005664:	af0a      	add	r7, sp, #40	; 0x28
 8005666:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e116      	b.n	80058a0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d106      	bne.n	8005692 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7fc fecd 	bl	800242c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2203      	movs	r2, #3
 8005696:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d102      	bne.n	80056ac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f006 f951 	bl	800b958 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	603b      	str	r3, [r7, #0]
 80056bc:	687e      	ldr	r6, [r7, #4]
 80056be:	466d      	mov	r5, sp
 80056c0:	f106 0410 	add.w	r4, r6, #16
 80056c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80056d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80056d4:	1d33      	adds	r3, r6, #4
 80056d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056d8:	6838      	ldr	r0, [r7, #0]
 80056da:	f006 f8cf 	bl	800b87c <USB_CoreInit>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d005      	beq.n	80056f0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e0d7      	b.n	80058a0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2100      	movs	r1, #0
 80056f6:	4618      	mov	r0, r3
 80056f8:	f006 f93f 	bl	800b97a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056fc:	2300      	movs	r3, #0
 80056fe:	73fb      	strb	r3, [r7, #15]
 8005700:	e04a      	b.n	8005798 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005702:	7bfa      	ldrb	r2, [r7, #15]
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	4613      	mov	r3, r2
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	440b      	add	r3, r1
 8005710:	333d      	adds	r3, #61	; 0x3d
 8005712:	2201      	movs	r2, #1
 8005714:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005716:	7bfa      	ldrb	r2, [r7, #15]
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	4613      	mov	r3, r2
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	4413      	add	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	440b      	add	r3, r1
 8005724:	333c      	adds	r3, #60	; 0x3c
 8005726:	7bfa      	ldrb	r2, [r7, #15]
 8005728:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800572a:	7bfa      	ldrb	r2, [r7, #15]
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	b298      	uxth	r0, r3
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	4613      	mov	r3, r2
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	440b      	add	r3, r1
 800573c:	3356      	adds	r3, #86	; 0x56
 800573e:	4602      	mov	r2, r0
 8005740:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005742:	7bfa      	ldrb	r2, [r7, #15]
 8005744:	6879      	ldr	r1, [r7, #4]
 8005746:	4613      	mov	r3, r2
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	4413      	add	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	440b      	add	r3, r1
 8005750:	3340      	adds	r3, #64	; 0x40
 8005752:	2200      	movs	r2, #0
 8005754:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005756:	7bfa      	ldrb	r2, [r7, #15]
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	4613      	mov	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	3344      	adds	r3, #68	; 0x44
 8005766:	2200      	movs	r2, #0
 8005768:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800576a:	7bfa      	ldrb	r2, [r7, #15]
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	4413      	add	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	3348      	adds	r3, #72	; 0x48
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800577e:	7bfa      	ldrb	r2, [r7, #15]
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	4613      	mov	r3, r2
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	440b      	add	r3, r1
 800578c:	334c      	adds	r3, #76	; 0x4c
 800578e:	2200      	movs	r2, #0
 8005790:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005792:	7bfb      	ldrb	r3, [r7, #15]
 8005794:	3301      	adds	r3, #1
 8005796:	73fb      	strb	r3, [r7, #15]
 8005798:	7bfa      	ldrb	r2, [r7, #15]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d3af      	bcc.n	8005702 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057a2:	2300      	movs	r3, #0
 80057a4:	73fb      	strb	r3, [r7, #15]
 80057a6:	e044      	b.n	8005832 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80057a8:	7bfa      	ldrb	r2, [r7, #15]
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	4613      	mov	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	4413      	add	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	440b      	add	r3, r1
 80057b6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80057ba:	2200      	movs	r2, #0
 80057bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80057be:	7bfa      	ldrb	r2, [r7, #15]
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80057d0:	7bfa      	ldrb	r2, [r7, #15]
 80057d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80057d4:	7bfa      	ldrb	r2, [r7, #15]
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	4613      	mov	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	4413      	add	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	440b      	add	r3, r1
 80057e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80057e6:	2200      	movs	r2, #0
 80057e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80057ea:	7bfa      	ldrb	r2, [r7, #15]
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	4613      	mov	r3, r2
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	440b      	add	r3, r1
 80057f8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005800:	7bfa      	ldrb	r2, [r7, #15]
 8005802:	6879      	ldr	r1, [r7, #4]
 8005804:	4613      	mov	r3, r2
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	4413      	add	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	440b      	add	r3, r1
 800580e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005816:	7bfa      	ldrb	r2, [r7, #15]
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	4613      	mov	r3, r2
 800581c:	00db      	lsls	r3, r3, #3
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	440b      	add	r3, r1
 8005824:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	3301      	adds	r3, #1
 8005830:	73fb      	strb	r3, [r7, #15]
 8005832:	7bfa      	ldrb	r2, [r7, #15]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	429a      	cmp	r2, r3
 800583a:	d3b5      	bcc.n	80057a8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	603b      	str	r3, [r7, #0]
 8005842:	687e      	ldr	r6, [r7, #4]
 8005844:	466d      	mov	r5, sp
 8005846:	f106 0410 	add.w	r4, r6, #16
 800584a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800584c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800584e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005852:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005856:	e885 0003 	stmia.w	r5, {r0, r1}
 800585a:	1d33      	adds	r3, r6, #4
 800585c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800585e:	6838      	ldr	r0, [r7, #0]
 8005860:	f006 f8d8 	bl	800ba14 <USB_DevInit>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d005      	beq.n	8005876 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2202      	movs	r2, #2
 800586e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e014      	b.n	80058a0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	2b01      	cmp	r3, #1
 800588c:	d102      	bne.n	8005894 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f80a 	bl	80058a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4618      	mov	r0, r3
 800589a:	f006 fa96 	bl	800bdca <USB_DevDisconnect>

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058d6:	4b05      	ldr	r3, [pc, #20]	; (80058ec <HAL_PCDEx_ActivateLPM+0x44>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	10000003 	.word	0x10000003

080058f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80058f8:	4b19      	ldr	r3, [pc, #100]	; (8005960 <HAL_PWREx_ConfigSupply+0x70>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b04      	cmp	r3, #4
 8005902:	d00a      	beq.n	800591a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005904:	4b16      	ldr	r3, [pc, #88]	; (8005960 <HAL_PWREx_ConfigSupply+0x70>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	429a      	cmp	r2, r3
 8005910:	d001      	beq.n	8005916 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e01f      	b.n	8005956 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	e01d      	b.n	8005956 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800591a:	4b11      	ldr	r3, [pc, #68]	; (8005960 <HAL_PWREx_ConfigSupply+0x70>)
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f023 0207 	bic.w	r2, r3, #7
 8005922:	490f      	ldr	r1, [pc, #60]	; (8005960 <HAL_PWREx_ConfigSupply+0x70>)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4313      	orrs	r3, r2
 8005928:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800592a:	f7fd f8c7 	bl	8002abc <HAL_GetTick>
 800592e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005930:	e009      	b.n	8005946 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005932:	f7fd f8c3 	bl	8002abc <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005940:	d901      	bls.n	8005946 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e007      	b.n	8005956 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005946:	4b06      	ldr	r3, [pc, #24]	; (8005960 <HAL_PWREx_ConfigSupply+0x70>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800594e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005952:	d1ee      	bne.n	8005932 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	58024800 	.word	0x58024800

08005964 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005964:	b480      	push	{r7}
 8005966:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005968:	4b05      	ldr	r3, [pc, #20]	; (8005980 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	4a04      	ldr	r2, [pc, #16]	; (8005980 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800596e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005972:	60d3      	str	r3, [r2, #12]
}
 8005974:	bf00      	nop
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	58024800 	.word	0x58024800

08005984 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b08c      	sub	sp, #48	; 0x30
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	f000 bc48 	b.w	8006228 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 8088 	beq.w	8005ab6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059a6:	4b99      	ldr	r3, [pc, #612]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80059b0:	4b96      	ldr	r3, [pc, #600]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 80059b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80059b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b8:	2b10      	cmp	r3, #16
 80059ba:	d007      	beq.n	80059cc <HAL_RCC_OscConfig+0x48>
 80059bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059be:	2b18      	cmp	r3, #24
 80059c0:	d111      	bne.n	80059e6 <HAL_RCC_OscConfig+0x62>
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d10c      	bne.n	80059e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059cc:	4b8f      	ldr	r3, [pc, #572]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d06d      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x130>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d169      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	f000 bc21 	b.w	8006228 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ee:	d106      	bne.n	80059fe <HAL_RCC_OscConfig+0x7a>
 80059f0:	4b86      	ldr	r3, [pc, #536]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a85      	ldr	r2, [pc, #532]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 80059f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	e02e      	b.n	8005a5c <HAL_RCC_OscConfig+0xd8>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10c      	bne.n	8005a20 <HAL_RCC_OscConfig+0x9c>
 8005a06:	4b81      	ldr	r3, [pc, #516]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a80      	ldr	r2, [pc, #512]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	4b7e      	ldr	r3, [pc, #504]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a7d      	ldr	r2, [pc, #500]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	e01d      	b.n	8005a5c <HAL_RCC_OscConfig+0xd8>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a28:	d10c      	bne.n	8005a44 <HAL_RCC_OscConfig+0xc0>
 8005a2a:	4b78      	ldr	r3, [pc, #480]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a77      	ldr	r2, [pc, #476]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a34:	6013      	str	r3, [r2, #0]
 8005a36:	4b75      	ldr	r3, [pc, #468]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a74      	ldr	r2, [pc, #464]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	e00b      	b.n	8005a5c <HAL_RCC_OscConfig+0xd8>
 8005a44:	4b71      	ldr	r3, [pc, #452]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a70      	ldr	r2, [pc, #448]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	4b6e      	ldr	r3, [pc, #440]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a6d      	ldr	r2, [pc, #436]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d013      	beq.n	8005a8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a64:	f7fd f82a 	bl	8002abc <HAL_GetTick>
 8005a68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a6c:	f7fd f826 	bl	8002abc <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b64      	cmp	r3, #100	; 0x64
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e3d4      	b.n	8006228 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a7e:	4b63      	ldr	r3, [pc, #396]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0f0      	beq.n	8005a6c <HAL_RCC_OscConfig+0xe8>
 8005a8a:	e014      	b.n	8005ab6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8c:	f7fd f816 	bl	8002abc <HAL_GetTick>
 8005a90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a92:	e008      	b.n	8005aa6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a94:	f7fd f812 	bl	8002abc <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b64      	cmp	r3, #100	; 0x64
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e3c0      	b.n	8006228 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005aa6:	4b59      	ldr	r3, [pc, #356]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1f0      	bne.n	8005a94 <HAL_RCC_OscConfig+0x110>
 8005ab2:	e000      	b.n	8005ab6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 80ca 	beq.w	8005c58 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ac4:	4b51      	ldr	r3, [pc, #324]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005acc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ace:	4b4f      	ldr	r3, [pc, #316]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d007      	beq.n	8005aea <HAL_RCC_OscConfig+0x166>
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	2b18      	cmp	r3, #24
 8005ade:	d156      	bne.n	8005b8e <HAL_RCC_OscConfig+0x20a>
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d151      	bne.n	8005b8e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aea:	4b48      	ldr	r3, [pc, #288]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0304 	and.w	r3, r3, #4
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <HAL_RCC_OscConfig+0x17e>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e392      	b.n	8006228 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b02:	4b42      	ldr	r3, [pc, #264]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f023 0219 	bic.w	r2, r3, #25
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	493f      	ldr	r1, [pc, #252]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b14:	f7fc ffd2 	bl	8002abc <HAL_GetTick>
 8005b18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b1c:	f7fc ffce 	bl	8002abc <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e37c      	b.n	8006228 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b2e:	4b37      	ldr	r3, [pc, #220]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0304 	and.w	r3, r3, #4
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0f0      	beq.n	8005b1c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b3a:	f7fc ffef 	bl	8002b1c <HAL_GetREVID>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d817      	bhi.n	8005b78 <HAL_RCC_OscConfig+0x1f4>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	2b40      	cmp	r3, #64	; 0x40
 8005b4e:	d108      	bne.n	8005b62 <HAL_RCC_OscConfig+0x1de>
 8005b50:	4b2e      	ldr	r3, [pc, #184]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005b58:	4a2c      	ldr	r2, [pc, #176]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b5e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b60:	e07a      	b.n	8005c58 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b62:	4b2a      	ldr	r3, [pc, #168]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	031b      	lsls	r3, r3, #12
 8005b70:	4926      	ldr	r1, [pc, #152]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b76:	e06f      	b.n	8005c58 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b78:	4b24      	ldr	r3, [pc, #144]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	061b      	lsls	r3, r3, #24
 8005b86:	4921      	ldr	r1, [pc, #132]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b8c:	e064      	b.n	8005c58 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d047      	beq.n	8005c26 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b96:	4b1d      	ldr	r3, [pc, #116]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f023 0219 	bic.w	r2, r3, #25
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	491a      	ldr	r1, [pc, #104]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba8:	f7fc ff88 	bl	8002abc <HAL_GetTick>
 8005bac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bb0:	f7fc ff84 	bl	8002abc <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e332      	b.n	8006228 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bc2:	4b12      	ldr	r3, [pc, #72]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0304 	and.w	r3, r3, #4
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d0f0      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bce:	f7fc ffa5 	bl	8002b1c <HAL_GetREVID>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d819      	bhi.n	8005c10 <HAL_RCC_OscConfig+0x28c>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	2b40      	cmp	r3, #64	; 0x40
 8005be2:	d108      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x272>
 8005be4:	4b09      	ldr	r3, [pc, #36]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005bec:	4a07      	ldr	r2, [pc, #28]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bf2:	6053      	str	r3, [r2, #4]
 8005bf4:	e030      	b.n	8005c58 <HAL_RCC_OscConfig+0x2d4>
 8005bf6:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	031b      	lsls	r3, r3, #12
 8005c04:	4901      	ldr	r1, [pc, #4]	; (8005c0c <HAL_RCC_OscConfig+0x288>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	604b      	str	r3, [r1, #4]
 8005c0a:	e025      	b.n	8005c58 <HAL_RCC_OscConfig+0x2d4>
 8005c0c:	58024400 	.word	0x58024400
 8005c10:	4b9a      	ldr	r3, [pc, #616]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	061b      	lsls	r3, r3, #24
 8005c1e:	4997      	ldr	r1, [pc, #604]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	604b      	str	r3, [r1, #4]
 8005c24:	e018      	b.n	8005c58 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c26:	4b95      	ldr	r3, [pc, #596]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a94      	ldr	r2, [pc, #592]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005c2c:	f023 0301 	bic.w	r3, r3, #1
 8005c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c32:	f7fc ff43 	bl	8002abc <HAL_GetTick>
 8005c36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c38:	e008      	b.n	8005c4c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c3a:	f7fc ff3f 	bl	8002abc <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e2ed      	b.n	8006228 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c4c:	4b8b      	ldr	r3, [pc, #556]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0304 	and.w	r3, r3, #4
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1f0      	bne.n	8005c3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0310 	and.w	r3, r3, #16
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 80a9 	beq.w	8005db8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c66:	4b85      	ldr	r3, [pc, #532]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c6e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c70:	4b82      	ldr	r3, [pc, #520]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c74:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d007      	beq.n	8005c8c <HAL_RCC_OscConfig+0x308>
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	2b18      	cmp	r3, #24
 8005c80:	d13a      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x374>
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f003 0303 	and.w	r3, r3, #3
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d135      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c8c:	4b7b      	ldr	r3, [pc, #492]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d005      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x320>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	2b80      	cmp	r3, #128	; 0x80
 8005c9e:	d001      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e2c1      	b.n	8006228 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ca4:	f7fc ff3a 	bl	8002b1c <HAL_GetREVID>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	f241 0203 	movw	r2, #4099	; 0x1003
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d817      	bhi.n	8005ce2 <HAL_RCC_OscConfig+0x35e>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	2b20      	cmp	r3, #32
 8005cb8:	d108      	bne.n	8005ccc <HAL_RCC_OscConfig+0x348>
 8005cba:	4b70      	ldr	r3, [pc, #448]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005cc2:	4a6e      	ldr	r2, [pc, #440]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005cc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cc8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005cca:	e075      	b.n	8005db8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ccc:	4b6b      	ldr	r3, [pc, #428]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	069b      	lsls	r3, r3, #26
 8005cda:	4968      	ldr	r1, [pc, #416]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ce0:	e06a      	b.n	8005db8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ce2:	4b66      	ldr	r3, [pc, #408]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	061b      	lsls	r3, r3, #24
 8005cf0:	4962      	ldr	r1, [pc, #392]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005cf6:	e05f      	b.n	8005db8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d042      	beq.n	8005d86 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005d00:	4b5e      	ldr	r3, [pc, #376]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a5d      	ldr	r2, [pc, #372]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0c:	f7fc fed6 	bl	8002abc <HAL_GetTick>
 8005d10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d12:	e008      	b.n	8005d26 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d14:	f7fc fed2 	bl	8002abc <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e280      	b.n	8006228 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d26:	4b55      	ldr	r3, [pc, #340]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0f0      	beq.n	8005d14 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d32:	f7fc fef3 	bl	8002b1c <HAL_GetREVID>
 8005d36:	4603      	mov	r3, r0
 8005d38:	f241 0203 	movw	r2, #4099	; 0x1003
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d817      	bhi.n	8005d70 <HAL_RCC_OscConfig+0x3ec>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	d108      	bne.n	8005d5a <HAL_RCC_OscConfig+0x3d6>
 8005d48:	4b4c      	ldr	r3, [pc, #304]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005d50:	4a4a      	ldr	r2, [pc, #296]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005d52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d56:	6053      	str	r3, [r2, #4]
 8005d58:	e02e      	b.n	8005db8 <HAL_RCC_OscConfig+0x434>
 8005d5a:	4b48      	ldr	r3, [pc, #288]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	069b      	lsls	r3, r3, #26
 8005d68:	4944      	ldr	r1, [pc, #272]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	604b      	str	r3, [r1, #4]
 8005d6e:	e023      	b.n	8005db8 <HAL_RCC_OscConfig+0x434>
 8005d70:	4b42      	ldr	r3, [pc, #264]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	061b      	lsls	r3, r3, #24
 8005d7e:	493f      	ldr	r1, [pc, #252]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	60cb      	str	r3, [r1, #12]
 8005d84:	e018      	b.n	8005db8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005d86:	4b3d      	ldr	r3, [pc, #244]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a3c      	ldr	r2, [pc, #240]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d92:	f7fc fe93 	bl	8002abc <HAL_GetTick>
 8005d96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d98:	e008      	b.n	8005dac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d9a:	f7fc fe8f 	bl	8002abc <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d901      	bls.n	8005dac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e23d      	b.n	8006228 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005dac:	4b33      	ldr	r3, [pc, #204]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1f0      	bne.n	8005d9a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0308 	and.w	r3, r3, #8
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d036      	beq.n	8005e32 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d019      	beq.n	8005e00 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dcc:	4b2b      	ldr	r3, [pc, #172]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dd0:	4a2a      	ldr	r2, [pc, #168]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005dd2:	f043 0301 	orr.w	r3, r3, #1
 8005dd6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd8:	f7fc fe70 	bl	8002abc <HAL_GetTick>
 8005ddc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005de0:	f7fc fe6c 	bl	8002abc <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e21a      	b.n	8006228 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005df2:	4b22      	ldr	r3, [pc, #136]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0f0      	beq.n	8005de0 <HAL_RCC_OscConfig+0x45c>
 8005dfe:	e018      	b.n	8005e32 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e00:	4b1e      	ldr	r3, [pc, #120]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e04:	4a1d      	ldr	r2, [pc, #116]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005e06:	f023 0301 	bic.w	r3, r3, #1
 8005e0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e0c:	f7fc fe56 	bl	8002abc <HAL_GetTick>
 8005e10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e12:	e008      	b.n	8005e26 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e14:	f7fc fe52 	bl	8002abc <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e200      	b.n	8006228 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e26:	4b15      	ldr	r3, [pc, #84]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1f0      	bne.n	8005e14 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d039      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d01c      	beq.n	8005e80 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e46:	4b0d      	ldr	r3, [pc, #52]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a0c      	ldr	r2, [pc, #48]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005e4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e52:	f7fc fe33 	bl	8002abc <HAL_GetTick>
 8005e56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e58:	e008      	b.n	8005e6c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e5a:	f7fc fe2f 	bl	8002abc <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e1dd      	b.n	8006228 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e6c:	4b03      	ldr	r3, [pc, #12]	; (8005e7c <HAL_RCC_OscConfig+0x4f8>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0f0      	beq.n	8005e5a <HAL_RCC_OscConfig+0x4d6>
 8005e78:	e01b      	b.n	8005eb2 <HAL_RCC_OscConfig+0x52e>
 8005e7a:	bf00      	nop
 8005e7c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e80:	4b9b      	ldr	r3, [pc, #620]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a9a      	ldr	r2, [pc, #616]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005e86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e8c:	f7fc fe16 	bl	8002abc <HAL_GetTick>
 8005e90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e94:	f7fc fe12 	bl	8002abc <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e1c0      	b.n	8006228 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ea6:	4b92      	ldr	r3, [pc, #584]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1f0      	bne.n	8005e94 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 8081 	beq.w	8005fc2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ec0:	4b8c      	ldr	r3, [pc, #560]	; (80060f4 <HAL_RCC_OscConfig+0x770>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a8b      	ldr	r2, [pc, #556]	; (80060f4 <HAL_RCC_OscConfig+0x770>)
 8005ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ecc:	f7fc fdf6 	bl	8002abc <HAL_GetTick>
 8005ed0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ed2:	e008      	b.n	8005ee6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ed4:	f7fc fdf2 	bl	8002abc <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b64      	cmp	r3, #100	; 0x64
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e1a0      	b.n	8006228 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ee6:	4b83      	ldr	r3, [pc, #524]	; (80060f4 <HAL_RCC_OscConfig+0x770>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0f0      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d106      	bne.n	8005f08 <HAL_RCC_OscConfig+0x584>
 8005efa:	4b7d      	ldr	r3, [pc, #500]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efe:	4a7c      	ldr	r2, [pc, #496]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005f00:	f043 0301 	orr.w	r3, r3, #1
 8005f04:	6713      	str	r3, [r2, #112]	; 0x70
 8005f06:	e02d      	b.n	8005f64 <HAL_RCC_OscConfig+0x5e0>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10c      	bne.n	8005f2a <HAL_RCC_OscConfig+0x5a6>
 8005f10:	4b77      	ldr	r3, [pc, #476]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f14:	4a76      	ldr	r2, [pc, #472]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005f16:	f023 0301 	bic.w	r3, r3, #1
 8005f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f1c:	4b74      	ldr	r3, [pc, #464]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f20:	4a73      	ldr	r2, [pc, #460]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005f22:	f023 0304 	bic.w	r3, r3, #4
 8005f26:	6713      	str	r3, [r2, #112]	; 0x70
 8005f28:	e01c      	b.n	8005f64 <HAL_RCC_OscConfig+0x5e0>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	2b05      	cmp	r3, #5
 8005f30:	d10c      	bne.n	8005f4c <HAL_RCC_OscConfig+0x5c8>
 8005f32:	4b6f      	ldr	r3, [pc, #444]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f36:	4a6e      	ldr	r2, [pc, #440]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005f38:	f043 0304 	orr.w	r3, r3, #4
 8005f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f3e:	4b6c      	ldr	r3, [pc, #432]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f42:	4a6b      	ldr	r2, [pc, #428]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005f44:	f043 0301 	orr.w	r3, r3, #1
 8005f48:	6713      	str	r3, [r2, #112]	; 0x70
 8005f4a:	e00b      	b.n	8005f64 <HAL_RCC_OscConfig+0x5e0>
 8005f4c:	4b68      	ldr	r3, [pc, #416]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f50:	4a67      	ldr	r2, [pc, #412]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005f52:	f023 0301 	bic.w	r3, r3, #1
 8005f56:	6713      	str	r3, [r2, #112]	; 0x70
 8005f58:	4b65      	ldr	r3, [pc, #404]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5c:	4a64      	ldr	r2, [pc, #400]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005f5e:	f023 0304 	bic.w	r3, r3, #4
 8005f62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d015      	beq.n	8005f98 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f6c:	f7fc fda6 	bl	8002abc <HAL_GetTick>
 8005f70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f72:	e00a      	b.n	8005f8a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f74:	f7fc fda2 	bl	8002abc <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e14e      	b.n	8006228 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f8a:	4b59      	ldr	r3, [pc, #356]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0ee      	beq.n	8005f74 <HAL_RCC_OscConfig+0x5f0>
 8005f96:	e014      	b.n	8005fc2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f98:	f7fc fd90 	bl	8002abc <HAL_GetTick>
 8005f9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f9e:	e00a      	b.n	8005fb6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fa0:	f7fc fd8c 	bl	8002abc <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e138      	b.n	8006228 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005fb6:	4b4e      	ldr	r3, [pc, #312]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1ee      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 812d 	beq.w	8006226 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005fcc:	4b48      	ldr	r3, [pc, #288]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fd4:	2b18      	cmp	r3, #24
 8005fd6:	f000 80bd 	beq.w	8006154 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	f040 809e 	bne.w	8006120 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fe4:	4b42      	ldr	r3, [pc, #264]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a41      	ldr	r2, [pc, #260]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8005fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff0:	f7fc fd64 	bl	8002abc <HAL_GetTick>
 8005ff4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ff6:	e008      	b.n	800600a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ff8:	f7fc fd60 	bl	8002abc <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	2b02      	cmp	r3, #2
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e10e      	b.n	8006228 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800600a:	4b39      	ldr	r3, [pc, #228]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1f0      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006016:	4b36      	ldr	r3, [pc, #216]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8006018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800601a:	4b37      	ldr	r3, [pc, #220]	; (80060f8 <HAL_RCC_OscConfig+0x774>)
 800601c:	4013      	ands	r3, r2
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006026:	0112      	lsls	r2, r2, #4
 8006028:	430a      	orrs	r2, r1
 800602a:	4931      	ldr	r1, [pc, #196]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 800602c:	4313      	orrs	r3, r2
 800602e:	628b      	str	r3, [r1, #40]	; 0x28
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006034:	3b01      	subs	r3, #1
 8006036:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603e:	3b01      	subs	r3, #1
 8006040:	025b      	lsls	r3, r3, #9
 8006042:	b29b      	uxth	r3, r3
 8006044:	431a      	orrs	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	3b01      	subs	r3, #1
 800604c:	041b      	lsls	r3, r3, #16
 800604e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006058:	3b01      	subs	r3, #1
 800605a:	061b      	lsls	r3, r3, #24
 800605c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006060:	4923      	ldr	r1, [pc, #140]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8006062:	4313      	orrs	r3, r2
 8006064:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006066:	4b22      	ldr	r3, [pc, #136]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	4a21      	ldr	r2, [pc, #132]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 800606c:	f023 0301 	bic.w	r3, r3, #1
 8006070:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006072:	4b1f      	ldr	r3, [pc, #124]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8006074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006076:	4b21      	ldr	r3, [pc, #132]	; (80060fc <HAL_RCC_OscConfig+0x778>)
 8006078:	4013      	ands	r3, r2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800607e:	00d2      	lsls	r2, r2, #3
 8006080:	491b      	ldr	r1, [pc, #108]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8006082:	4313      	orrs	r3, r2
 8006084:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006086:	4b1a      	ldr	r3, [pc, #104]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	f023 020c 	bic.w	r2, r3, #12
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006092:	4917      	ldr	r1, [pc, #92]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 8006094:	4313      	orrs	r3, r2
 8006096:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006098:	4b15      	ldr	r3, [pc, #84]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 800609a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609c:	f023 0202 	bic.w	r2, r3, #2
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a4:	4912      	ldr	r1, [pc, #72]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80060aa:	4b11      	ldr	r3, [pc, #68]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 80060ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ae:	4a10      	ldr	r2, [pc, #64]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 80060b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060b6:	4b0e      	ldr	r3, [pc, #56]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 80060b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ba:	4a0d      	ldr	r2, [pc, #52]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 80060bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80060c2:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	4a0a      	ldr	r2, [pc, #40]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 80060c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80060ce:	4b08      	ldr	r3, [pc, #32]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 80060d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d2:	4a07      	ldr	r2, [pc, #28]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 80060d4:	f043 0301 	orr.w	r3, r3, #1
 80060d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060da:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a04      	ldr	r2, [pc, #16]	; (80060f0 <HAL_RCC_OscConfig+0x76c>)
 80060e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e6:	f7fc fce9 	bl	8002abc <HAL_GetTick>
 80060ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060ec:	e011      	b.n	8006112 <HAL_RCC_OscConfig+0x78e>
 80060ee:	bf00      	nop
 80060f0:	58024400 	.word	0x58024400
 80060f4:	58024800 	.word	0x58024800
 80060f8:	fffffc0c 	.word	0xfffffc0c
 80060fc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006100:	f7fc fcdc 	bl	8002abc <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e08a      	b.n	8006228 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006112:	4b47      	ldr	r3, [pc, #284]	; (8006230 <HAL_RCC_OscConfig+0x8ac>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCC_OscConfig+0x77c>
 800611e:	e082      	b.n	8006226 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006120:	4b43      	ldr	r3, [pc, #268]	; (8006230 <HAL_RCC_OscConfig+0x8ac>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a42      	ldr	r2, [pc, #264]	; (8006230 <HAL_RCC_OscConfig+0x8ac>)
 8006126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800612a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800612c:	f7fc fcc6 	bl	8002abc <HAL_GetTick>
 8006130:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006134:	f7fc fcc2 	bl	8002abc <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e070      	b.n	8006228 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006146:	4b3a      	ldr	r3, [pc, #232]	; (8006230 <HAL_RCC_OscConfig+0x8ac>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f0      	bne.n	8006134 <HAL_RCC_OscConfig+0x7b0>
 8006152:	e068      	b.n	8006226 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006154:	4b36      	ldr	r3, [pc, #216]	; (8006230 <HAL_RCC_OscConfig+0x8ac>)
 8006156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006158:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800615a:	4b35      	ldr	r3, [pc, #212]	; (8006230 <HAL_RCC_OscConfig+0x8ac>)
 800615c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	2b01      	cmp	r3, #1
 8006166:	d031      	beq.n	80061cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f003 0203 	and.w	r2, r3, #3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006172:	429a      	cmp	r2, r3
 8006174:	d12a      	bne.n	80061cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	091b      	lsrs	r3, r3, #4
 800617a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006182:	429a      	cmp	r2, r3
 8006184:	d122      	bne.n	80061cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006190:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006192:	429a      	cmp	r2, r3
 8006194:	d11a      	bne.n	80061cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	0a5b      	lsrs	r3, r3, #9
 800619a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d111      	bne.n	80061cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	0c1b      	lsrs	r3, r3, #16
 80061ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d108      	bne.n	80061cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	0e1b      	lsrs	r3, r3, #24
 80061be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d001      	beq.n	80061d0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e02b      	b.n	8006228 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80061d0:	4b17      	ldr	r3, [pc, #92]	; (8006230 <HAL_RCC_OscConfig+0x8ac>)
 80061d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d4:	08db      	lsrs	r3, r3, #3
 80061d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061da:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d01f      	beq.n	8006226 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80061e6:	4b12      	ldr	r3, [pc, #72]	; (8006230 <HAL_RCC_OscConfig+0x8ac>)
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	4a11      	ldr	r2, [pc, #68]	; (8006230 <HAL_RCC_OscConfig+0x8ac>)
 80061ec:	f023 0301 	bic.w	r3, r3, #1
 80061f0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80061f2:	f7fc fc63 	bl	8002abc <HAL_GetTick>
 80061f6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80061f8:	bf00      	nop
 80061fa:	f7fc fc5f 	bl	8002abc <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	4293      	cmp	r3, r2
 8006204:	d0f9      	beq.n	80061fa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006206:	4b0a      	ldr	r3, [pc, #40]	; (8006230 <HAL_RCC_OscConfig+0x8ac>)
 8006208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800620a:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <HAL_RCC_OscConfig+0x8b0>)
 800620c:	4013      	ands	r3, r2
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006212:	00d2      	lsls	r2, r2, #3
 8006214:	4906      	ldr	r1, [pc, #24]	; (8006230 <HAL_RCC_OscConfig+0x8ac>)
 8006216:	4313      	orrs	r3, r2
 8006218:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800621a:	4b05      	ldr	r3, [pc, #20]	; (8006230 <HAL_RCC_OscConfig+0x8ac>)
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	4a04      	ldr	r2, [pc, #16]	; (8006230 <HAL_RCC_OscConfig+0x8ac>)
 8006220:	f043 0301 	orr.w	r3, r3, #1
 8006224:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3730      	adds	r7, #48	; 0x30
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	58024400 	.word	0x58024400
 8006234:	ffff0007 	.word	0xffff0007

08006238 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e19c      	b.n	8006586 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800624c:	4b8a      	ldr	r3, [pc, #552]	; (8006478 <HAL_RCC_ClockConfig+0x240>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 030f 	and.w	r3, r3, #15
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d910      	bls.n	800627c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800625a:	4b87      	ldr	r3, [pc, #540]	; (8006478 <HAL_RCC_ClockConfig+0x240>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f023 020f 	bic.w	r2, r3, #15
 8006262:	4985      	ldr	r1, [pc, #532]	; (8006478 <HAL_RCC_ClockConfig+0x240>)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	4313      	orrs	r3, r2
 8006268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800626a:	4b83      	ldr	r3, [pc, #524]	; (8006478 <HAL_RCC_ClockConfig+0x240>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 030f 	and.w	r3, r3, #15
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	429a      	cmp	r2, r3
 8006276:	d001      	beq.n	800627c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e184      	b.n	8006586 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b00      	cmp	r3, #0
 8006286:	d010      	beq.n	80062aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	691a      	ldr	r2, [r3, #16]
 800628c:	4b7b      	ldr	r3, [pc, #492]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006294:	429a      	cmp	r2, r3
 8006296:	d908      	bls.n	80062aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006298:	4b78      	ldr	r3, [pc, #480]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	4975      	ldr	r1, [pc, #468]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0308 	and.w	r3, r3, #8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d010      	beq.n	80062d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	695a      	ldr	r2, [r3, #20]
 80062ba:	4b70      	ldr	r3, [pc, #448]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d908      	bls.n	80062d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062c6:	4b6d      	ldr	r3, [pc, #436]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	496a      	ldr	r1, [pc, #424]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0310 	and.w	r3, r3, #16
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d010      	beq.n	8006306 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699a      	ldr	r2, [r3, #24]
 80062e8:	4b64      	ldr	r3, [pc, #400]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d908      	bls.n	8006306 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062f4:	4b61      	ldr	r3, [pc, #388]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	495e      	ldr	r1, [pc, #376]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 8006302:	4313      	orrs	r3, r2
 8006304:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0320 	and.w	r3, r3, #32
 800630e:	2b00      	cmp	r3, #0
 8006310:	d010      	beq.n	8006334 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69da      	ldr	r2, [r3, #28]
 8006316:	4b59      	ldr	r3, [pc, #356]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800631e:	429a      	cmp	r2, r3
 8006320:	d908      	bls.n	8006334 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006322:	4b56      	ldr	r3, [pc, #344]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	4953      	ldr	r1, [pc, #332]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 8006330:	4313      	orrs	r3, r2
 8006332:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d010      	beq.n	8006362 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68da      	ldr	r2, [r3, #12]
 8006344:	4b4d      	ldr	r3, [pc, #308]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	f003 030f 	and.w	r3, r3, #15
 800634c:	429a      	cmp	r2, r3
 800634e:	d908      	bls.n	8006362 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006350:	4b4a      	ldr	r3, [pc, #296]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	f023 020f 	bic.w	r2, r3, #15
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	4947      	ldr	r1, [pc, #284]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 800635e:	4313      	orrs	r3, r2
 8006360:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d055      	beq.n	800641a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800636e:	4b43      	ldr	r3, [pc, #268]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	4940      	ldr	r1, [pc, #256]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 800637c:	4313      	orrs	r3, r2
 800637e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2b02      	cmp	r3, #2
 8006386:	d107      	bne.n	8006398 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006388:	4b3c      	ldr	r3, [pc, #240]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d121      	bne.n	80063d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e0f6      	b.n	8006586 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b03      	cmp	r3, #3
 800639e:	d107      	bne.n	80063b0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063a0:	4b36      	ldr	r3, [pc, #216]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d115      	bne.n	80063d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e0ea      	b.n	8006586 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d107      	bne.n	80063c8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063b8:	4b30      	ldr	r3, [pc, #192]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d109      	bne.n	80063d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e0de      	b.n	8006586 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063c8:	4b2c      	ldr	r3, [pc, #176]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e0d6      	b.n	8006586 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063d8:	4b28      	ldr	r3, [pc, #160]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	f023 0207 	bic.w	r2, r3, #7
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	4925      	ldr	r1, [pc, #148]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063ea:	f7fc fb67 	bl	8002abc <HAL_GetTick>
 80063ee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063f0:	e00a      	b.n	8006408 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063f2:	f7fc fb63 	bl	8002abc <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006400:	4293      	cmp	r3, r2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e0be      	b.n	8006586 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006408:	4b1c      	ldr	r3, [pc, #112]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	429a      	cmp	r2, r3
 8006418:	d1eb      	bne.n	80063f2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d010      	beq.n	8006448 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68da      	ldr	r2, [r3, #12]
 800642a:	4b14      	ldr	r3, [pc, #80]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	429a      	cmp	r2, r3
 8006434:	d208      	bcs.n	8006448 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006436:	4b11      	ldr	r3, [pc, #68]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	f023 020f 	bic.w	r2, r3, #15
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	490e      	ldr	r1, [pc, #56]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 8006444:	4313      	orrs	r3, r2
 8006446:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006448:	4b0b      	ldr	r3, [pc, #44]	; (8006478 <HAL_RCC_ClockConfig+0x240>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d214      	bcs.n	8006480 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006456:	4b08      	ldr	r3, [pc, #32]	; (8006478 <HAL_RCC_ClockConfig+0x240>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f023 020f 	bic.w	r2, r3, #15
 800645e:	4906      	ldr	r1, [pc, #24]	; (8006478 <HAL_RCC_ClockConfig+0x240>)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	4313      	orrs	r3, r2
 8006464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006466:	4b04      	ldr	r3, [pc, #16]	; (8006478 <HAL_RCC_ClockConfig+0x240>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d005      	beq.n	8006480 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e086      	b.n	8006586 <HAL_RCC_ClockConfig+0x34e>
 8006478:	52002000 	.word	0x52002000
 800647c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d010      	beq.n	80064ae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	691a      	ldr	r2, [r3, #16]
 8006490:	4b3f      	ldr	r3, [pc, #252]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006498:	429a      	cmp	r2, r3
 800649a:	d208      	bcs.n	80064ae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800649c:	4b3c      	ldr	r3, [pc, #240]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	4939      	ldr	r1, [pc, #228]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0308 	and.w	r3, r3, #8
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d010      	beq.n	80064dc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	4b34      	ldr	r3, [pc, #208]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d208      	bcs.n	80064dc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064ca:	4b31      	ldr	r3, [pc, #196]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	492e      	ldr	r1, [pc, #184]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0310 	and.w	r3, r3, #16
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d010      	beq.n	800650a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	699a      	ldr	r2, [r3, #24]
 80064ec:	4b28      	ldr	r3, [pc, #160]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d208      	bcs.n	800650a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064f8:	4b25      	ldr	r3, [pc, #148]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 80064fa:	69db      	ldr	r3, [r3, #28]
 80064fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	4922      	ldr	r1, [pc, #136]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 8006506:	4313      	orrs	r3, r2
 8006508:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	2b00      	cmp	r3, #0
 8006514:	d010      	beq.n	8006538 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	69da      	ldr	r2, [r3, #28]
 800651a:	4b1d      	ldr	r3, [pc, #116]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006522:	429a      	cmp	r2, r3
 8006524:	d208      	bcs.n	8006538 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006526:	4b1a      	ldr	r3, [pc, #104]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	4917      	ldr	r1, [pc, #92]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 8006534:	4313      	orrs	r3, r2
 8006536:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006538:	f000 f834 	bl	80065a4 <HAL_RCC_GetSysClockFreq>
 800653c:	4602      	mov	r2, r0
 800653e:	4b14      	ldr	r3, [pc, #80]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	0a1b      	lsrs	r3, r3, #8
 8006544:	f003 030f 	and.w	r3, r3, #15
 8006548:	4912      	ldr	r1, [pc, #72]	; (8006594 <HAL_RCC_ClockConfig+0x35c>)
 800654a:	5ccb      	ldrb	r3, [r1, r3]
 800654c:	f003 031f 	and.w	r3, r3, #31
 8006550:	fa22 f303 	lsr.w	r3, r2, r3
 8006554:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006556:	4b0e      	ldr	r3, [pc, #56]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	f003 030f 	and.w	r3, r3, #15
 800655e:	4a0d      	ldr	r2, [pc, #52]	; (8006594 <HAL_RCC_ClockConfig+0x35c>)
 8006560:	5cd3      	ldrb	r3, [r2, r3]
 8006562:	f003 031f 	and.w	r3, r3, #31
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	fa22 f303 	lsr.w	r3, r2, r3
 800656c:	4a0a      	ldr	r2, [pc, #40]	; (8006598 <HAL_RCC_ClockConfig+0x360>)
 800656e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006570:	4a0a      	ldr	r2, [pc, #40]	; (800659c <HAL_RCC_ClockConfig+0x364>)
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006576:	4b0a      	ldr	r3, [pc, #40]	; (80065a0 <HAL_RCC_ClockConfig+0x368>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4618      	mov	r0, r3
 800657c:	f7fc fa54 	bl	8002a28 <HAL_InitTick>
 8006580:	4603      	mov	r3, r0
 8006582:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006584:	7bfb      	ldrb	r3, [r7, #15]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	58024400 	.word	0x58024400
 8006594:	0800bf70 	.word	0x0800bf70
 8006598:	24000004 	.word	0x24000004
 800659c:	24000000 	.word	0x24000000
 80065a0:	24000008 	.word	0x24000008

080065a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b089      	sub	sp, #36	; 0x24
 80065a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065aa:	4bb3      	ldr	r3, [pc, #716]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065b2:	2b18      	cmp	r3, #24
 80065b4:	f200 8155 	bhi.w	8006862 <HAL_RCC_GetSysClockFreq+0x2be>
 80065b8:	a201      	add	r2, pc, #4	; (adr r2, 80065c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80065ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065be:	bf00      	nop
 80065c0:	08006625 	.word	0x08006625
 80065c4:	08006863 	.word	0x08006863
 80065c8:	08006863 	.word	0x08006863
 80065cc:	08006863 	.word	0x08006863
 80065d0:	08006863 	.word	0x08006863
 80065d4:	08006863 	.word	0x08006863
 80065d8:	08006863 	.word	0x08006863
 80065dc:	08006863 	.word	0x08006863
 80065e0:	0800664b 	.word	0x0800664b
 80065e4:	08006863 	.word	0x08006863
 80065e8:	08006863 	.word	0x08006863
 80065ec:	08006863 	.word	0x08006863
 80065f0:	08006863 	.word	0x08006863
 80065f4:	08006863 	.word	0x08006863
 80065f8:	08006863 	.word	0x08006863
 80065fc:	08006863 	.word	0x08006863
 8006600:	08006651 	.word	0x08006651
 8006604:	08006863 	.word	0x08006863
 8006608:	08006863 	.word	0x08006863
 800660c:	08006863 	.word	0x08006863
 8006610:	08006863 	.word	0x08006863
 8006614:	08006863 	.word	0x08006863
 8006618:	08006863 	.word	0x08006863
 800661c:	08006863 	.word	0x08006863
 8006620:	08006657 	.word	0x08006657
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006624:	4b94      	ldr	r3, [pc, #592]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0320 	and.w	r3, r3, #32
 800662c:	2b00      	cmp	r3, #0
 800662e:	d009      	beq.n	8006644 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006630:	4b91      	ldr	r3, [pc, #580]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	08db      	lsrs	r3, r3, #3
 8006636:	f003 0303 	and.w	r3, r3, #3
 800663a:	4a90      	ldr	r2, [pc, #576]	; (800687c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800663c:	fa22 f303 	lsr.w	r3, r2, r3
 8006640:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006642:	e111      	b.n	8006868 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006644:	4b8d      	ldr	r3, [pc, #564]	; (800687c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006646:	61bb      	str	r3, [r7, #24]
      break;
 8006648:	e10e      	b.n	8006868 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800664a:	4b8d      	ldr	r3, [pc, #564]	; (8006880 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800664c:	61bb      	str	r3, [r7, #24]
      break;
 800664e:	e10b      	b.n	8006868 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006650:	4b8c      	ldr	r3, [pc, #560]	; (8006884 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006652:	61bb      	str	r3, [r7, #24]
      break;
 8006654:	e108      	b.n	8006868 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006656:	4b88      	ldr	r3, [pc, #544]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665a:	f003 0303 	and.w	r3, r3, #3
 800665e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006660:	4b85      	ldr	r3, [pc, #532]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006664:	091b      	lsrs	r3, r3, #4
 8006666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800666a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800666c:	4b82      	ldr	r3, [pc, #520]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006676:	4b80      	ldr	r3, [pc, #512]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667a:	08db      	lsrs	r3, r3, #3
 800667c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	fb02 f303 	mul.w	r3, r2, r3
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 80e1 	beq.w	800685c <HAL_RCC_GetSysClockFreq+0x2b8>
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b02      	cmp	r3, #2
 800669e:	f000 8083 	beq.w	80067a8 <HAL_RCC_GetSysClockFreq+0x204>
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	f200 80a1 	bhi.w	80067ec <HAL_RCC_GetSysClockFreq+0x248>
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <HAL_RCC_GetSysClockFreq+0x114>
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d056      	beq.n	8006764 <HAL_RCC_GetSysClockFreq+0x1c0>
 80066b6:	e099      	b.n	80067ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066b8:	4b6f      	ldr	r3, [pc, #444]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0320 	and.w	r3, r3, #32
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d02d      	beq.n	8006720 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066c4:	4b6c      	ldr	r3, [pc, #432]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	08db      	lsrs	r3, r3, #3
 80066ca:	f003 0303 	and.w	r3, r3, #3
 80066ce:	4a6b      	ldr	r2, [pc, #428]	; (800687c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066d0:	fa22 f303 	lsr.w	r3, r2, r3
 80066d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	ee07 3a90 	vmov	s15, r3
 80066dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	ee07 3a90 	vmov	s15, r3
 80066e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ee:	4b62      	ldr	r3, [pc, #392]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006702:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006888 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800670a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800670e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800671a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800671e:	e087      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800672a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800688c <HAL_RCC_GetSysClockFreq+0x2e8>
 800672e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006732:	4b51      	ldr	r3, [pc, #324]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800673a:	ee07 3a90 	vmov	s15, r3
 800673e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006742:	ed97 6a02 	vldr	s12, [r7, #8]
 8006746:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006888 <HAL_RCC_GetSysClockFreq+0x2e4>
 800674a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800674e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800675a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800675e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006762:	e065      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006890 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006776:	4b40      	ldr	r3, [pc, #256]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800677e:	ee07 3a90 	vmov	s15, r3
 8006782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006786:	ed97 6a02 	vldr	s12, [r7, #8]
 800678a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006888 <HAL_RCC_GetSysClockFreq+0x2e4>
 800678e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800679a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800679e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067a6:	e043      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	ee07 3a90 	vmov	s15, r3
 80067ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006894 <HAL_RCC_GetSysClockFreq+0x2f0>
 80067b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ba:	4b2f      	ldr	r3, [pc, #188]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c2:	ee07 3a90 	vmov	s15, r3
 80067c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80067ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006888 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067ea:	e021      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	ee07 3a90 	vmov	s15, r3
 80067f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006890 <HAL_RCC_GetSysClockFreq+0x2ec>
 80067fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067fe:	4b1e      	ldr	r3, [pc, #120]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006806:	ee07 3a90 	vmov	s15, r3
 800680a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800680e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006812:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006888 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800681a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800681e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800682a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800682e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006830:	4b11      	ldr	r3, [pc, #68]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006834:	0a5b      	lsrs	r3, r3, #9
 8006836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800683a:	3301      	adds	r3, #1
 800683c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	ee07 3a90 	vmov	s15, r3
 8006844:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006848:	edd7 6a07 	vldr	s13, [r7, #28]
 800684c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006854:	ee17 3a90 	vmov	r3, s15
 8006858:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800685a:	e005      	b.n	8006868 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800685c:	2300      	movs	r3, #0
 800685e:	61bb      	str	r3, [r7, #24]
      break;
 8006860:	e002      	b.n	8006868 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006862:	4b07      	ldr	r3, [pc, #28]	; (8006880 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006864:	61bb      	str	r3, [r7, #24]
      break;
 8006866:	bf00      	nop
  }

  return sysclockfreq;
 8006868:	69bb      	ldr	r3, [r7, #24]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3724      	adds	r7, #36	; 0x24
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	58024400 	.word	0x58024400
 800687c:	03d09000 	.word	0x03d09000
 8006880:	003d0900 	.word	0x003d0900
 8006884:	017d7840 	.word	0x017d7840
 8006888:	46000000 	.word	0x46000000
 800688c:	4c742400 	.word	0x4c742400
 8006890:	4a742400 	.word	0x4a742400
 8006894:	4bbebc20 	.word	0x4bbebc20

08006898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800689e:	f7ff fe81 	bl	80065a4 <HAL_RCC_GetSysClockFreq>
 80068a2:	4602      	mov	r2, r0
 80068a4:	4b10      	ldr	r3, [pc, #64]	; (80068e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	0a1b      	lsrs	r3, r3, #8
 80068aa:	f003 030f 	and.w	r3, r3, #15
 80068ae:	490f      	ldr	r1, [pc, #60]	; (80068ec <HAL_RCC_GetHCLKFreq+0x54>)
 80068b0:	5ccb      	ldrb	r3, [r1, r3]
 80068b2:	f003 031f 	and.w	r3, r3, #31
 80068b6:	fa22 f303 	lsr.w	r3, r2, r3
 80068ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068bc:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	f003 030f 	and.w	r3, r3, #15
 80068c4:	4a09      	ldr	r2, [pc, #36]	; (80068ec <HAL_RCC_GetHCLKFreq+0x54>)
 80068c6:	5cd3      	ldrb	r3, [r2, r3]
 80068c8:	f003 031f 	and.w	r3, r3, #31
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	fa22 f303 	lsr.w	r3, r2, r3
 80068d2:	4a07      	ldr	r2, [pc, #28]	; (80068f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80068d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068d6:	4a07      	ldr	r2, [pc, #28]	; (80068f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80068dc:	4b04      	ldr	r3, [pc, #16]	; (80068f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80068de:	681b      	ldr	r3, [r3, #0]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	58024400 	.word	0x58024400
 80068ec:	0800bf70 	.word	0x0800bf70
 80068f0:	24000004 	.word	0x24000004
 80068f4:	24000000 	.word	0x24000000

080068f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80068fc:	f7ff ffcc 	bl	8006898 <HAL_RCC_GetHCLKFreq>
 8006900:	4602      	mov	r2, r0
 8006902:	4b06      	ldr	r3, [pc, #24]	; (800691c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	091b      	lsrs	r3, r3, #4
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	4904      	ldr	r1, [pc, #16]	; (8006920 <HAL_RCC_GetPCLK1Freq+0x28>)
 800690e:	5ccb      	ldrb	r3, [r1, r3]
 8006910:	f003 031f 	and.w	r3, r3, #31
 8006914:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006918:	4618      	mov	r0, r3
 800691a:	bd80      	pop	{r7, pc}
 800691c:	58024400 	.word	0x58024400
 8006920:	0800bf70 	.word	0x0800bf70

08006924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006928:	f7ff ffb6 	bl	8006898 <HAL_RCC_GetHCLKFreq>
 800692c:	4602      	mov	r2, r0
 800692e:	4b06      	ldr	r3, [pc, #24]	; (8006948 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	0a1b      	lsrs	r3, r3, #8
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	4904      	ldr	r1, [pc, #16]	; (800694c <HAL_RCC_GetPCLK2Freq+0x28>)
 800693a:	5ccb      	ldrb	r3, [r1, r3]
 800693c:	f003 031f 	and.w	r3, r3, #31
 8006940:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006944:	4618      	mov	r0, r3
 8006946:	bd80      	pop	{r7, pc}
 8006948:	58024400 	.word	0x58024400
 800694c:	0800bf70 	.word	0x0800bf70

08006950 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006954:	b0ca      	sub	sp, #296	; 0x128
 8006956:	af00      	add	r7, sp, #0
 8006958:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800695c:	2300      	movs	r3, #0
 800695e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006962:	2300      	movs	r3, #0
 8006964:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800696c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006970:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006974:	2500      	movs	r5, #0
 8006976:	ea54 0305 	orrs.w	r3, r4, r5
 800697a:	d049      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800697c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006982:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006986:	d02f      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006988:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800698c:	d828      	bhi.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800698e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006992:	d01a      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006994:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006998:	d822      	bhi.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800699e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069a2:	d007      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80069a4:	e01c      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069a6:	4bb8      	ldr	r3, [pc, #736]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069aa:	4ab7      	ldr	r2, [pc, #732]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069b2:	e01a      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069b8:	3308      	adds	r3, #8
 80069ba:	2102      	movs	r1, #2
 80069bc:	4618      	mov	r0, r3
 80069be:	f002 fb61 	bl	8009084 <RCCEx_PLL2_Config>
 80069c2:	4603      	mov	r3, r0
 80069c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069c8:	e00f      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ce:	3328      	adds	r3, #40	; 0x28
 80069d0:	2102      	movs	r1, #2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f002 fc08 	bl	80091e8 <RCCEx_PLL3_Config>
 80069d8:	4603      	mov	r3, r0
 80069da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069de:	e004      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069e6:	e000      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80069e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10a      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80069f2:	4ba5      	ldr	r3, [pc, #660]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80069fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a00:	4aa1      	ldr	r2, [pc, #644]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a02:	430b      	orrs	r3, r1
 8006a04:	6513      	str	r3, [r2, #80]	; 0x50
 8006a06:	e003      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a18:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006a1c:	f04f 0900 	mov.w	r9, #0
 8006a20:	ea58 0309 	orrs.w	r3, r8, r9
 8006a24:	d047      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	d82a      	bhi.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006a30:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a36:	bf00      	nop
 8006a38:	08006a4d 	.word	0x08006a4d
 8006a3c:	08006a5b 	.word	0x08006a5b
 8006a40:	08006a71 	.word	0x08006a71
 8006a44:	08006a8f 	.word	0x08006a8f
 8006a48:	08006a8f 	.word	0x08006a8f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a4c:	4b8e      	ldr	r3, [pc, #568]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a50:	4a8d      	ldr	r2, [pc, #564]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a58:	e01a      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a5e:	3308      	adds	r3, #8
 8006a60:	2100      	movs	r1, #0
 8006a62:	4618      	mov	r0, r3
 8006a64:	f002 fb0e 	bl	8009084 <RCCEx_PLL2_Config>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a6e:	e00f      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a74:	3328      	adds	r3, #40	; 0x28
 8006a76:	2100      	movs	r1, #0
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f002 fbb5 	bl	80091e8 <RCCEx_PLL3_Config>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a84:	e004      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a8c:	e000      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10a      	bne.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a98:	4b7b      	ldr	r3, [pc, #492]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a9c:	f023 0107 	bic.w	r1, r3, #7
 8006aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa6:	4a78      	ldr	r2, [pc, #480]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006aa8:	430b      	orrs	r3, r1
 8006aaa:	6513      	str	r3, [r2, #80]	; 0x50
 8006aac:	e003      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ab2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abe:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006ac2:	f04f 0b00 	mov.w	fp, #0
 8006ac6:	ea5a 030b 	orrs.w	r3, sl, fp
 8006aca:	d04c      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ad6:	d030      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006adc:	d829      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ade:	2bc0      	cmp	r3, #192	; 0xc0
 8006ae0:	d02d      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006ae2:	2bc0      	cmp	r3, #192	; 0xc0
 8006ae4:	d825      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ae6:	2b80      	cmp	r3, #128	; 0x80
 8006ae8:	d018      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006aea:	2b80      	cmp	r3, #128	; 0x80
 8006aec:	d821      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006af2:	2b40      	cmp	r3, #64	; 0x40
 8006af4:	d007      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006af6:	e01c      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006af8:	4b63      	ldr	r3, [pc, #396]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afc:	4a62      	ldr	r2, [pc, #392]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006b04:	e01c      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f002 fab8 	bl	8009084 <RCCEx_PLL2_Config>
 8006b14:	4603      	mov	r3, r0
 8006b16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006b1a:	e011      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b20:	3328      	adds	r3, #40	; 0x28
 8006b22:	2100      	movs	r1, #0
 8006b24:	4618      	mov	r0, r3
 8006b26:	f002 fb5f 	bl	80091e8 <RCCEx_PLL3_Config>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006b30:	e006      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b38:	e002      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006b3a:	bf00      	nop
 8006b3c:	e000      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10a      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006b48:	4b4f      	ldr	r3, [pc, #316]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b4c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b56:	4a4c      	ldr	r2, [pc, #304]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	6513      	str	r3, [r2, #80]	; 0x50
 8006b5c:	e003      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006b72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006b76:	2300      	movs	r3, #0
 8006b78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006b7c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006b80:	460b      	mov	r3, r1
 8006b82:	4313      	orrs	r3, r2
 8006b84:	d053      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b92:	d035      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006b94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b98:	d82e      	bhi.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006b9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b9e:	d031      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006ba0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ba4:	d828      	bhi.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006baa:	d01a      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bb0:	d822      	bhi.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006bb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bba:	d007      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006bbc:	e01c      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bbe:	4b32      	ldr	r3, [pc, #200]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc2:	4a31      	ldr	r2, [pc, #196]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bca:	e01c      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f002 fa55 	bl	8009084 <RCCEx_PLL2_Config>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006be0:	e011      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006be6:	3328      	adds	r3, #40	; 0x28
 8006be8:	2100      	movs	r1, #0
 8006bea:	4618      	mov	r0, r3
 8006bec:	f002 fafc 	bl	80091e8 <RCCEx_PLL3_Config>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bf6:	e006      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006bfe:	e002      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006c00:	bf00      	nop
 8006c02:	e000      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10b      	bne.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006c0e:	4b1e      	ldr	r3, [pc, #120]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c12:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c1e:	4a1a      	ldr	r2, [pc, #104]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c20:	430b      	orrs	r3, r1
 8006c22:	6593      	str	r3, [r2, #88]	; 0x58
 8006c24:	e003      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006c3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006c44:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	d056      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c5a:	d038      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006c5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c60:	d831      	bhi.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c66:	d034      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006c68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c6c:	d82b      	bhi.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c72:	d01d      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006c74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c78:	d825      	bhi.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d006      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006c7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c82:	d00a      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006c84:	e01f      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c86:	bf00      	nop
 8006c88:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c8c:	4ba2      	ldr	r3, [pc, #648]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	4aa1      	ldr	r2, [pc, #644]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c98:	e01c      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c9e:	3308      	adds	r3, #8
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f002 f9ee 	bl	8009084 <RCCEx_PLL2_Config>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006cae:	e011      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cb4:	3328      	adds	r3, #40	; 0x28
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f002 fa95 	bl	80091e8 <RCCEx_PLL3_Config>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cc4:	e006      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ccc:	e002      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006cce:	bf00      	nop
 8006cd0:	e000      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10b      	bne.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006cdc:	4b8e      	ldr	r3, [pc, #568]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ce8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006cec:	4a8a      	ldr	r2, [pc, #552]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cee:	430b      	orrs	r3, r1
 8006cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8006cf2:	e003      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d04:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006d08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d12:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006d16:	460b      	mov	r3, r1
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	d03a      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d22:	2b30      	cmp	r3, #48	; 0x30
 8006d24:	d01f      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006d26:	2b30      	cmp	r3, #48	; 0x30
 8006d28:	d819      	bhi.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006d2a:	2b20      	cmp	r3, #32
 8006d2c:	d00c      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006d2e:	2b20      	cmp	r3, #32
 8006d30:	d815      	bhi.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d019      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006d36:	2b10      	cmp	r3, #16
 8006d38:	d111      	bne.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d3a:	4b77      	ldr	r3, [pc, #476]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3e:	4a76      	ldr	r2, [pc, #472]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006d46:	e011      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d4c:	3308      	adds	r3, #8
 8006d4e:	2102      	movs	r1, #2
 8006d50:	4618      	mov	r0, r3
 8006d52:	f002 f997 	bl	8009084 <RCCEx_PLL2_Config>
 8006d56:	4603      	mov	r3, r0
 8006d58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006d5c:	e006      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d64:	e002      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006d66:	bf00      	nop
 8006d68:	e000      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006d74:	4b68      	ldr	r3, [pc, #416]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d78:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d82:	4a65      	ldr	r2, [pc, #404]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d84:	430b      	orrs	r3, r1
 8006d86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d88:	e003      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006d9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006da2:	2300      	movs	r3, #0
 8006da4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006da8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4313      	orrs	r3, r2
 8006db0:	d051      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dbc:	d035      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006dbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dc2:	d82e      	bhi.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006dc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006dc8:	d031      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006dca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006dce:	d828      	bhi.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dd4:	d01a      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dda:	d822      	bhi.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d003      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de4:	d007      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006de6:	e01c      	b.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006de8:	4b4b      	ldr	r3, [pc, #300]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	4a4a      	ldr	r2, [pc, #296]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006df2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006df4:	e01c      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dfa:	3308      	adds	r3, #8
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f002 f940 	bl	8009084 <RCCEx_PLL2_Config>
 8006e04:	4603      	mov	r3, r0
 8006e06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e0a:	e011      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e10:	3328      	adds	r3, #40	; 0x28
 8006e12:	2100      	movs	r1, #0
 8006e14:	4618      	mov	r0, r3
 8006e16:	f002 f9e7 	bl	80091e8 <RCCEx_PLL3_Config>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e20:	e006      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e28:	e002      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006e2a:	bf00      	nop
 8006e2c:	e000      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10a      	bne.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e38:	4b37      	ldr	r3, [pc, #220]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e3c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e46:	4a34      	ldr	r2, [pc, #208]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e48:	430b      	orrs	r3, r1
 8006e4a:	6513      	str	r3, [r2, #80]	; 0x50
 8006e4c:	e003      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006e62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e66:	2300      	movs	r3, #0
 8006e68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e6c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006e70:	460b      	mov	r3, r1
 8006e72:	4313      	orrs	r3, r2
 8006e74:	d056      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e80:	d033      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006e82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e86:	d82c      	bhi.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006e88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e8c:	d02f      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006e8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e92:	d826      	bhi.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006e94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e98:	d02b      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006e9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e9e:	d820      	bhi.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ea4:	d012      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006ea6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eaa:	d81a      	bhi.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d022      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eb4:	d115      	bne.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eba:	3308      	adds	r3, #8
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f002 f8e0 	bl	8009084 <RCCEx_PLL2_Config>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006eca:	e015      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ed0:	3328      	adds	r3, #40	; 0x28
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f002 f987 	bl	80091e8 <RCCEx_PLL3_Config>
 8006eda:	4603      	mov	r3, r0
 8006edc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ee0:	e00a      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ee8:	e006      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006eea:	bf00      	nop
 8006eec:	e004      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006eee:	bf00      	nop
 8006ef0:	e002      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006ef2:	bf00      	nop
 8006ef4:	e000      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006ef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10d      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006f00:	4b05      	ldr	r3, [pc, #20]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f04:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f0e:	4a02      	ldr	r2, [pc, #8]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f10:	430b      	orrs	r3, r1
 8006f12:	6513      	str	r3, [r2, #80]	; 0x50
 8006f14:	e006      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006f16:	bf00      	nop
 8006f18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006f30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f34:	2300      	movs	r3, #0
 8006f36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f3a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4313      	orrs	r3, r2
 8006f42:	d055      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f50:	d033      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f56:	d82c      	bhi.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f5c:	d02f      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f62:	d826      	bhi.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f68:	d02b      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006f6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f6e:	d820      	bhi.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f74:	d012      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f7a:	d81a      	bhi.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d022      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006f80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f84:	d115      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f002 f878 	bl	8009084 <RCCEx_PLL2_Config>
 8006f94:	4603      	mov	r3, r0
 8006f96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006f9a:	e015      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fa0:	3328      	adds	r3, #40	; 0x28
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f002 f91f 	bl	80091e8 <RCCEx_PLL3_Config>
 8006faa:	4603      	mov	r3, r0
 8006fac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006fb0:	e00a      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006fb8:	e006      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006fba:	bf00      	nop
 8006fbc:	e004      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006fbe:	bf00      	nop
 8006fc0:	e002      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006fc2:	bf00      	nop
 8006fc4:	e000      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10b      	bne.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006fd0:	4ba3      	ldr	r3, [pc, #652]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fe0:	4a9f      	ldr	r2, [pc, #636]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fe2:	430b      	orrs	r3, r1
 8006fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8006fe6:	e003      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007000:	2300      	movs	r3, #0
 8007002:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007006:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800700a:	460b      	mov	r3, r1
 800700c:	4313      	orrs	r3, r2
 800700e:	d037      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800701a:	d00e      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800701c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007020:	d816      	bhi.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d018      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007026:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800702a:	d111      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800702c:	4b8c      	ldr	r3, [pc, #560]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	4a8b      	ldr	r2, [pc, #556]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007036:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007038:	e00f      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800703a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800703e:	3308      	adds	r3, #8
 8007040:	2101      	movs	r1, #1
 8007042:	4618      	mov	r0, r3
 8007044:	f002 f81e 	bl	8009084 <RCCEx_PLL2_Config>
 8007048:	4603      	mov	r3, r0
 800704a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800704e:	e004      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007056:	e000      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800705a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10a      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007062:	4b7f      	ldr	r3, [pc, #508]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007066:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800706a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800706e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007070:	4a7b      	ldr	r2, [pc, #492]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007072:	430b      	orrs	r3, r1
 8007074:	6513      	str	r3, [r2, #80]	; 0x50
 8007076:	e003      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007078:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800707c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800708c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007090:	2300      	movs	r3, #0
 8007092:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007096:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800709a:	460b      	mov	r3, r1
 800709c:	4313      	orrs	r3, r2
 800709e:	d039      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80070a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d81c      	bhi.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80070aa:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80070ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b0:	080070ed 	.word	0x080070ed
 80070b4:	080070c1 	.word	0x080070c1
 80070b8:	080070cf 	.word	0x080070cf
 80070bc:	080070ed 	.word	0x080070ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070c0:	4b67      	ldr	r3, [pc, #412]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	4a66      	ldr	r2, [pc, #408]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80070cc:	e00f      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070d2:	3308      	adds	r3, #8
 80070d4:	2102      	movs	r1, #2
 80070d6:	4618      	mov	r0, r3
 80070d8:	f001 ffd4 	bl	8009084 <RCCEx_PLL2_Config>
 80070dc:	4603      	mov	r3, r0
 80070de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80070e2:	e004      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070ea:	e000      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80070ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10a      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80070f6:	4b5a      	ldr	r3, [pc, #360]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070fa:	f023 0103 	bic.w	r1, r3, #3
 80070fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007104:	4a56      	ldr	r2, [pc, #344]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007106:	430b      	orrs	r3, r1
 8007108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800710a:	e003      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007110:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007120:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007124:	2300      	movs	r3, #0
 8007126:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800712a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800712e:	460b      	mov	r3, r1
 8007130:	4313      	orrs	r3, r2
 8007132:	f000 809f 	beq.w	8007274 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007136:	4b4b      	ldr	r3, [pc, #300]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a4a      	ldr	r2, [pc, #296]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800713c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007140:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007142:	f7fb fcbb 	bl	8002abc <HAL_GetTick>
 8007146:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800714a:	e00b      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800714c:	f7fb fcb6 	bl	8002abc <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b64      	cmp	r3, #100	; 0x64
 800715a:	d903      	bls.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007162:	e005      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007164:	4b3f      	ldr	r3, [pc, #252]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0ed      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007170:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007174:	2b00      	cmp	r3, #0
 8007176:	d179      	bne.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007178:	4b39      	ldr	r3, [pc, #228]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800717a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800717c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007180:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007184:	4053      	eors	r3, r2
 8007186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800718a:	2b00      	cmp	r3, #0
 800718c:	d015      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800718e:	4b34      	ldr	r3, [pc, #208]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007196:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800719a:	4b31      	ldr	r3, [pc, #196]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800719c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719e:	4a30      	ldr	r2, [pc, #192]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071a4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071a6:	4b2e      	ldr	r3, [pc, #184]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071aa:	4a2d      	ldr	r2, [pc, #180]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071b0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80071b2:	4a2b      	ldr	r2, [pc, #172]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80071b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80071ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80071c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071c6:	d118      	bne.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c8:	f7fb fc78 	bl	8002abc <HAL_GetTick>
 80071cc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071d0:	e00d      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071d2:	f7fb fc73 	bl	8002abc <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80071dc:	1ad2      	subs	r2, r2, r3
 80071de:	f241 3388 	movw	r3, #5000	; 0x1388
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d903      	bls.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80071ec:	e005      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071ee:	4b1c      	ldr	r3, [pc, #112]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d0eb      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80071fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d129      	bne.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007206:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800720a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800720e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007212:	d10e      	bne.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007214:	4b12      	ldr	r3, [pc, #72]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800721c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007220:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007224:	091a      	lsrs	r2, r3, #4
 8007226:	4b10      	ldr	r3, [pc, #64]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007228:	4013      	ands	r3, r2
 800722a:	4a0d      	ldr	r2, [pc, #52]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800722c:	430b      	orrs	r3, r1
 800722e:	6113      	str	r3, [r2, #16]
 8007230:	e005      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007232:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	4a0a      	ldr	r2, [pc, #40]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007238:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800723c:	6113      	str	r3, [r2, #16]
 800723e:	4b08      	ldr	r3, [pc, #32]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007240:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007246:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800724a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800724e:	4a04      	ldr	r2, [pc, #16]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007250:	430b      	orrs	r3, r1
 8007252:	6713      	str	r3, [r2, #112]	; 0x70
 8007254:	e00e      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007256:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800725a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800725e:	e009      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007260:	58024400 	.word	0x58024400
 8007264:	58024800 	.word	0x58024800
 8007268:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007270:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	f002 0301 	and.w	r3, r2, #1
 8007280:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007284:	2300      	movs	r3, #0
 8007286:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800728a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800728e:	460b      	mov	r3, r1
 8007290:	4313      	orrs	r3, r2
 8007292:	f000 8089 	beq.w	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800729a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800729c:	2b28      	cmp	r3, #40	; 0x28
 800729e:	d86b      	bhi.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80072a0:	a201      	add	r2, pc, #4	; (adr r2, 80072a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80072a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a6:	bf00      	nop
 80072a8:	08007381 	.word	0x08007381
 80072ac:	08007379 	.word	0x08007379
 80072b0:	08007379 	.word	0x08007379
 80072b4:	08007379 	.word	0x08007379
 80072b8:	08007379 	.word	0x08007379
 80072bc:	08007379 	.word	0x08007379
 80072c0:	08007379 	.word	0x08007379
 80072c4:	08007379 	.word	0x08007379
 80072c8:	0800734d 	.word	0x0800734d
 80072cc:	08007379 	.word	0x08007379
 80072d0:	08007379 	.word	0x08007379
 80072d4:	08007379 	.word	0x08007379
 80072d8:	08007379 	.word	0x08007379
 80072dc:	08007379 	.word	0x08007379
 80072e0:	08007379 	.word	0x08007379
 80072e4:	08007379 	.word	0x08007379
 80072e8:	08007363 	.word	0x08007363
 80072ec:	08007379 	.word	0x08007379
 80072f0:	08007379 	.word	0x08007379
 80072f4:	08007379 	.word	0x08007379
 80072f8:	08007379 	.word	0x08007379
 80072fc:	08007379 	.word	0x08007379
 8007300:	08007379 	.word	0x08007379
 8007304:	08007379 	.word	0x08007379
 8007308:	08007381 	.word	0x08007381
 800730c:	08007379 	.word	0x08007379
 8007310:	08007379 	.word	0x08007379
 8007314:	08007379 	.word	0x08007379
 8007318:	08007379 	.word	0x08007379
 800731c:	08007379 	.word	0x08007379
 8007320:	08007379 	.word	0x08007379
 8007324:	08007379 	.word	0x08007379
 8007328:	08007381 	.word	0x08007381
 800732c:	08007379 	.word	0x08007379
 8007330:	08007379 	.word	0x08007379
 8007334:	08007379 	.word	0x08007379
 8007338:	08007379 	.word	0x08007379
 800733c:	08007379 	.word	0x08007379
 8007340:	08007379 	.word	0x08007379
 8007344:	08007379 	.word	0x08007379
 8007348:	08007381 	.word	0x08007381
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800734c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007350:	3308      	adds	r3, #8
 8007352:	2101      	movs	r1, #1
 8007354:	4618      	mov	r0, r3
 8007356:	f001 fe95 	bl	8009084 <RCCEx_PLL2_Config>
 800735a:	4603      	mov	r3, r0
 800735c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007360:	e00f      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007366:	3328      	adds	r3, #40	; 0x28
 8007368:	2101      	movs	r1, #1
 800736a:	4618      	mov	r0, r3
 800736c:	f001 ff3c 	bl	80091e8 <RCCEx_PLL3_Config>
 8007370:	4603      	mov	r3, r0
 8007372:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007376:	e004      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800737e:	e000      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007382:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10a      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800738a:	4bbf      	ldr	r3, [pc, #764]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800738c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007398:	4abb      	ldr	r2, [pc, #748]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800739a:	430b      	orrs	r3, r1
 800739c:	6553      	str	r3, [r2, #84]	; 0x54
 800739e:	e003      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80073a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	f002 0302 	and.w	r3, r2, #2
 80073b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073b8:	2300      	movs	r3, #0
 80073ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80073be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80073c2:	460b      	mov	r3, r1
 80073c4:	4313      	orrs	r3, r2
 80073c6:	d041      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80073c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073ce:	2b05      	cmp	r3, #5
 80073d0:	d824      	bhi.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80073d2:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80073d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d8:	08007425 	.word	0x08007425
 80073dc:	080073f1 	.word	0x080073f1
 80073e0:	08007407 	.word	0x08007407
 80073e4:	08007425 	.word	0x08007425
 80073e8:	08007425 	.word	0x08007425
 80073ec:	08007425 	.word	0x08007425
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073f4:	3308      	adds	r3, #8
 80073f6:	2101      	movs	r1, #1
 80073f8:	4618      	mov	r0, r3
 80073fa:	f001 fe43 	bl	8009084 <RCCEx_PLL2_Config>
 80073fe:	4603      	mov	r3, r0
 8007400:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007404:	e00f      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800740a:	3328      	adds	r3, #40	; 0x28
 800740c:	2101      	movs	r1, #1
 800740e:	4618      	mov	r0, r3
 8007410:	f001 feea 	bl	80091e8 <RCCEx_PLL3_Config>
 8007414:	4603      	mov	r3, r0
 8007416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800741a:	e004      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007422:	e000      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10a      	bne.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800742e:	4b96      	ldr	r3, [pc, #600]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007432:	f023 0107 	bic.w	r1, r3, #7
 8007436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800743a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800743c:	4a92      	ldr	r2, [pc, #584]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800743e:	430b      	orrs	r3, r1
 8007440:	6553      	str	r3, [r2, #84]	; 0x54
 8007442:	e003      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007444:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007448:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800744c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	f002 0304 	and.w	r3, r2, #4
 8007458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800745c:	2300      	movs	r3, #0
 800745e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007462:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007466:	460b      	mov	r3, r1
 8007468:	4313      	orrs	r3, r2
 800746a:	d044      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800746c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007470:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007474:	2b05      	cmp	r3, #5
 8007476:	d825      	bhi.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007478:	a201      	add	r2, pc, #4	; (adr r2, 8007480 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800747a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747e:	bf00      	nop
 8007480:	080074cd 	.word	0x080074cd
 8007484:	08007499 	.word	0x08007499
 8007488:	080074af 	.word	0x080074af
 800748c:	080074cd 	.word	0x080074cd
 8007490:	080074cd 	.word	0x080074cd
 8007494:	080074cd 	.word	0x080074cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800749c:	3308      	adds	r3, #8
 800749e:	2101      	movs	r1, #1
 80074a0:	4618      	mov	r0, r3
 80074a2:	f001 fdef 	bl	8009084 <RCCEx_PLL2_Config>
 80074a6:	4603      	mov	r3, r0
 80074a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80074ac:	e00f      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074b2:	3328      	adds	r3, #40	; 0x28
 80074b4:	2101      	movs	r1, #1
 80074b6:	4618      	mov	r0, r3
 80074b8:	f001 fe96 	bl	80091e8 <RCCEx_PLL3_Config>
 80074bc:	4603      	mov	r3, r0
 80074be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80074c2:	e004      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074ca:	e000      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80074cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10b      	bne.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80074d6:	4b6c      	ldr	r3, [pc, #432]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074da:	f023 0107 	bic.w	r1, r3, #7
 80074de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074e6:	4a68      	ldr	r2, [pc, #416]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074e8:	430b      	orrs	r3, r1
 80074ea:	6593      	str	r3, [r2, #88]	; 0x58
 80074ec:	e003      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80074f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fe:	f002 0320 	and.w	r3, r2, #32
 8007502:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007506:	2300      	movs	r3, #0
 8007508:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800750c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007510:	460b      	mov	r3, r1
 8007512:	4313      	orrs	r3, r2
 8007514:	d055      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800751a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800751e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007522:	d033      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007524:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007528:	d82c      	bhi.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800752a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800752e:	d02f      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007534:	d826      	bhi.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007536:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800753a:	d02b      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800753c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007540:	d820      	bhi.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007546:	d012      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800754c:	d81a      	bhi.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800754e:	2b00      	cmp	r3, #0
 8007550:	d022      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007552:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007556:	d115      	bne.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800755c:	3308      	adds	r3, #8
 800755e:	2100      	movs	r1, #0
 8007560:	4618      	mov	r0, r3
 8007562:	f001 fd8f 	bl	8009084 <RCCEx_PLL2_Config>
 8007566:	4603      	mov	r3, r0
 8007568:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800756c:	e015      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800756e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007572:	3328      	adds	r3, #40	; 0x28
 8007574:	2102      	movs	r1, #2
 8007576:	4618      	mov	r0, r3
 8007578:	f001 fe36 	bl	80091e8 <RCCEx_PLL3_Config>
 800757c:	4603      	mov	r3, r0
 800757e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007582:	e00a      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800758a:	e006      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800758c:	bf00      	nop
 800758e:	e004      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007590:	bf00      	nop
 8007592:	e002      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007594:	bf00      	nop
 8007596:	e000      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800759a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10b      	bne.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075a2:	4b39      	ldr	r3, [pc, #228]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80075aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b2:	4a35      	ldr	r2, [pc, #212]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075b4:	430b      	orrs	r3, r1
 80075b6:	6553      	str	r3, [r2, #84]	; 0x54
 80075b8:	e003      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80075c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80075ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80075d2:	2300      	movs	r3, #0
 80075d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80075d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80075dc:	460b      	mov	r3, r1
 80075de:	4313      	orrs	r3, r2
 80075e0:	d058      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80075e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80075ee:	d033      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80075f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80075f4:	d82c      	bhi.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80075f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075fa:	d02f      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80075fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007600:	d826      	bhi.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007602:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007606:	d02b      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007608:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800760c:	d820      	bhi.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800760e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007612:	d012      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007618:	d81a      	bhi.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800761a:	2b00      	cmp	r3, #0
 800761c:	d022      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800761e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007622:	d115      	bne.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007628:	3308      	adds	r3, #8
 800762a:	2100      	movs	r1, #0
 800762c:	4618      	mov	r0, r3
 800762e:	f001 fd29 	bl	8009084 <RCCEx_PLL2_Config>
 8007632:	4603      	mov	r3, r0
 8007634:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007638:	e015      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800763a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800763e:	3328      	adds	r3, #40	; 0x28
 8007640:	2102      	movs	r1, #2
 8007642:	4618      	mov	r0, r3
 8007644:	f001 fdd0 	bl	80091e8 <RCCEx_PLL3_Config>
 8007648:	4603      	mov	r3, r0
 800764a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800764e:	e00a      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007656:	e006      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007658:	bf00      	nop
 800765a:	e004      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800765c:	bf00      	nop
 800765e:	e002      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007660:	bf00      	nop
 8007662:	e000      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007666:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10e      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800766e:	4b06      	ldr	r3, [pc, #24]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007672:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800767a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800767e:	4a02      	ldr	r2, [pc, #8]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007680:	430b      	orrs	r3, r1
 8007682:	6593      	str	r3, [r2, #88]	; 0x58
 8007684:	e006      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007686:	bf00      	nop
 8007688:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007690:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80076a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076a4:	2300      	movs	r3, #0
 80076a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80076ae:	460b      	mov	r3, r1
 80076b0:	4313      	orrs	r3, r2
 80076b2:	d055      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80076b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80076bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80076c0:	d033      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80076c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80076c6:	d82c      	bhi.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80076c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076cc:	d02f      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80076ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076d2:	d826      	bhi.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80076d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80076d8:	d02b      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80076da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80076de:	d820      	bhi.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80076e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076e4:	d012      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80076e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076ea:	d81a      	bhi.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d022      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80076f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076f4:	d115      	bne.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076fa:	3308      	adds	r3, #8
 80076fc:	2100      	movs	r1, #0
 80076fe:	4618      	mov	r0, r3
 8007700:	f001 fcc0 	bl	8009084 <RCCEx_PLL2_Config>
 8007704:	4603      	mov	r3, r0
 8007706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800770a:	e015      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800770c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007710:	3328      	adds	r3, #40	; 0x28
 8007712:	2102      	movs	r1, #2
 8007714:	4618      	mov	r0, r3
 8007716:	f001 fd67 	bl	80091e8 <RCCEx_PLL3_Config>
 800771a:	4603      	mov	r3, r0
 800771c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007720:	e00a      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007728:	e006      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800772a:	bf00      	nop
 800772c:	e004      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800772e:	bf00      	nop
 8007730:	e002      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007732:	bf00      	nop
 8007734:	e000      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007736:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007738:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10b      	bne.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007740:	4ba1      	ldr	r3, [pc, #644]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007744:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800774c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007750:	4a9d      	ldr	r2, [pc, #628]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007752:	430b      	orrs	r3, r1
 8007754:	6593      	str	r3, [r2, #88]	; 0x58
 8007756:	e003      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007758:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800775c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007768:	f002 0308 	and.w	r3, r2, #8
 800776c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007770:	2300      	movs	r3, #0
 8007772:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007776:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800777a:	460b      	mov	r3, r1
 800777c:	4313      	orrs	r3, r2
 800777e:	d01e      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800778c:	d10c      	bne.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800778e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007792:	3328      	adds	r3, #40	; 0x28
 8007794:	2102      	movs	r1, #2
 8007796:	4618      	mov	r0, r3
 8007798:	f001 fd26 	bl	80091e8 <RCCEx_PLL3_Config>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80077a8:	4b87      	ldr	r3, [pc, #540]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077b8:	4a83      	ldr	r2, [pc, #524]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077ba:	430b      	orrs	r3, r1
 80077bc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c6:	f002 0310 	and.w	r3, r2, #16
 80077ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80077ce:	2300      	movs	r3, #0
 80077d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80077d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80077d8:	460b      	mov	r3, r1
 80077da:	4313      	orrs	r3, r2
 80077dc:	d01e      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80077de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ea:	d10c      	bne.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80077ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077f0:	3328      	adds	r3, #40	; 0x28
 80077f2:	2102      	movs	r1, #2
 80077f4:	4618      	mov	r0, r3
 80077f6:	f001 fcf7 	bl	80091e8 <RCCEx_PLL3_Config>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d002      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007806:	4b70      	ldr	r3, [pc, #448]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800780a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800780e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007812:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007816:	4a6c      	ldr	r2, [pc, #432]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007818:	430b      	orrs	r3, r1
 800781a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800781c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007824:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007828:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800782c:	2300      	movs	r3, #0
 800782e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007832:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007836:	460b      	mov	r3, r1
 8007838:	4313      	orrs	r3, r2
 800783a:	d03e      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800783c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007840:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007848:	d022      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800784a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800784e:	d81b      	bhi.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007858:	d00b      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800785a:	e015      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800785c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007860:	3308      	adds	r3, #8
 8007862:	2100      	movs	r1, #0
 8007864:	4618      	mov	r0, r3
 8007866:	f001 fc0d 	bl	8009084 <RCCEx_PLL2_Config>
 800786a:	4603      	mov	r3, r0
 800786c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007870:	e00f      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007876:	3328      	adds	r3, #40	; 0x28
 8007878:	2102      	movs	r1, #2
 800787a:	4618      	mov	r0, r3
 800787c:	f001 fcb4 	bl	80091e8 <RCCEx_PLL3_Config>
 8007880:	4603      	mov	r3, r0
 8007882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007886:	e004      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800788e:	e000      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10b      	bne.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800789a:	4b4b      	ldr	r3, [pc, #300]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800789c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800789e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80078a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078aa:	4a47      	ldr	r2, [pc, #284]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078ac:	430b      	orrs	r3, r1
 80078ae:	6593      	str	r3, [r2, #88]	; 0x58
 80078b0:	e003      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80078ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80078c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80078c8:	2300      	movs	r3, #0
 80078ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80078cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80078d0:	460b      	mov	r3, r1
 80078d2:	4313      	orrs	r3, r2
 80078d4:	d03b      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80078d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078e2:	d01f      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80078e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078e8:	d818      	bhi.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80078ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078ee:	d003      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80078f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078f4:	d007      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80078f6:	e011      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078f8:	4b33      	ldr	r3, [pc, #204]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fc:	4a32      	ldr	r2, [pc, #200]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007902:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007904:	e00f      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800790a:	3328      	adds	r3, #40	; 0x28
 800790c:	2101      	movs	r1, #1
 800790e:	4618      	mov	r0, r3
 8007910:	f001 fc6a 	bl	80091e8 <RCCEx_PLL3_Config>
 8007914:	4603      	mov	r3, r0
 8007916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800791a:	e004      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007922:	e000      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10b      	bne.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800792e:	4b26      	ldr	r3, [pc, #152]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007932:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800793a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800793e:	4a22      	ldr	r2, [pc, #136]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007940:	430b      	orrs	r3, r1
 8007942:	6553      	str	r3, [r2, #84]	; 0x54
 8007944:	e003      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007946:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800794a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800794e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007956:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800795a:	673b      	str	r3, [r7, #112]	; 0x70
 800795c:	2300      	movs	r3, #0
 800795e:	677b      	str	r3, [r7, #116]	; 0x74
 8007960:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007964:	460b      	mov	r3, r1
 8007966:	4313      	orrs	r3, r2
 8007968:	d034      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800796a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800796e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007970:	2b00      	cmp	r3, #0
 8007972:	d003      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007978:	d007      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800797a:	e011      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800797c:	4b12      	ldr	r3, [pc, #72]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007980:	4a11      	ldr	r2, [pc, #68]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007986:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007988:	e00e      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800798a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800798e:	3308      	adds	r3, #8
 8007990:	2102      	movs	r1, #2
 8007992:	4618      	mov	r0, r3
 8007994:	f001 fb76 	bl	8009084 <RCCEx_PLL2_Config>
 8007998:	4603      	mov	r3, r0
 800799a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800799e:	e003      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10d      	bne.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80079b0:	4b05      	ldr	r3, [pc, #20]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079be:	4a02      	ldr	r2, [pc, #8]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079c0:	430b      	orrs	r3, r1
 80079c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80079c4:	e006      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80079c6:	bf00      	nop
 80079c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80079d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079dc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80079e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80079e2:	2300      	movs	r3, #0
 80079e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80079ea:	460b      	mov	r3, r1
 80079ec:	4313      	orrs	r3, r2
 80079ee:	d00c      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80079f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079f4:	3328      	adds	r3, #40	; 0x28
 80079f6:	2102      	movs	r1, #2
 80079f8:	4618      	mov	r0, r3
 80079fa:	f001 fbf5 	bl	80091e8 <RCCEx_PLL3_Config>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a12:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007a16:	663b      	str	r3, [r7, #96]	; 0x60
 8007a18:	2300      	movs	r3, #0
 8007a1a:	667b      	str	r3, [r7, #100]	; 0x64
 8007a1c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007a20:	460b      	mov	r3, r1
 8007a22:	4313      	orrs	r3, r2
 8007a24:	d038      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a32:	d018      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a38:	d811      	bhi.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a3e:	d014      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a44:	d80b      	bhi.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d011      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a4e:	d106      	bne.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a50:	4bc3      	ldr	r3, [pc, #780]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	4ac2      	ldr	r2, [pc, #776]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007a5c:	e008      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a64:	e004      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007a66:	bf00      	nop
 8007a68:	e002      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007a6a:	bf00      	nop
 8007a6c:	e000      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10b      	bne.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a78:	4bb9      	ldr	r3, [pc, #740]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a88:	4ab5      	ldr	r2, [pc, #724]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a8a:	430b      	orrs	r3, r1
 8007a8c:	6553      	str	r3, [r2, #84]	; 0x54
 8007a8e:	e003      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007aa4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007aaa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	d009      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ab4:	4baa      	ldr	r3, [pc, #680]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ac2:	4aa7      	ldr	r2, [pc, #668]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007ad4:	653b      	str	r3, [r7, #80]	; 0x50
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	657b      	str	r3, [r7, #84]	; 0x54
 8007ada:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	d00a      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007ae4:	4b9e      	ldr	r3, [pc, #632]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007af0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007af4:	4a9a      	ldr	r2, [pc, #616]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007af6:	430b      	orrs	r3, r1
 8007af8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b02:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007b06:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b08:	2300      	movs	r3, #0
 8007b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b0c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007b10:	460b      	mov	r3, r1
 8007b12:	4313      	orrs	r3, r2
 8007b14:	d009      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b16:	4b92      	ldr	r3, [pc, #584]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b1a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b24:	4a8e      	ldr	r2, [pc, #568]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b26:	430b      	orrs	r3, r1
 8007b28:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b32:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007b36:	643b      	str	r3, [r7, #64]	; 0x40
 8007b38:	2300      	movs	r3, #0
 8007b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b3c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007b40:	460b      	mov	r3, r1
 8007b42:	4313      	orrs	r3, r2
 8007b44:	d00e      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b46:	4b86      	ldr	r3, [pc, #536]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	4a85      	ldr	r2, [pc, #532]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b50:	6113      	str	r3, [r2, #16]
 8007b52:	4b83      	ldr	r3, [pc, #524]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b54:	6919      	ldr	r1, [r3, #16]
 8007b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007b5e:	4a80      	ldr	r2, [pc, #512]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b60:	430b      	orrs	r3, r1
 8007b62:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007b70:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b72:	2300      	movs	r3, #0
 8007b74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b76:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	d009      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007b80:	4b77      	ldr	r3, [pc, #476]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b84:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b8e:	4a74      	ldr	r2, [pc, #464]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b90:	430b      	orrs	r3, r1
 8007b92:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007baa:	460b      	mov	r3, r1
 8007bac:	4313      	orrs	r3, r2
 8007bae:	d00a      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007bb0:	4b6b      	ldr	r3, [pc, #428]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bc0:	4a67      	ldr	r2, [pc, #412]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bc2:	430b      	orrs	r3, r1
 8007bc4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	2100      	movs	r1, #0
 8007bd0:	62b9      	str	r1, [r7, #40]	; 0x28
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bd8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4313      	orrs	r3, r2
 8007be0:	d011      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be6:	3308      	adds	r3, #8
 8007be8:	2100      	movs	r1, #0
 8007bea:	4618      	mov	r0, r3
 8007bec:	f001 fa4a 	bl	8009084 <RCCEx_PLL2_Config>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0e:	2100      	movs	r1, #0
 8007c10:	6239      	str	r1, [r7, #32]
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	627b      	str	r3, [r7, #36]	; 0x24
 8007c18:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	d011      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c26:	3308      	adds	r3, #8
 8007c28:	2101      	movs	r1, #1
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f001 fa2a 	bl	8009084 <RCCEx_PLL2_Config>
 8007c30:	4603      	mov	r3, r0
 8007c32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d003      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4e:	2100      	movs	r1, #0
 8007c50:	61b9      	str	r1, [r7, #24]
 8007c52:	f003 0304 	and.w	r3, r3, #4
 8007c56:	61fb      	str	r3, [r7, #28]
 8007c58:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	d011      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c66:	3308      	adds	r3, #8
 8007c68:	2102      	movs	r1, #2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f001 fa0a 	bl	8009084 <RCCEx_PLL2_Config>
 8007c70:	4603      	mov	r3, r0
 8007c72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007c76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8e:	2100      	movs	r1, #0
 8007c90:	6139      	str	r1, [r7, #16]
 8007c92:	f003 0308 	and.w	r3, r3, #8
 8007c96:	617b      	str	r3, [r7, #20]
 8007c98:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	d011      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ca6:	3328      	adds	r3, #40	; 0x28
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4618      	mov	r0, r3
 8007cac:	f001 fa9c 	bl	80091e8 <RCCEx_PLL3_Config>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d003      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cce:	2100      	movs	r1, #0
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	f003 0310 	and.w	r3, r3, #16
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	d011      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ce6:	3328      	adds	r3, #40	; 0x28
 8007ce8:	2101      	movs	r1, #1
 8007cea:	4618      	mov	r0, r3
 8007cec:	f001 fa7c 	bl	80091e8 <RCCEx_PLL3_Config>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0e:	2100      	movs	r1, #0
 8007d10:	6039      	str	r1, [r7, #0]
 8007d12:	f003 0320 	and.w	r3, r3, #32
 8007d16:	607b      	str	r3, [r7, #4]
 8007d18:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	d011      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d26:	3328      	adds	r3, #40	; 0x28
 8007d28:	2102      	movs	r1, #2
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f001 fa5c 	bl	80091e8 <RCCEx_PLL3_Config>
 8007d30:	4603      	mov	r3, r0
 8007d32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007d36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007d46:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d101      	bne.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	e000      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d60:	58024400 	.word	0x58024400

08007d64 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b090      	sub	sp, #64	; 0x40
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007d6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d72:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007d76:	430b      	orrs	r3, r1
 8007d78:	f040 8094 	bne.w	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007d7c:	4b9e      	ldr	r3, [pc, #632]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d80:	f003 0307 	and.w	r3, r3, #7
 8007d84:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d88:	2b04      	cmp	r3, #4
 8007d8a:	f200 8087 	bhi.w	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007d8e:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d94:	08007da9 	.word	0x08007da9
 8007d98:	08007dd1 	.word	0x08007dd1
 8007d9c:	08007df9 	.word	0x08007df9
 8007da0:	08007e95 	.word	0x08007e95
 8007da4:	08007e21 	.word	0x08007e21
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007da8:	4b93      	ldr	r3, [pc, #588]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007db0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007db4:	d108      	bne.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f001 f810 	bl	8008de0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dc4:	f000 bd45 	b.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dcc:	f000 bd41 	b.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007dd0:	4b89      	ldr	r3, [pc, #548]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ddc:	d108      	bne.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dde:	f107 0318 	add.w	r3, r7, #24
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 fd54 	bl	8008890 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dec:	f000 bd31 	b.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007df0:	2300      	movs	r3, #0
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007df4:	f000 bd2d 	b.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007df8:	4b7f      	ldr	r3, [pc, #508]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e04:	d108      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e06:	f107 030c 	add.w	r3, r7, #12
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 fe94 	bl	8008b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e14:	f000 bd1d 	b.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e1c:	f000 bd19 	b.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e20:	4b75      	ldr	r3, [pc, #468]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e28:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e2a:	4b73      	ldr	r3, [pc, #460]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 0304 	and.w	r3, r3, #4
 8007e32:	2b04      	cmp	r3, #4
 8007e34:	d10c      	bne.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d109      	bne.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e3c:	4b6e      	ldr	r3, [pc, #440]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	08db      	lsrs	r3, r3, #3
 8007e42:	f003 0303 	and.w	r3, r3, #3
 8007e46:	4a6d      	ldr	r2, [pc, #436]	; (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e48:	fa22 f303 	lsr.w	r3, r2, r3
 8007e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e4e:	e01f      	b.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e50:	4b69      	ldr	r3, [pc, #420]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e5c:	d106      	bne.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e64:	d102      	bne.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e66:	4b66      	ldr	r3, [pc, #408]	; (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e6a:	e011      	b.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e6c:	4b62      	ldr	r3, [pc, #392]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e78:	d106      	bne.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e80:	d102      	bne.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e82:	4b60      	ldr	r3, [pc, #384]	; (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e86:	e003      	b.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007e8c:	f000 bce1 	b.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e90:	f000 bcdf 	b.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e94:	4b5c      	ldr	r3, [pc, #368]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e98:	f000 bcdb 	b.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ea0:	f000 bcd7 	b.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ea8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007eac:	430b      	orrs	r3, r1
 8007eae:	f040 80ad 	bne.w	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007eb2:	4b51      	ldr	r3, [pc, #324]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007eba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec2:	d056      	beq.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eca:	f200 8090 	bhi.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed0:	2bc0      	cmp	r3, #192	; 0xc0
 8007ed2:	f000 8088 	beq.w	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	2bc0      	cmp	r3, #192	; 0xc0
 8007eda:	f200 8088 	bhi.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee0:	2b80      	cmp	r3, #128	; 0x80
 8007ee2:	d032      	beq.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee6:	2b80      	cmp	r3, #128	; 0x80
 8007ee8:	f200 8081 	bhi.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef4:	2b40      	cmp	r3, #64	; 0x40
 8007ef6:	d014      	beq.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007ef8:	e079      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007efa:	4b3f      	ldr	r3, [pc, #252]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f06:	d108      	bne.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 ff67 	bl	8008de0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f16:	f000 bc9c 	b.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f1e:	f000 bc98 	b.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f22:	4b35      	ldr	r3, [pc, #212]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f2e:	d108      	bne.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f30:	f107 0318 	add.w	r3, r7, #24
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 fcab 	bl	8008890 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f3e:	f000 bc88 	b.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f42:	2300      	movs	r3, #0
 8007f44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f46:	f000 bc84 	b.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f4a:	4b2b      	ldr	r3, [pc, #172]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f56:	d108      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f58:	f107 030c 	add.w	r3, r7, #12
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 fdeb 	bl	8008b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f66:	f000 bc74 	b.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f6e:	f000 bc70 	b.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f72:	4b21      	ldr	r3, [pc, #132]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f7a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f7c:	4b1e      	ldr	r3, [pc, #120]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 0304 	and.w	r3, r3, #4
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d10c      	bne.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d109      	bne.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f8e:	4b1a      	ldr	r3, [pc, #104]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	08db      	lsrs	r3, r3, #3
 8007f94:	f003 0303 	and.w	r3, r3, #3
 8007f98:	4a18      	ldr	r2, [pc, #96]	; (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fa0:	e01f      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fa2:	4b15      	ldr	r3, [pc, #84]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fae:	d106      	bne.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fb6:	d102      	bne.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007fb8:	4b11      	ldr	r3, [pc, #68]	; (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fbc:	e011      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fbe:	4b0e      	ldr	r3, [pc, #56]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fca:	d106      	bne.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fd2:	d102      	bne.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007fd4:	4b0b      	ldr	r3, [pc, #44]	; (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fd8:	e003      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007fde:	f000 bc38 	b.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007fe2:	f000 bc36 	b.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007fe6:	4b08      	ldr	r3, [pc, #32]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fea:	f000 bc32 	b.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ff2:	f000 bc2e 	b.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ff6:	bf00      	nop
 8007ff8:	58024400 	.word	0x58024400
 8007ffc:	03d09000 	.word	0x03d09000
 8008000:	003d0900 	.word	0x003d0900
 8008004:	017d7840 	.word	0x017d7840
 8008008:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800800c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008010:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008014:	430b      	orrs	r3, r1
 8008016:	f040 809c 	bne.w	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800801a:	4b9e      	ldr	r3, [pc, #632]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800801c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800801e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008022:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800802a:	d054      	beq.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800802c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008032:	f200 808b 	bhi.w	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008038:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800803c:	f000 8083 	beq.w	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008046:	f200 8081 	bhi.w	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800804a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008050:	d02f      	beq.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008058:	d878      	bhi.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800805a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805c:	2b00      	cmp	r3, #0
 800805e:	d004      	beq.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008062:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008066:	d012      	beq.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008068:	e070      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800806a:	4b8a      	ldr	r3, [pc, #552]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008072:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008076:	d107      	bne.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800807c:	4618      	mov	r0, r3
 800807e:	f000 feaf 	bl	8008de0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008086:	e3e4      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008088:	2300      	movs	r3, #0
 800808a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800808c:	e3e1      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800808e:	4b81      	ldr	r3, [pc, #516]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008096:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800809a:	d107      	bne.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800809c:	f107 0318 	add.w	r3, r7, #24
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 fbf5 	bl	8008890 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080aa:	e3d2      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080b0:	e3cf      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080b2:	4b78      	ldr	r3, [pc, #480]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080be:	d107      	bne.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080c0:	f107 030c 	add.w	r3, r7, #12
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 fd37 	bl	8008b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080ce:	e3c0      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080d4:	e3bd      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080d6:	4b6f      	ldr	r3, [pc, #444]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080de:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080e0:	4b6c      	ldr	r3, [pc, #432]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0304 	and.w	r3, r3, #4
 80080e8:	2b04      	cmp	r3, #4
 80080ea:	d10c      	bne.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80080ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d109      	bne.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080f2:	4b68      	ldr	r3, [pc, #416]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	08db      	lsrs	r3, r3, #3
 80080f8:	f003 0303 	and.w	r3, r3, #3
 80080fc:	4a66      	ldr	r2, [pc, #408]	; (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80080fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008104:	e01e      	b.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008106:	4b63      	ldr	r3, [pc, #396]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800810e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008112:	d106      	bne.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008116:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800811a:	d102      	bne.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800811c:	4b5f      	ldr	r3, [pc, #380]	; (800829c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800811e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008120:	e010      	b.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008122:	4b5c      	ldr	r3, [pc, #368]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800812a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800812e:	d106      	bne.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008136:	d102      	bne.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008138:	4b59      	ldr	r3, [pc, #356]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800813a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800813c:	e002      	b.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800813e:	2300      	movs	r3, #0
 8008140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008142:	e386      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008144:	e385      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008146:	4b57      	ldr	r3, [pc, #348]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008148:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800814a:	e382      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800814c:	2300      	movs	r3, #0
 800814e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008150:	e37f      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008156:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800815a:	430b      	orrs	r3, r1
 800815c:	f040 80a7 	bne.w	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008160:	4b4c      	ldr	r3, [pc, #304]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008164:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008168:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008170:	d055      	beq.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008178:	f200 8096 	bhi.w	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800817c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008182:	f000 8084 	beq.w	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008188:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800818c:	f200 808c 	bhi.w	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008192:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008196:	d030      	beq.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800819e:	f200 8083 	bhi.w	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80081a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d004      	beq.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80081a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081ae:	d012      	beq.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80081b0:	e07a      	b.n	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081b2:	4b38      	ldr	r3, [pc, #224]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081be:	d107      	bne.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 fe0b 	bl	8008de0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081ce:	e340      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081d0:	2300      	movs	r3, #0
 80081d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081d4:	e33d      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081d6:	4b2f      	ldr	r3, [pc, #188]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081e2:	d107      	bne.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081e4:	f107 0318 	add.w	r3, r7, #24
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 fb51 	bl	8008890 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081f2:	e32e      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081f4:	2300      	movs	r3, #0
 80081f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081f8:	e32b      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081fa:	4b26      	ldr	r3, [pc, #152]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008206:	d107      	bne.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008208:	f107 030c 	add.w	r3, r7, #12
 800820c:	4618      	mov	r0, r3
 800820e:	f000 fc93 	bl	8008b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008216:	e31c      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008218:	2300      	movs	r3, #0
 800821a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800821c:	e319      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800821e:	4b1d      	ldr	r3, [pc, #116]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008222:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008226:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008228:	4b1a      	ldr	r3, [pc, #104]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0304 	and.w	r3, r3, #4
 8008230:	2b04      	cmp	r3, #4
 8008232:	d10c      	bne.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008236:	2b00      	cmp	r3, #0
 8008238:	d109      	bne.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800823a:	4b16      	ldr	r3, [pc, #88]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	08db      	lsrs	r3, r3, #3
 8008240:	f003 0303 	and.w	r3, r3, #3
 8008244:	4a14      	ldr	r2, [pc, #80]	; (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008246:	fa22 f303 	lsr.w	r3, r2, r3
 800824a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800824c:	e01e      	b.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800824e:	4b11      	ldr	r3, [pc, #68]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800825a:	d106      	bne.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800825c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800825e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008262:	d102      	bne.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008264:	4b0d      	ldr	r3, [pc, #52]	; (800829c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008268:	e010      	b.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800826a:	4b0a      	ldr	r3, [pc, #40]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008272:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008276:	d106      	bne.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800827e:	d102      	bne.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008280:	4b07      	ldr	r3, [pc, #28]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008284:	e002      	b.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008286:	2300      	movs	r3, #0
 8008288:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800828a:	e2e2      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800828c:	e2e1      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800828e:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008290:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008292:	e2de      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008294:	58024400 	.word	0x58024400
 8008298:	03d09000 	.word	0x03d09000
 800829c:	003d0900 	.word	0x003d0900
 80082a0:	017d7840 	.word	0x017d7840
 80082a4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80082a8:	2300      	movs	r3, #0
 80082aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082ac:	e2d1      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80082ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082b2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80082b6:	430b      	orrs	r3, r1
 80082b8:	f040 809c 	bne.w	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80082bc:	4b93      	ldr	r3, [pc, #588]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082c0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80082c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80082c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082cc:	d054      	beq.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80082ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082d4:	f200 808b 	bhi.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80082d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082de:	f000 8083 	beq.w	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80082e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082e8:	f200 8081 	bhi.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80082ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082f2:	d02f      	beq.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80082f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082fa:	d878      	bhi.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80082fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d004      	beq.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008308:	d012      	beq.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800830a:	e070      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800830c:	4b7f      	ldr	r3, [pc, #508]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008314:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008318:	d107      	bne.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800831a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800831e:	4618      	mov	r0, r3
 8008320:	f000 fd5e 	bl	8008de0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008326:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008328:	e293      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800832a:	2300      	movs	r3, #0
 800832c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800832e:	e290      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008330:	4b76      	ldr	r3, [pc, #472]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008338:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800833c:	d107      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800833e:	f107 0318 	add.w	r3, r7, #24
 8008342:	4618      	mov	r0, r3
 8008344:	f000 faa4 	bl	8008890 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800834c:	e281      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800834e:	2300      	movs	r3, #0
 8008350:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008352:	e27e      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008354:	4b6d      	ldr	r3, [pc, #436]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800835c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008360:	d107      	bne.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008362:	f107 030c 	add.w	r3, r7, #12
 8008366:	4618      	mov	r0, r3
 8008368:	f000 fbe6 	bl	8008b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008370:	e26f      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008372:	2300      	movs	r3, #0
 8008374:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008376:	e26c      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008378:	4b64      	ldr	r3, [pc, #400]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800837a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800837c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008380:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008382:	4b62      	ldr	r3, [pc, #392]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0304 	and.w	r3, r3, #4
 800838a:	2b04      	cmp	r3, #4
 800838c:	d10c      	bne.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800838e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008390:	2b00      	cmp	r3, #0
 8008392:	d109      	bne.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008394:	4b5d      	ldr	r3, [pc, #372]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	08db      	lsrs	r3, r3, #3
 800839a:	f003 0303 	and.w	r3, r3, #3
 800839e:	4a5c      	ldr	r2, [pc, #368]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80083a0:	fa22 f303 	lsr.w	r3, r2, r3
 80083a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083a6:	e01e      	b.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083a8:	4b58      	ldr	r3, [pc, #352]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083b4:	d106      	bne.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80083b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083bc:	d102      	bne.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80083be:	4b55      	ldr	r3, [pc, #340]	; (8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80083c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083c2:	e010      	b.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083c4:	4b51      	ldr	r3, [pc, #324]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083d0:	d106      	bne.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80083d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083d8:	d102      	bne.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083da:	4b4f      	ldr	r3, [pc, #316]	; (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80083dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083de:	e002      	b.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083e0:	2300      	movs	r3, #0
 80083e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80083e4:	e235      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80083e6:	e234      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80083e8:	4b4c      	ldr	r3, [pc, #304]	; (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80083ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ec:	e231      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083f2:	e22e      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80083f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083f8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80083fc:	430b      	orrs	r3, r1
 80083fe:	f040 808f 	bne.w	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008402:	4b42      	ldr	r3, [pc, #264]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008406:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800840a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008412:	d06b      	beq.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008416:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800841a:	d874      	bhi.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800841c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008422:	d056      	beq.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008426:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800842a:	d86c      	bhi.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800842c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008432:	d03b      	beq.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008436:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800843a:	d864      	bhi.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800843c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008442:	d021      	beq.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008446:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800844a:	d85c      	bhi.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844e:	2b00      	cmp	r3, #0
 8008450:	d004      	beq.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008458:	d004      	beq.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800845a:	e054      	b.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800845c:	f7fe fa4c 	bl	80068f8 <HAL_RCC_GetPCLK1Freq>
 8008460:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008462:	e1f6      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008464:	4b29      	ldr	r3, [pc, #164]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800846c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008470:	d107      	bne.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008472:	f107 0318 	add.w	r3, r7, #24
 8008476:	4618      	mov	r0, r3
 8008478:	f000 fa0a 	bl	8008890 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008480:	e1e7      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008482:	2300      	movs	r3, #0
 8008484:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008486:	e1e4      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008488:	4b20      	ldr	r3, [pc, #128]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008494:	d107      	bne.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008496:	f107 030c 	add.w	r3, r7, #12
 800849a:	4618      	mov	r0, r3
 800849c:	f000 fb4c 	bl	8008b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084a4:	e1d5      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084aa:	e1d2      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084ac:	4b17      	ldr	r3, [pc, #92]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0304 	and.w	r3, r3, #4
 80084b4:	2b04      	cmp	r3, #4
 80084b6:	d109      	bne.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084b8:	4b14      	ldr	r3, [pc, #80]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	08db      	lsrs	r3, r3, #3
 80084be:	f003 0303 	and.w	r3, r3, #3
 80084c2:	4a13      	ldr	r2, [pc, #76]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80084c4:	fa22 f303 	lsr.w	r3, r2, r3
 80084c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084ca:	e1c2      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084cc:	2300      	movs	r3, #0
 80084ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084d0:	e1bf      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80084d2:	4b0e      	ldr	r3, [pc, #56]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084de:	d102      	bne.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80084e0:	4b0c      	ldr	r3, [pc, #48]	; (8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80084e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084e4:	e1b5      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084e6:	2300      	movs	r3, #0
 80084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084ea:	e1b2      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80084ec:	4b07      	ldr	r3, [pc, #28]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084f8:	d102      	bne.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80084fa:	4b07      	ldr	r3, [pc, #28]	; (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80084fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084fe:	e1a8      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008500:	2300      	movs	r3, #0
 8008502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008504:	e1a5      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008506:	2300      	movs	r3, #0
 8008508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800850a:	e1a2      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800850c:	58024400 	.word	0x58024400
 8008510:	03d09000 	.word	0x03d09000
 8008514:	003d0900 	.word	0x003d0900
 8008518:	017d7840 	.word	0x017d7840
 800851c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008524:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008528:	430b      	orrs	r3, r1
 800852a:	d173      	bne.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800852c:	4b9c      	ldr	r3, [pc, #624]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800852e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008534:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800853c:	d02f      	beq.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800853e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008540:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008544:	d863      	bhi.n	800860e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008548:	2b00      	cmp	r3, #0
 800854a:	d004      	beq.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800854c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008552:	d012      	beq.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008554:	e05b      	b.n	800860e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008556:	4b92      	ldr	r3, [pc, #584]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800855e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008562:	d107      	bne.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008564:	f107 0318 	add.w	r3, r7, #24
 8008568:	4618      	mov	r0, r3
 800856a:	f000 f991 	bl	8008890 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008572:	e16e      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008574:	2300      	movs	r3, #0
 8008576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008578:	e16b      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800857a:	4b89      	ldr	r3, [pc, #548]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008586:	d107      	bne.n	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008588:	f107 030c 	add.w	r3, r7, #12
 800858c:	4618      	mov	r0, r3
 800858e:	f000 fad3 	bl	8008b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008596:	e15c      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008598:	2300      	movs	r3, #0
 800859a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800859c:	e159      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800859e:	4b80      	ldr	r3, [pc, #512]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085a6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085a8:	4b7d      	ldr	r3, [pc, #500]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0304 	and.w	r3, r3, #4
 80085b0:	2b04      	cmp	r3, #4
 80085b2:	d10c      	bne.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80085b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d109      	bne.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085ba:	4b79      	ldr	r3, [pc, #484]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	08db      	lsrs	r3, r3, #3
 80085c0:	f003 0303 	and.w	r3, r3, #3
 80085c4:	4a77      	ldr	r2, [pc, #476]	; (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80085c6:	fa22 f303 	lsr.w	r3, r2, r3
 80085ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085cc:	e01e      	b.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085ce:	4b74      	ldr	r3, [pc, #464]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085da:	d106      	bne.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80085dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085e2:	d102      	bne.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085e4:	4b70      	ldr	r3, [pc, #448]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80085e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085e8:	e010      	b.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085ea:	4b6d      	ldr	r3, [pc, #436]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085f6:	d106      	bne.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80085f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085fe:	d102      	bne.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008600:	4b6a      	ldr	r3, [pc, #424]	; (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008604:	e002      	b.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008606:	2300      	movs	r3, #0
 8008608:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800860a:	e122      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800860c:	e121      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800860e:	2300      	movs	r3, #0
 8008610:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008612:	e11e      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008618:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800861c:	430b      	orrs	r3, r1
 800861e:	d133      	bne.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008620:	4b5f      	ldr	r3, [pc, #380]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008628:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800862a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862c:	2b00      	cmp	r3, #0
 800862e:	d004      	beq.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008636:	d012      	beq.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008638:	e023      	b.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800863a:	4b59      	ldr	r3, [pc, #356]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008642:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008646:	d107      	bne.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800864c:	4618      	mov	r0, r3
 800864e:	f000 fbc7 	bl	8008de0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008654:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008656:	e0fc      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008658:	2300      	movs	r3, #0
 800865a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800865c:	e0f9      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800865e:	4b50      	ldr	r3, [pc, #320]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008666:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800866a:	d107      	bne.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800866c:	f107 0318 	add.w	r3, r7, #24
 8008670:	4618      	mov	r0, r3
 8008672:	f000 f90d 	bl	8008890 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800867a:	e0ea      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800867c:	2300      	movs	r3, #0
 800867e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008680:	e0e7      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008682:	2300      	movs	r3, #0
 8008684:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008686:	e0e4      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800868c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008690:	430b      	orrs	r3, r1
 8008692:	f040 808d 	bne.w	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008696:	4b42      	ldr	r3, [pc, #264]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800869a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800869e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80086a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086a6:	d06b      	beq.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80086a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086ae:	d874      	bhi.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80086b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086b6:	d056      	beq.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80086b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086be:	d86c      	bhi.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80086c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086c6:	d03b      	beq.n	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80086c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086ce:	d864      	bhi.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80086d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086d6:	d021      	beq.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80086d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086de:	d85c      	bhi.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80086e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d004      	beq.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80086e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086ec:	d004      	beq.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80086ee:	e054      	b.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80086f0:	f000 f8b8 	bl	8008864 <HAL_RCCEx_GetD3PCLK1Freq>
 80086f4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80086f6:	e0ac      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086f8:	4b29      	ldr	r3, [pc, #164]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008700:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008704:	d107      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008706:	f107 0318 	add.w	r3, r7, #24
 800870a:	4618      	mov	r0, r3
 800870c:	f000 f8c0 	bl	8008890 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008714:	e09d      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008716:	2300      	movs	r3, #0
 8008718:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800871a:	e09a      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800871c:	4b20      	ldr	r3, [pc, #128]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008728:	d107      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800872a:	f107 030c 	add.w	r3, r7, #12
 800872e:	4618      	mov	r0, r3
 8008730:	f000 fa02 	bl	8008b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008738:	e08b      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800873a:	2300      	movs	r3, #0
 800873c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800873e:	e088      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008740:	4b17      	ldr	r3, [pc, #92]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0304 	and.w	r3, r3, #4
 8008748:	2b04      	cmp	r3, #4
 800874a:	d109      	bne.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800874c:	4b14      	ldr	r3, [pc, #80]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	08db      	lsrs	r3, r3, #3
 8008752:	f003 0303 	and.w	r3, r3, #3
 8008756:	4a13      	ldr	r2, [pc, #76]	; (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008758:	fa22 f303 	lsr.w	r3, r2, r3
 800875c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800875e:	e078      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008760:	2300      	movs	r3, #0
 8008762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008764:	e075      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008766:	4b0e      	ldr	r3, [pc, #56]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800876e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008772:	d102      	bne.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008774:	4b0c      	ldr	r3, [pc, #48]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008776:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008778:	e06b      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800877a:	2300      	movs	r3, #0
 800877c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800877e:	e068      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008780:	4b07      	ldr	r3, [pc, #28]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800878c:	d102      	bne.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800878e:	4b07      	ldr	r3, [pc, #28]	; (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008790:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008792:	e05e      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008794:	2300      	movs	r3, #0
 8008796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008798:	e05b      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800879a:	2300      	movs	r3, #0
 800879c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800879e:	e058      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80087a0:	58024400 	.word	0x58024400
 80087a4:	03d09000 	.word	0x03d09000
 80087a8:	003d0900 	.word	0x003d0900
 80087ac:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80087b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087b4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80087b8:	430b      	orrs	r3, r1
 80087ba:	d148      	bne.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80087bc:	4b27      	ldr	r3, [pc, #156]	; (800885c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80087be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80087c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087cc:	d02a      	beq.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80087ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087d4:	d838      	bhi.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80087d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d004      	beq.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80087dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087e2:	d00d      	beq.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80087e4:	e030      	b.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80087e6:	4b1d      	ldr	r3, [pc, #116]	; (800885c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087f2:	d102      	bne.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80087f4:	4b1a      	ldr	r3, [pc, #104]	; (8008860 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80087f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087f8:	e02b      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087fa:	2300      	movs	r3, #0
 80087fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087fe:	e028      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008800:	4b16      	ldr	r3, [pc, #88]	; (800885c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008808:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800880c:	d107      	bne.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800880e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008812:	4618      	mov	r0, r3
 8008814:	f000 fae4 	bl	8008de0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800881c:	e019      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800881e:	2300      	movs	r3, #0
 8008820:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008822:	e016      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008824:	4b0d      	ldr	r3, [pc, #52]	; (800885c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800882c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008830:	d107      	bne.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008832:	f107 0318 	add.w	r3, r7, #24
 8008836:	4618      	mov	r0, r3
 8008838:	f000 f82a 	bl	8008890 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008840:	e007      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008842:	2300      	movs	r3, #0
 8008844:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008846:	e004      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008848:	2300      	movs	r3, #0
 800884a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800884c:	e001      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008854:	4618      	mov	r0, r3
 8008856:	3740      	adds	r7, #64	; 0x40
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	58024400 	.word	0x58024400
 8008860:	017d7840 	.word	0x017d7840

08008864 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008868:	f7fe f816 	bl	8006898 <HAL_RCC_GetHCLKFreq>
 800886c:	4602      	mov	r2, r0
 800886e:	4b06      	ldr	r3, [pc, #24]	; (8008888 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	091b      	lsrs	r3, r3, #4
 8008874:	f003 0307 	and.w	r3, r3, #7
 8008878:	4904      	ldr	r1, [pc, #16]	; (800888c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800887a:	5ccb      	ldrb	r3, [r1, r3]
 800887c:	f003 031f 	and.w	r3, r3, #31
 8008880:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008884:	4618      	mov	r0, r3
 8008886:	bd80      	pop	{r7, pc}
 8008888:	58024400 	.word	0x58024400
 800888c:	0800bf70 	.word	0x0800bf70

08008890 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008890:	b480      	push	{r7}
 8008892:	b089      	sub	sp, #36	; 0x24
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008898:	4ba1      	ldr	r3, [pc, #644]	; (8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800889a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889c:	f003 0303 	and.w	r3, r3, #3
 80088a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80088a2:	4b9f      	ldr	r3, [pc, #636]	; (8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a6:	0b1b      	lsrs	r3, r3, #12
 80088a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80088ae:	4b9c      	ldr	r3, [pc, #624]	; (8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b2:	091b      	lsrs	r3, r3, #4
 80088b4:	f003 0301 	and.w	r3, r3, #1
 80088b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80088ba:	4b99      	ldr	r3, [pc, #612]	; (8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088be:	08db      	lsrs	r3, r3, #3
 80088c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	fb02 f303 	mul.w	r3, r2, r3
 80088ca:	ee07 3a90 	vmov	s15, r3
 80088ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 8111 	beq.w	8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	f000 8083 	beq.w	80089ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	f200 80a1 	bhi.w	8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d003      	beq.n	80088fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d056      	beq.n	80089a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80088fa:	e099      	b.n	8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088fc:	4b88      	ldr	r3, [pc, #544]	; (8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0320 	and.w	r3, r3, #32
 8008904:	2b00      	cmp	r3, #0
 8008906:	d02d      	beq.n	8008964 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008908:	4b85      	ldr	r3, [pc, #532]	; (8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	08db      	lsrs	r3, r3, #3
 800890e:	f003 0303 	and.w	r3, r3, #3
 8008912:	4a84      	ldr	r2, [pc, #528]	; (8008b24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008914:	fa22 f303 	lsr.w	r3, r2, r3
 8008918:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	ee07 3a90 	vmov	s15, r3
 8008920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	ee07 3a90 	vmov	s15, r3
 800892a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800892e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008932:	4b7b      	ldr	r3, [pc, #492]	; (8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800893a:	ee07 3a90 	vmov	s15, r3
 800893e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008942:	ed97 6a03 	vldr	s12, [r7, #12]
 8008946:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800894a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800894e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800895a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800895e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008962:	e087      	b.n	8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	ee07 3a90 	vmov	s15, r3
 800896a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800896e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008b2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008976:	4b6a      	ldr	r3, [pc, #424]	; (8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800897e:	ee07 3a90 	vmov	s15, r3
 8008982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008986:	ed97 6a03 	vldr	s12, [r7, #12]
 800898a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800898e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800899a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800899e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089a6:	e065      	b.n	8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	ee07 3a90 	vmov	s15, r3
 80089ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80089b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ba:	4b59      	ldr	r3, [pc, #356]	; (8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089ea:	e043      	b.n	8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008b34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80089fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089fe:	4b48      	ldr	r3, [pc, #288]	; (8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a2e:	e021      	b.n	8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a42:	4b37      	ldr	r3, [pc, #220]	; (8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008a74:	4b2a      	ldr	r3, [pc, #168]	; (8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a78:	0a5b      	lsrs	r3, r3, #9
 8008a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a7e:	ee07 3a90 	vmov	s15, r3
 8008a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a9a:	ee17 2a90 	vmov	r2, s15
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008aa2:	4b1f      	ldr	r3, [pc, #124]	; (8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa6:	0c1b      	lsrs	r3, r3, #16
 8008aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aac:	ee07 3a90 	vmov	s15, r3
 8008ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ab8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008abc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ac8:	ee17 2a90 	vmov	r2, s15
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008ad0:	4b13      	ldr	r3, [pc, #76]	; (8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad4:	0e1b      	lsrs	r3, r3, #24
 8008ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ada:	ee07 3a90 	vmov	s15, r3
 8008ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008aea:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008af6:	ee17 2a90 	vmov	r2, s15
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008afe:	e008      	b.n	8008b12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	609a      	str	r2, [r3, #8]
}
 8008b12:	bf00      	nop
 8008b14:	3724      	adds	r7, #36	; 0x24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	58024400 	.word	0x58024400
 8008b24:	03d09000 	.word	0x03d09000
 8008b28:	46000000 	.word	0x46000000
 8008b2c:	4c742400 	.word	0x4c742400
 8008b30:	4a742400 	.word	0x4a742400
 8008b34:	4bbebc20 	.word	0x4bbebc20

08008b38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b089      	sub	sp, #36	; 0x24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b40:	4ba1      	ldr	r3, [pc, #644]	; (8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b44:	f003 0303 	and.w	r3, r3, #3
 8008b48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008b4a:	4b9f      	ldr	r3, [pc, #636]	; (8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4e:	0d1b      	lsrs	r3, r3, #20
 8008b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008b56:	4b9c      	ldr	r3, [pc, #624]	; (8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5a:	0a1b      	lsrs	r3, r3, #8
 8008b5c:	f003 0301 	and.w	r3, r3, #1
 8008b60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008b62:	4b99      	ldr	r3, [pc, #612]	; (8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b66:	08db      	lsrs	r3, r3, #3
 8008b68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	fb02 f303 	mul.w	r3, r2, r3
 8008b72:	ee07 3a90 	vmov	s15, r3
 8008b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 8111 	beq.w	8008da8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	f000 8083 	beq.w	8008c94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	f200 80a1 	bhi.w	8008cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d003      	beq.n	8008ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d056      	beq.n	8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008ba2:	e099      	b.n	8008cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ba4:	4b88      	ldr	r3, [pc, #544]	; (8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 0320 	and.w	r3, r3, #32
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d02d      	beq.n	8008c0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bb0:	4b85      	ldr	r3, [pc, #532]	; (8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	08db      	lsrs	r3, r3, #3
 8008bb6:	f003 0303 	and.w	r3, r3, #3
 8008bba:	4a84      	ldr	r2, [pc, #528]	; (8008dcc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8008bc0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	ee07 3a90 	vmov	s15, r3
 8008bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	ee07 3a90 	vmov	s15, r3
 8008bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bda:	4b7b      	ldr	r3, [pc, #492]	; (8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be2:	ee07 3a90 	vmov	s15, r3
 8008be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c0a:	e087      	b.n	8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	ee07 3a90 	vmov	s15, r3
 8008c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c1e:	4b6a      	ldr	r3, [pc, #424]	; (8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c26:	ee07 3a90 	vmov	s15, r3
 8008c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c4e:	e065      	b.n	8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	ee07 3a90 	vmov	s15, r3
 8008c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c62:	4b59      	ldr	r3, [pc, #356]	; (8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c6a:	ee07 3a90 	vmov	s15, r3
 8008c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c92:	e043      	b.n	8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	ee07 3a90 	vmov	s15, r3
 8008c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008ddc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ca6:	4b48      	ldr	r3, [pc, #288]	; (8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cae:	ee07 3a90 	vmov	s15, r3
 8008cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cd6:	e021      	b.n	8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	ee07 3a90 	vmov	s15, r3
 8008cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cea:	4b37      	ldr	r3, [pc, #220]	; (8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf2:	ee07 3a90 	vmov	s15, r3
 8008cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cfe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008d1c:	4b2a      	ldr	r3, [pc, #168]	; (8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d20:	0a5b      	lsrs	r3, r3, #9
 8008d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d26:	ee07 3a90 	vmov	s15, r3
 8008d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d36:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d42:	ee17 2a90 	vmov	r2, s15
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008d4a:	4b1f      	ldr	r3, [pc, #124]	; (8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4e:	0c1b      	lsrs	r3, r3, #16
 8008d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d54:	ee07 3a90 	vmov	s15, r3
 8008d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d64:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d70:	ee17 2a90 	vmov	r2, s15
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008d78:	4b13      	ldr	r3, [pc, #76]	; (8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7c:	0e1b      	lsrs	r3, r3, #24
 8008d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d82:	ee07 3a90 	vmov	s15, r3
 8008d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d92:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d9e:	ee17 2a90 	vmov	r2, s15
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008da6:	e008      	b.n	8008dba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	609a      	str	r2, [r3, #8]
}
 8008dba:	bf00      	nop
 8008dbc:	3724      	adds	r7, #36	; 0x24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	58024400 	.word	0x58024400
 8008dcc:	03d09000 	.word	0x03d09000
 8008dd0:	46000000 	.word	0x46000000
 8008dd4:	4c742400 	.word	0x4c742400
 8008dd8:	4a742400 	.word	0x4a742400
 8008ddc:	4bbebc20 	.word	0x4bbebc20

08008de0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b089      	sub	sp, #36	; 0x24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008de8:	4ba0      	ldr	r3, [pc, #640]	; (800906c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dec:	f003 0303 	and.w	r3, r3, #3
 8008df0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008df2:	4b9e      	ldr	r3, [pc, #632]	; (800906c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df6:	091b      	lsrs	r3, r3, #4
 8008df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dfc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008dfe:	4b9b      	ldr	r3, [pc, #620]	; (800906c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e02:	f003 0301 	and.w	r3, r3, #1
 8008e06:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008e08:	4b98      	ldr	r3, [pc, #608]	; (800906c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e0c:	08db      	lsrs	r3, r3, #3
 8008e0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	fb02 f303 	mul.w	r3, r2, r3
 8008e18:	ee07 3a90 	vmov	s15, r3
 8008e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e20:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f000 8111 	beq.w	800904e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	f000 8083 	beq.w	8008f3a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	f200 80a1 	bhi.w	8008f7e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d003      	beq.n	8008e4a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d056      	beq.n	8008ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008e48:	e099      	b.n	8008f7e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e4a:	4b88      	ldr	r3, [pc, #544]	; (800906c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0320 	and.w	r3, r3, #32
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d02d      	beq.n	8008eb2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e56:	4b85      	ldr	r3, [pc, #532]	; (800906c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	08db      	lsrs	r3, r3, #3
 8008e5c:	f003 0303 	and.w	r3, r3, #3
 8008e60:	4a83      	ldr	r2, [pc, #524]	; (8009070 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008e62:	fa22 f303 	lsr.w	r3, r2, r3
 8008e66:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	ee07 3a90 	vmov	s15, r3
 8008e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	ee07 3a90 	vmov	s15, r3
 8008e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e80:	4b7a      	ldr	r3, [pc, #488]	; (800906c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e88:	ee07 3a90 	vmov	s15, r3
 8008e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e90:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e94:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009074 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008eb0:	e087      	b.n	8008fc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	ee07 3a90 	vmov	s15, r3
 8008eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ebc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009078 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ec4:	4b69      	ldr	r3, [pc, #420]	; (800906c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ecc:	ee07 3a90 	vmov	s15, r3
 8008ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ed4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ed8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009074 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ef4:	e065      	b.n	8008fc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	ee07 3a90 	vmov	s15, r3
 8008efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f00:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800907c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008f04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f08:	4b58      	ldr	r3, [pc, #352]	; (800906c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f10:	ee07 3a90 	vmov	s15, r3
 8008f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f18:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f1c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009074 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f38:	e043      	b.n	8008fc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	ee07 3a90 	vmov	s15, r3
 8008f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f44:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009080 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f4c:	4b47      	ldr	r3, [pc, #284]	; (800906c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f54:	ee07 3a90 	vmov	s15, r3
 8008f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f60:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009074 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f7c:	e021      	b.n	8008fc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	ee07 3a90 	vmov	s15, r3
 8008f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f88:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009078 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008f8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f90:	4b36      	ldr	r3, [pc, #216]	; (800906c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f98:	ee07 3a90 	vmov	s15, r3
 8008f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fa0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fa4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009074 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008fa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fc0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008fc2:	4b2a      	ldr	r3, [pc, #168]	; (800906c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc6:	0a5b      	lsrs	r3, r3, #9
 8008fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fcc:	ee07 3a90 	vmov	s15, r3
 8008fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fe8:	ee17 2a90 	vmov	r2, s15
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008ff0:	4b1e      	ldr	r3, [pc, #120]	; (800906c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff4:	0c1b      	lsrs	r3, r3, #16
 8008ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ffa:	ee07 3a90 	vmov	s15, r3
 8008ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800900a:	edd7 6a07 	vldr	s13, [r7, #28]
 800900e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009016:	ee17 2a90 	vmov	r2, s15
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800901e:	4b13      	ldr	r3, [pc, #76]	; (800906c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009022:	0e1b      	lsrs	r3, r3, #24
 8009024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009028:	ee07 3a90 	vmov	s15, r3
 800902c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009030:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009034:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009038:	edd7 6a07 	vldr	s13, [r7, #28]
 800903c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009044:	ee17 2a90 	vmov	r2, s15
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800904c:	e008      	b.n	8009060 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	609a      	str	r2, [r3, #8]
}
 8009060:	bf00      	nop
 8009062:	3724      	adds	r7, #36	; 0x24
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	58024400 	.word	0x58024400
 8009070:	03d09000 	.word	0x03d09000
 8009074:	46000000 	.word	0x46000000
 8009078:	4c742400 	.word	0x4c742400
 800907c:	4a742400 	.word	0x4a742400
 8009080:	4bbebc20 	.word	0x4bbebc20

08009084 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800908e:	2300      	movs	r3, #0
 8009090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009092:	4b53      	ldr	r3, [pc, #332]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 8009094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009096:	f003 0303 	and.w	r3, r3, #3
 800909a:	2b03      	cmp	r3, #3
 800909c:	d101      	bne.n	80090a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e099      	b.n	80091d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80090a2:	4b4f      	ldr	r3, [pc, #316]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a4e      	ldr	r2, [pc, #312]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 80090a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80090ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090ae:	f7f9 fd05 	bl	8002abc <HAL_GetTick>
 80090b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80090b4:	e008      	b.n	80090c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80090b6:	f7f9 fd01 	bl	8002abc <HAL_GetTick>
 80090ba:	4602      	mov	r2, r0
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d901      	bls.n	80090c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e086      	b.n	80091d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80090c8:	4b45      	ldr	r3, [pc, #276]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1f0      	bne.n	80090b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80090d4:	4b42      	ldr	r3, [pc, #264]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 80090d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	031b      	lsls	r3, r3, #12
 80090e2:	493f      	ldr	r1, [pc, #252]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 80090e4:	4313      	orrs	r3, r2
 80090e6:	628b      	str	r3, [r1, #40]	; 0x28
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	3b01      	subs	r3, #1
 80090ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	3b01      	subs	r3, #1
 80090f8:	025b      	lsls	r3, r3, #9
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	431a      	orrs	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	3b01      	subs	r3, #1
 8009104:	041b      	lsls	r3, r3, #16
 8009106:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800910a:	431a      	orrs	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	3b01      	subs	r3, #1
 8009112:	061b      	lsls	r3, r3, #24
 8009114:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009118:	4931      	ldr	r1, [pc, #196]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 800911a:	4313      	orrs	r3, r2
 800911c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800911e:	4b30      	ldr	r3, [pc, #192]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 8009120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009122:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	492d      	ldr	r1, [pc, #180]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 800912c:	4313      	orrs	r3, r2
 800912e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009130:	4b2b      	ldr	r3, [pc, #172]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 8009132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009134:	f023 0220 	bic.w	r2, r3, #32
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	699b      	ldr	r3, [r3, #24]
 800913c:	4928      	ldr	r1, [pc, #160]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 800913e:	4313      	orrs	r3, r2
 8009140:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009142:	4b27      	ldr	r3, [pc, #156]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 8009144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009146:	4a26      	ldr	r2, [pc, #152]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 8009148:	f023 0310 	bic.w	r3, r3, #16
 800914c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800914e:	4b24      	ldr	r3, [pc, #144]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 8009150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009152:	4b24      	ldr	r3, [pc, #144]	; (80091e4 <RCCEx_PLL2_Config+0x160>)
 8009154:	4013      	ands	r3, r2
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	69d2      	ldr	r2, [r2, #28]
 800915a:	00d2      	lsls	r2, r2, #3
 800915c:	4920      	ldr	r1, [pc, #128]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 800915e:	4313      	orrs	r3, r2
 8009160:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009162:	4b1f      	ldr	r3, [pc, #124]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 8009164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009166:	4a1e      	ldr	r2, [pc, #120]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 8009168:	f043 0310 	orr.w	r3, r3, #16
 800916c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d106      	bne.n	8009182 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009174:	4b1a      	ldr	r3, [pc, #104]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 8009176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009178:	4a19      	ldr	r2, [pc, #100]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 800917a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800917e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009180:	e00f      	b.n	80091a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d106      	bne.n	8009196 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009188:	4b15      	ldr	r3, [pc, #84]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 800918a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918c:	4a14      	ldr	r2, [pc, #80]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 800918e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009192:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009194:	e005      	b.n	80091a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009196:	4b12      	ldr	r3, [pc, #72]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 8009198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919a:	4a11      	ldr	r2, [pc, #68]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 800919c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80091a2:	4b0f      	ldr	r3, [pc, #60]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a0e      	ldr	r2, [pc, #56]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 80091a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80091ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091ae:	f7f9 fc85 	bl	8002abc <HAL_GetTick>
 80091b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80091b4:	e008      	b.n	80091c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80091b6:	f7f9 fc81 	bl	8002abc <HAL_GetTick>
 80091ba:	4602      	mov	r2, r0
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d901      	bls.n	80091c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80091c4:	2303      	movs	r3, #3
 80091c6:	e006      	b.n	80091d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80091c8:	4b05      	ldr	r3, [pc, #20]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d0f0      	beq.n	80091b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	58024400 	.word	0x58024400
 80091e4:	ffff0007 	.word	0xffff0007

080091e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091f6:	4b53      	ldr	r3, [pc, #332]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80091f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fa:	f003 0303 	and.w	r3, r3, #3
 80091fe:	2b03      	cmp	r3, #3
 8009200:	d101      	bne.n	8009206 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e099      	b.n	800933a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009206:	4b4f      	ldr	r3, [pc, #316]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a4e      	ldr	r2, [pc, #312]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 800920c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009212:	f7f9 fc53 	bl	8002abc <HAL_GetTick>
 8009216:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009218:	e008      	b.n	800922c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800921a:	f7f9 fc4f 	bl	8002abc <HAL_GetTick>
 800921e:	4602      	mov	r2, r0
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	2b02      	cmp	r3, #2
 8009226:	d901      	bls.n	800922c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009228:	2303      	movs	r3, #3
 800922a:	e086      	b.n	800933a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800922c:	4b45      	ldr	r3, [pc, #276]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1f0      	bne.n	800921a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009238:	4b42      	ldr	r3, [pc, #264]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 800923a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	051b      	lsls	r3, r3, #20
 8009246:	493f      	ldr	r1, [pc, #252]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 8009248:	4313      	orrs	r3, r2
 800924a:	628b      	str	r3, [r1, #40]	; 0x28
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	3b01      	subs	r3, #1
 8009252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	3b01      	subs	r3, #1
 800925c:	025b      	lsls	r3, r3, #9
 800925e:	b29b      	uxth	r3, r3
 8009260:	431a      	orrs	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	3b01      	subs	r3, #1
 8009268:	041b      	lsls	r3, r3, #16
 800926a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800926e:	431a      	orrs	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	3b01      	subs	r3, #1
 8009276:	061b      	lsls	r3, r3, #24
 8009278:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800927c:	4931      	ldr	r1, [pc, #196]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 800927e:	4313      	orrs	r3, r2
 8009280:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009282:	4b30      	ldr	r3, [pc, #192]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 8009284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009286:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	492d      	ldr	r1, [pc, #180]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 8009290:	4313      	orrs	r3, r2
 8009292:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009294:	4b2b      	ldr	r3, [pc, #172]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 8009296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009298:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	4928      	ldr	r1, [pc, #160]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092a2:	4313      	orrs	r3, r2
 80092a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80092a6:	4b27      	ldr	r3, [pc, #156]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092aa:	4a26      	ldr	r2, [pc, #152]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80092b2:	4b24      	ldr	r3, [pc, #144]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092b6:	4b24      	ldr	r3, [pc, #144]	; (8009348 <RCCEx_PLL3_Config+0x160>)
 80092b8:	4013      	ands	r3, r2
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	69d2      	ldr	r2, [r2, #28]
 80092be:	00d2      	lsls	r2, r2, #3
 80092c0:	4920      	ldr	r1, [pc, #128]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092c2:	4313      	orrs	r3, r2
 80092c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80092c6:	4b1f      	ldr	r3, [pc, #124]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ca:	4a1e      	ldr	r2, [pc, #120]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d106      	bne.n	80092e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80092d8:	4b1a      	ldr	r3, [pc, #104]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092dc:	4a19      	ldr	r2, [pc, #100]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80092e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092e4:	e00f      	b.n	8009306 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d106      	bne.n	80092fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80092ec:	4b15      	ldr	r3, [pc, #84]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f0:	4a14      	ldr	r2, [pc, #80]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80092f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092f8:	e005      	b.n	8009306 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80092fa:	4b12      	ldr	r3, [pc, #72]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fe:	4a11      	ldr	r2, [pc, #68]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 8009300:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009304:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009306:	4b0f      	ldr	r3, [pc, #60]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a0e      	ldr	r2, [pc, #56]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 800930c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009312:	f7f9 fbd3 	bl	8002abc <HAL_GetTick>
 8009316:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009318:	e008      	b.n	800932c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800931a:	f7f9 fbcf 	bl	8002abc <HAL_GetTick>
 800931e:	4602      	mov	r2, r0
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	2b02      	cmp	r3, #2
 8009326:	d901      	bls.n	800932c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009328:	2303      	movs	r3, #3
 800932a:	e006      	b.n	800933a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800932c:	4b05      	ldr	r3, [pc, #20]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d0f0      	beq.n	800931a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009338:	7bfb      	ldrb	r3, [r7, #15]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	58024400 	.word	0x58024400
 8009348:	ffff0007 	.word	0xffff0007

0800934c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d071      	beq.n	8009442 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b00      	cmp	r3, #0
 8009368:	d106      	bne.n	8009378 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7f8 fed2 	bl	800211c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2202      	movs	r2, #2
 800937c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	f003 0310 	and.w	r3, r3, #16
 800938a:	2b10      	cmp	r3, #16
 800938c:	d050      	beq.n	8009430 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	22ca      	movs	r2, #202	; 0xca
 8009394:	625a      	str	r2, [r3, #36]	; 0x24
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2253      	movs	r2, #83	; 0x53
 800939c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f87a 	bl	8009498 <RTC_EnterInitMode>
 80093a4:	4603      	mov	r3, r0
 80093a6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d124      	bne.n	80093f8 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	6899      	ldr	r1, [r3, #8]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	4b24      	ldr	r3, [pc, #144]	; (800944c <HAL_RTC_Init+0x100>)
 80093ba:	400b      	ands	r3, r1
 80093bc:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	6899      	ldr	r1, [r3, #8]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685a      	ldr	r2, [r3, #4]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	431a      	orrs	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	431a      	orrs	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	430a      	orrs	r2, r1
 80093da:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	0419      	lsls	r1, r3, #16
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68da      	ldr	r2, [r3, #12]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	430a      	orrs	r2, r1
 80093ec:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f886 	bl	8009500 <RTC_ExitInitMode>
 80093f4:	4603      	mov	r3, r0
 80093f6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d113      	bne.n	8009426 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f022 0203 	bic.w	r2, r2, #3
 800940c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	69da      	ldr	r2, [r3, #28]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	695b      	ldr	r3, [r3, #20]
 800941c:	431a      	orrs	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	430a      	orrs	r2, r1
 8009424:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	22ff      	movs	r2, #255	; 0xff
 800942c:	625a      	str	r2, [r3, #36]	; 0x24
 800942e:	e001      	b.n	8009434 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009430:	2300      	movs	r3, #0
 8009432:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009434:	7bfb      	ldrb	r3, [r7, #15]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d103      	bne.n	8009442 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8009442:	7bfb      	ldrb	r3, [r7, #15]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	ff8fffbf 	.word	0xff8fffbf

08009450 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a0d      	ldr	r2, [pc, #52]	; (8009494 <HAL_RTC_WaitForSynchro+0x44>)
 800945e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8009460:	f7f9 fb2c 	bl	8002abc <HAL_GetTick>
 8009464:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009466:	e009      	b.n	800947c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009468:	f7f9 fb28 	bl	8002abc <HAL_GetTick>
 800946c:	4602      	mov	r2, r0
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009476:	d901      	bls.n	800947c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e007      	b.n	800948c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	f003 0320 	and.w	r3, r3, #32
 8009486:	2b00      	cmp	r3, #0
 8009488:	d0ee      	beq.n	8009468 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	0003ff5f 	.word	0x0003ff5f

08009498 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094a0:	2300      	movs	r3, #0
 80094a2:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d120      	bne.n	80094f4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f04f 32ff 	mov.w	r2, #4294967295
 80094ba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80094bc:	f7f9 fafe 	bl	8002abc <HAL_GetTick>
 80094c0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80094c2:	e00d      	b.n	80094e0 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80094c4:	f7f9 fafa 	bl	8002abc <HAL_GetTick>
 80094c8:	4602      	mov	r2, r0
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	1ad3      	subs	r3, r2, r3
 80094ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094d2:	d905      	bls.n	80094e0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80094d4:	2303      	movs	r3, #3
 80094d6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2203      	movs	r2, #3
 80094dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d102      	bne.n	80094f4 <RTC_EnterInitMode+0x5c>
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d1e7      	bne.n	80094c4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
	...

08009500 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800950c:	4b1a      	ldr	r3, [pc, #104]	; (8009578 <RTC_ExitInitMode+0x78>)
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	4a19      	ldr	r2, [pc, #100]	; (8009578 <RTC_ExitInitMode+0x78>)
 8009512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009516:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009518:	4b17      	ldr	r3, [pc, #92]	; (8009578 <RTC_ExitInitMode+0x78>)
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f003 0320 	and.w	r3, r3, #32
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10c      	bne.n	800953e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f7ff ff93 	bl	8009450 <HAL_RTC_WaitForSynchro>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d01e      	beq.n	800956e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2203      	movs	r2, #3
 8009534:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009538:	2303      	movs	r3, #3
 800953a:	73fb      	strb	r3, [r7, #15]
 800953c:	e017      	b.n	800956e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800953e:	4b0e      	ldr	r3, [pc, #56]	; (8009578 <RTC_ExitInitMode+0x78>)
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	4a0d      	ldr	r2, [pc, #52]	; (8009578 <RTC_ExitInitMode+0x78>)
 8009544:	f023 0320 	bic.w	r3, r3, #32
 8009548:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7ff ff80 	bl	8009450 <HAL_RTC_WaitForSynchro>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d005      	beq.n	8009562 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2203      	movs	r2, #3
 800955a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800955e:	2303      	movs	r3, #3
 8009560:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009562:	4b05      	ldr	r3, [pc, #20]	; (8009578 <RTC_ExitInitMode+0x78>)
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	4a04      	ldr	r2, [pc, #16]	; (8009578 <RTC_ExitInitMode+0x78>)
 8009568:	f043 0320 	orr.w	r3, r3, #32
 800956c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800956e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	58004000 	.word	0x58004000

0800957c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b08a      	sub	sp, #40	; 0x28
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e28e      	b.n	8009aac <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800958e:	f7f9 fac5 	bl	8002b1c <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009598:	2b01      	cmp	r3, #1
 800959a:	d113      	bne.n	80095c4 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a96      	ldr	r2, [pc, #600]	; (80097fc <HAL_SAI_Init+0x280>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d004      	beq.n	80095b0 <HAL_SAI_Init+0x34>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a95      	ldr	r2, [pc, #596]	; (8009800 <HAL_SAI_Init+0x284>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d107      	bne.n	80095c0 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d103      	bne.n	80095c0 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d001      	beq.n	80095c4 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e273      	b.n	8009aac <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a8c      	ldr	r2, [pc, #560]	; (80097fc <HAL_SAI_Init+0x280>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d004      	beq.n	80095d8 <HAL_SAI_Init+0x5c>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a8c      	ldr	r2, [pc, #560]	; (8009804 <HAL_SAI_Init+0x288>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d102      	bne.n	80095de <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 80095d8:	4b8b      	ldr	r3, [pc, #556]	; (8009808 <HAL_SAI_Init+0x28c>)
 80095da:	61bb      	str	r3, [r7, #24]
 80095dc:	e028      	b.n	8009630 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a8a      	ldr	r2, [pc, #552]	; (800980c <HAL_SAI_Init+0x290>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d004      	beq.n	80095f2 <HAL_SAI_Init+0x76>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a88      	ldr	r2, [pc, #544]	; (8009810 <HAL_SAI_Init+0x294>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d102      	bne.n	80095f8 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 80095f2:	4b88      	ldr	r3, [pc, #544]	; (8009814 <HAL_SAI_Init+0x298>)
 80095f4:	61bb      	str	r3, [r7, #24]
 80095f6:	e01b      	b.n	8009630 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a86      	ldr	r2, [pc, #536]	; (8009818 <HAL_SAI_Init+0x29c>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d004      	beq.n	800960c <HAL_SAI_Init+0x90>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a85      	ldr	r2, [pc, #532]	; (800981c <HAL_SAI_Init+0x2a0>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d102      	bne.n	8009612 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800960c:	4b84      	ldr	r3, [pc, #528]	; (8009820 <HAL_SAI_Init+0x2a4>)
 800960e:	61bb      	str	r3, [r7, #24]
 8009610:	e00e      	b.n	8009630 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a7a      	ldr	r2, [pc, #488]	; (8009800 <HAL_SAI_Init+0x284>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d004      	beq.n	8009626 <HAL_SAI_Init+0xaa>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a80      	ldr	r2, [pc, #512]	; (8009824 <HAL_SAI_Init+0x2a8>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d102      	bne.n	800962c <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8009626:	4b80      	ldr	r3, [pc, #512]	; (8009828 <HAL_SAI_Init+0x2ac>)
 8009628:	61bb      	str	r3, [r7, #24]
 800962a:	e001      	b.n	8009630 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e23d      	b.n	8009aac <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009636:	b2db      	uxtb	r3, r3
 8009638:	2b00      	cmp	r3, #0
 800963a:	d106      	bne.n	800964a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7f9 f833 	bl	80026b0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fa40 	bl	8009ad0 <SAI_Disable>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d001      	beq.n	800965a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e228      	b.n	8009aac <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2202      	movs	r2, #2
 800965e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	2b02      	cmp	r3, #2
 8009668:	d00c      	beq.n	8009684 <HAL_SAI_Init+0x108>
 800966a:	2b02      	cmp	r3, #2
 800966c:	d80d      	bhi.n	800968a <HAL_SAI_Init+0x10e>
 800966e:	2b00      	cmp	r3, #0
 8009670:	d002      	beq.n	8009678 <HAL_SAI_Init+0xfc>
 8009672:	2b01      	cmp	r3, #1
 8009674:	d003      	beq.n	800967e <HAL_SAI_Init+0x102>
 8009676:	e008      	b.n	800968a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009678:	2300      	movs	r3, #0
 800967a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800967c:	e008      	b.n	8009690 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800967e:	2310      	movs	r3, #16
 8009680:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009682:	e005      	b.n	8009690 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009684:	2320      	movs	r3, #32
 8009686:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009688:	e002      	b.n	8009690 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800968e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	2b05      	cmp	r3, #5
 8009696:	d832      	bhi.n	80096fe <HAL_SAI_Init+0x182>
 8009698:	a201      	add	r2, pc, #4	; (adr r2, 80096a0 <HAL_SAI_Init+0x124>)
 800969a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969e:	bf00      	nop
 80096a0:	080096b9 	.word	0x080096b9
 80096a4:	080096bf 	.word	0x080096bf
 80096a8:	080096c7 	.word	0x080096c7
 80096ac:	080096cf 	.word	0x080096cf
 80096b0:	080096df 	.word	0x080096df
 80096b4:	080096ef 	.word	0x080096ef
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80096b8:	2300      	movs	r3, #0
 80096ba:	61fb      	str	r3, [r7, #28]
      break;
 80096bc:	e022      	b.n	8009704 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80096be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096c2:	61fb      	str	r3, [r7, #28]
      break;
 80096c4:	e01e      	b.n	8009704 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80096c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096ca:	61fb      	str	r3, [r7, #28]
      break;
 80096cc:	e01a      	b.n	8009704 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80096ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096d2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80096d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d6:	f043 0301 	orr.w	r3, r3, #1
 80096da:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80096dc:	e012      	b.n	8009704 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80096de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096e2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 80096e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e6:	f043 0302 	orr.w	r3, r3, #2
 80096ea:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80096ec:	e00a      	b.n	8009704 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80096ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096f2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80096f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f6:	f043 0303 	orr.w	r3, r3, #3
 80096fa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80096fc:	e002      	b.n	8009704 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	61fb      	str	r3, [r7, #28]
      break;
 8009702:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009708:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a1b      	ldr	r3, [r3, #32]
 800970e:	2b00      	cmp	r3, #0
 8009710:	f000 80c5 	beq.w	800989e <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8009714:	2300      	movs	r3, #0
 8009716:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a37      	ldr	r2, [pc, #220]	; (80097fc <HAL_SAI_Init+0x280>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d004      	beq.n	800972c <HAL_SAI_Init+0x1b0>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a37      	ldr	r2, [pc, #220]	; (8009804 <HAL_SAI_Init+0x288>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d106      	bne.n	800973a <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800972c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009730:	f04f 0100 	mov.w	r1, #0
 8009734:	f7fe fb16 	bl	8007d64 <HAL_RCCEx_GetPeriphCLKFreq>
 8009738:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a33      	ldr	r2, [pc, #204]	; (800980c <HAL_SAI_Init+0x290>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d004      	beq.n	800974e <HAL_SAI_Init+0x1d2>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a31      	ldr	r2, [pc, #196]	; (8009810 <HAL_SAI_Init+0x294>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d106      	bne.n	800975c <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800974e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009752:	f04f 0100 	mov.w	r1, #0
 8009756:	f7fe fb05 	bl	8007d64 <HAL_RCCEx_GetPeriphCLKFreq>
 800975a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a2d      	ldr	r2, [pc, #180]	; (8009818 <HAL_SAI_Init+0x29c>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d004      	beq.n	8009770 <HAL_SAI_Init+0x1f4>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a2c      	ldr	r2, [pc, #176]	; (800981c <HAL_SAI_Init+0x2a0>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d106      	bne.n	800977e <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8009770:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009774:	f04f 0100 	mov.w	r1, #0
 8009778:	f7fe faf4 	bl	8007d64 <HAL_RCCEx_GetPeriphCLKFreq>
 800977c:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a1f      	ldr	r2, [pc, #124]	; (8009800 <HAL_SAI_Init+0x284>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d106      	bne.n	8009796 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009788:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800978c:	f04f 0100 	mov.w	r1, #0
 8009790:	f7fe fae8 	bl	8007d64 <HAL_RCCEx_GetPeriphCLKFreq>
 8009794:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a22      	ldr	r2, [pc, #136]	; (8009824 <HAL_SAI_Init+0x2a8>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d106      	bne.n	80097ae <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80097a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80097a4:	f04f 0100 	mov.w	r1, #0
 80097a8:	f7fe fadc 	bl	8007d64 <HAL_RCCEx_GetPeriphCLKFreq>
 80097ac:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	699b      	ldr	r3, [r3, #24]
 80097b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80097b6:	d139      	bne.n	800982c <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097bc:	2b04      	cmp	r3, #4
 80097be:	d102      	bne.n	80097c6 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80097c0:	2340      	movs	r3, #64	; 0x40
 80097c2:	60fb      	str	r3, [r7, #12]
 80097c4:	e00a      	b.n	80097dc <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ca:	2b08      	cmp	r3, #8
 80097cc:	d103      	bne.n	80097d6 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80097ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097d2:	60fb      	str	r3, [r7, #12]
 80097d4:	e002      	b.n	80097dc <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097da:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	4613      	mov	r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	005b      	lsls	r3, r3, #1
 80097e6:	4619      	mov	r1, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a1b      	ldr	r3, [r3, #32]
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	fb02 f303 	mul.w	r3, r2, r3
 80097f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80097f6:	613b      	str	r3, [r7, #16]
 80097f8:	e030      	b.n	800985c <HAL_SAI_Init+0x2e0>
 80097fa:	bf00      	nop
 80097fc:	40015804 	.word	0x40015804
 8009800:	58005404 	.word	0x58005404
 8009804:	40015824 	.word	0x40015824
 8009808:	40015800 	.word	0x40015800
 800980c:	40015c04 	.word	0x40015c04
 8009810:	40015c24 	.word	0x40015c24
 8009814:	40015c00 	.word	0x40015c00
 8009818:	40016004 	.word	0x40016004
 800981c:	40016024 	.word	0x40016024
 8009820:	40016000 	.word	0x40016000
 8009824:	58005424 	.word	0x58005424
 8009828:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009830:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009834:	d101      	bne.n	800983a <HAL_SAI_Init+0x2be>
 8009836:	2302      	movs	r3, #2
 8009838:	e000      	b.n	800983c <HAL_SAI_Init+0x2c0>
 800983a:	2301      	movs	r3, #1
 800983c:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800983e:	697a      	ldr	r2, [r7, #20]
 8009840:	4613      	mov	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4413      	add	r3, r2
 8009846:	005b      	lsls	r3, r3, #1
 8009848:	4619      	mov	r1, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a1b      	ldr	r3, [r3, #32]
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	fb02 f303 	mul.w	r3, r2, r3
 8009854:	021b      	lsls	r3, r3, #8
 8009856:	fbb1 f3f3 	udiv	r3, r1, r3
 800985a:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	4a95      	ldr	r2, [pc, #596]	; (8009ab4 <HAL_SAI_Init+0x538>)
 8009860:	fba2 2303 	umull	r2, r3, r2, r3
 8009864:	08da      	lsrs	r2, r3, #3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800986a:	6939      	ldr	r1, [r7, #16]
 800986c:	4b91      	ldr	r3, [pc, #580]	; (8009ab4 <HAL_SAI_Init+0x538>)
 800986e:	fba3 2301 	umull	r2, r3, r3, r1
 8009872:	08da      	lsrs	r2, r3, #3
 8009874:	4613      	mov	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	005b      	lsls	r3, r3, #1
 800987c:	1aca      	subs	r2, r1, r3
 800987e:	2a08      	cmp	r2, #8
 8009880:	d904      	bls.n	800988c <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009886:	1c5a      	adds	r2, r3, #1
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009890:	2b04      	cmp	r3, #4
 8009892:	d104      	bne.n	800989e <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009898:	085a      	lsrs	r2, r3, #1
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <HAL_SAI_Init+0x332>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d109      	bne.n	80098c2 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d101      	bne.n	80098ba <HAL_SAI_Init+0x33e>
 80098b6:	2300      	movs	r3, #0
 80098b8:	e001      	b.n	80098be <HAL_SAI_Init+0x342>
 80098ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098be:	623b      	str	r3, [r7, #32]
 80098c0:	e008      	b.n	80098d4 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d102      	bne.n	80098d0 <HAL_SAI_Init+0x354>
 80098ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098ce:	e000      	b.n	80098d2 <HAL_SAI_Init+0x356>
 80098d0:	2300      	movs	r3, #0
 80098d2:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80098d4:	f7f9 f922 	bl	8002b1c <HAL_GetREVID>
 80098d8:	4603      	mov	r3, r0
 80098da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098de:	d331      	bcc.n	8009944 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6819      	ldr	r1, [r3, #0]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	4b73      	ldr	r3, [pc, #460]	; (8009ab8 <HAL_SAI_Init+0x53c>)
 80098ec:	400b      	ands	r3, r1
 80098ee:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	6819      	ldr	r1, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	685a      	ldr	r2, [r3, #4]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098fe:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009904:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800990a:	431a      	orrs	r2, r3
 800990c:	6a3b      	ldr	r3, [r7, #32]
 800990e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009918:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	695b      	ldr	r3, [r3, #20]
 800991e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009924:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992a:	051b      	lsls	r3, r3, #20
 800992c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009932:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	430a      	orrs	r2, r1
 8009940:	601a      	str	r2, [r3, #0]
 8009942:	e02d      	b.n	80099a0 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	6819      	ldr	r1, [r3, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	4b5b      	ldr	r3, [pc, #364]	; (8009abc <HAL_SAI_Init+0x540>)
 8009950:	400b      	ands	r3, r1
 8009952:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6819      	ldr	r1, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	685a      	ldr	r2, [r3, #4]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009962:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009968:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800996e:	431a      	orrs	r2, r3
 8009970:	6a3b      	ldr	r3, [r7, #32]
 8009972:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800997c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009988:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998e:	051b      	lsls	r3, r3, #20
 8009990:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009996:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	430a      	orrs	r2, r1
 800999e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6859      	ldr	r1, [r3, #4]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	4b45      	ldr	r3, [pc, #276]	; (8009ac0 <HAL_SAI_Init+0x544>)
 80099ac:	400b      	ands	r3, r1
 80099ae:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6859      	ldr	r1, [r3, #4]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	69da      	ldr	r2, [r3, #28]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099be:	431a      	orrs	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c4:	431a      	orrs	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	430a      	orrs	r2, r1
 80099cc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	6899      	ldr	r1, [r3, #8]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	4b3a      	ldr	r3, [pc, #232]	; (8009ac4 <HAL_SAI_Init+0x548>)
 80099da:	400b      	ands	r3, r1
 80099dc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6899      	ldr	r1, [r3, #8]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099e8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80099ee:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80099f4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80099fa:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a00:	3b01      	subs	r3, #1
 8009a02:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009a04:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68d9      	ldr	r1, [r3, #12]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009a1c:	400b      	ands	r3, r1
 8009a1e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68d9      	ldr	r1, [r3, #12]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a2e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a34:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009a36:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	021b      	lsls	r3, r3, #8
 8009a40:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	430a      	orrs	r2, r1
 8009a48:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a1e      	ldr	r2, [pc, #120]	; (8009ac8 <HAL_SAI_Init+0x54c>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d004      	beq.n	8009a5e <HAL_SAI_Init+0x4e2>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a1c      	ldr	r2, [pc, #112]	; (8009acc <HAL_SAI_Init+0x550>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d119      	bne.n	8009a92 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a62:	f023 0201 	bic.w	r2, r3, #1
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d10e      	bne.n	8009a92 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009a80:	431a      	orrs	r2, r3
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a8a:	f043 0201 	orr.w	r2, r3, #1
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3728      	adds	r7, #40	; 0x28
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	cccccccd 	.word	0xcccccccd
 8009ab8:	f005c010 	.word	0xf005c010
 8009abc:	f805c010 	.word	0xf805c010
 8009ac0:	ffff1ff0 	.word	0xffff1ff0
 8009ac4:	fff88000 	.word	0xfff88000
 8009ac8:	40015804 	.word	0x40015804
 8009acc:	58005404 	.word	0x58005404

08009ad0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009ad8:	4b18      	ldr	r3, [pc, #96]	; (8009b3c <SAI_Disable+0x6c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a18      	ldr	r2, [pc, #96]	; (8009b40 <SAI_Disable+0x70>)
 8009ade:	fba2 2303 	umull	r2, r3, r2, r3
 8009ae2:	0b1b      	lsrs	r3, r3, #12
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009afa:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10a      	bne.n	8009b18 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8009b12:	2303      	movs	r3, #3
 8009b14:	72fb      	strb	r3, [r7, #11]
      break;
 8009b16:	e009      	b.n	8009b2c <SAI_Disable+0x5c>
    }
    count--;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1e7      	bne.n	8009afc <SAI_Disable+0x2c>

  return status;
 8009b2c:	7afb      	ldrb	r3, [r7, #11]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3714      	adds	r7, #20
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	24000000 	.word	0x24000000
 8009b40:	95cbec1b 	.word	0x95cbec1b

08009b44 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d101      	bne.n	8009b58 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	e02b      	b.n	8009bb0 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d106      	bne.n	8009b72 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f7f8 fd95 	bl	800269c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2202      	movs	r2, #2
 8009b76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	3304      	adds	r3, #4
 8009b82:	4619      	mov	r1, r3
 8009b84:	4610      	mov	r0, r2
 8009b86:	f001 fdb3 	bl	800b6f0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6818      	ldr	r0, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	461a      	mov	r2, r3
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	f001 fe07 	bl	800b7a8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009b9a:	4b07      	ldr	r3, [pc, #28]	; (8009bb8 <HAL_SDRAM_Init+0x74>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a06      	ldr	r2, [pc, #24]	; (8009bb8 <HAL_SDRAM_Init+0x74>)
 8009ba0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ba4:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	52004000 	.word	0x52004000

08009bbc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d101      	bne.n	8009bce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e10f      	b.n	8009dee <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a87      	ldr	r2, [pc, #540]	; (8009df8 <HAL_SPI_Init+0x23c>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d00f      	beq.n	8009bfe <HAL_SPI_Init+0x42>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a86      	ldr	r2, [pc, #536]	; (8009dfc <HAL_SPI_Init+0x240>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d00a      	beq.n	8009bfe <HAL_SPI_Init+0x42>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a84      	ldr	r2, [pc, #528]	; (8009e00 <HAL_SPI_Init+0x244>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d005      	beq.n	8009bfe <HAL_SPI_Init+0x42>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	2b0f      	cmp	r3, #15
 8009bf8:	d901      	bls.n	8009bfe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e0f7      	b.n	8009dee <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f900 	bl	8009e04 <SPI_GetPacketSize>
 8009c04:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a7b      	ldr	r2, [pc, #492]	; (8009df8 <HAL_SPI_Init+0x23c>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d00c      	beq.n	8009c2a <HAL_SPI_Init+0x6e>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a79      	ldr	r2, [pc, #484]	; (8009dfc <HAL_SPI_Init+0x240>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d007      	beq.n	8009c2a <HAL_SPI_Init+0x6e>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a78      	ldr	r2, [pc, #480]	; (8009e00 <HAL_SPI_Init+0x244>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d002      	beq.n	8009c2a <HAL_SPI_Init+0x6e>
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2b08      	cmp	r3, #8
 8009c28:	d811      	bhi.n	8009c4e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009c2e:	4a72      	ldr	r2, [pc, #456]	; (8009df8 <HAL_SPI_Init+0x23c>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d009      	beq.n	8009c48 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a70      	ldr	r2, [pc, #448]	; (8009dfc <HAL_SPI_Init+0x240>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d004      	beq.n	8009c48 <HAL_SPI_Init+0x8c>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a6f      	ldr	r2, [pc, #444]	; (8009e00 <HAL_SPI_Init+0x244>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d104      	bne.n	8009c52 <HAL_SPI_Init+0x96>
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2b10      	cmp	r3, #16
 8009c4c:	d901      	bls.n	8009c52 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e0cd      	b.n	8009dee <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d106      	bne.n	8009c6c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f7f8 fa8a 	bl	8002180 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2202      	movs	r2, #2
 8009c70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f022 0201 	bic.w	r2, r2, #1
 8009c82:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009c8e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	699b      	ldr	r3, [r3, #24]
 8009c94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c98:	d119      	bne.n	8009cce <HAL_SPI_Init+0x112>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ca2:	d103      	bne.n	8009cac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d008      	beq.n	8009cbe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10c      	bne.n	8009cce <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009cb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cbc:	d107      	bne.n	8009cce <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ccc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00f      	beq.n	8009cfa <HAL_SPI_Init+0x13e>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	2b06      	cmp	r3, #6
 8009ce0:	d90b      	bls.n	8009cfa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	430a      	orrs	r2, r1
 8009cf6:	601a      	str	r2, [r3, #0]
 8009cf8:	e007      	b.n	8009d0a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d08:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	69da      	ldr	r2, [r3, #28]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d12:	431a      	orrs	r2, r3
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	431a      	orrs	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d1c:	ea42 0103 	orr.w	r1, r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	68da      	ldr	r2, [r3, #12]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	430a      	orrs	r2, r1
 8009d2a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d34:	431a      	orrs	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3a:	431a      	orrs	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	431a      	orrs	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	431a      	orrs	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	695b      	ldr	r3, [r3, #20]
 8009d4c:	431a      	orrs	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a1b      	ldr	r3, [r3, #32]
 8009d52:	431a      	orrs	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	431a      	orrs	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d5e:	431a      	orrs	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	431a      	orrs	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d6a:	ea42 0103 	orr.w	r1, r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	430a      	orrs	r2, r1
 8009d78:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d113      	bne.n	8009daa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d94:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009da8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f022 0201 	bic.w	r2, r2, #1
 8009db8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00a      	beq.n	8009ddc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	430a      	orrs	r2, r1
 8009dda:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	40013000 	.word	0x40013000
 8009dfc:	40003800 	.word	0x40003800
 8009e00:	40003c00 	.word	0x40003c00

08009e04 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e10:	095b      	lsrs	r3, r3, #5
 8009e12:	3301      	adds	r3, #1
 8009e14:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	3307      	adds	r3, #7
 8009e22:	08db      	lsrs	r3, r3, #3
 8009e24:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	fb02 f303 	mul.w	r3, r2, r3
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3714      	adds	r7, #20
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr

08009e3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b082      	sub	sp, #8
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e049      	b.n	8009ee0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d106      	bne.n	8009e66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7f8 fa57 	bl	8002314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2202      	movs	r2, #2
 8009e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	3304      	adds	r3, #4
 8009e76:	4619      	mov	r1, r3
 8009e78:	4610      	mov	r0, r2
 8009e7a:	f000 f99d 	bl	800a1b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2201      	movs	r2, #1
 8009e82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d001      	beq.n	8009f00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	e04c      	b.n	8009f9a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2202      	movs	r2, #2
 8009f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a26      	ldr	r2, [pc, #152]	; (8009fa8 <HAL_TIM_Base_Start+0xc0>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d022      	beq.n	8009f58 <HAL_TIM_Base_Start+0x70>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f1a:	d01d      	beq.n	8009f58 <HAL_TIM_Base_Start+0x70>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a22      	ldr	r2, [pc, #136]	; (8009fac <HAL_TIM_Base_Start+0xc4>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d018      	beq.n	8009f58 <HAL_TIM_Base_Start+0x70>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a21      	ldr	r2, [pc, #132]	; (8009fb0 <HAL_TIM_Base_Start+0xc8>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d013      	beq.n	8009f58 <HAL_TIM_Base_Start+0x70>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a1f      	ldr	r2, [pc, #124]	; (8009fb4 <HAL_TIM_Base_Start+0xcc>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d00e      	beq.n	8009f58 <HAL_TIM_Base_Start+0x70>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a1e      	ldr	r2, [pc, #120]	; (8009fb8 <HAL_TIM_Base_Start+0xd0>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d009      	beq.n	8009f58 <HAL_TIM_Base_Start+0x70>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a1c      	ldr	r2, [pc, #112]	; (8009fbc <HAL_TIM_Base_Start+0xd4>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d004      	beq.n	8009f58 <HAL_TIM_Base_Start+0x70>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a1b      	ldr	r2, [pc, #108]	; (8009fc0 <HAL_TIM_Base_Start+0xd8>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d115      	bne.n	8009f84 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	689a      	ldr	r2, [r3, #8]
 8009f5e:	4b19      	ldr	r3, [pc, #100]	; (8009fc4 <HAL_TIM_Base_Start+0xdc>)
 8009f60:	4013      	ands	r3, r2
 8009f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2b06      	cmp	r3, #6
 8009f68:	d015      	beq.n	8009f96 <HAL_TIM_Base_Start+0xae>
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f70:	d011      	beq.n	8009f96 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f042 0201 	orr.w	r2, r2, #1
 8009f80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f82:	e008      	b.n	8009f96 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f042 0201 	orr.w	r2, r2, #1
 8009f92:	601a      	str	r2, [r3, #0]
 8009f94:	e000      	b.n	8009f98 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3714      	adds	r7, #20
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	40010000 	.word	0x40010000
 8009fac:	40000400 	.word	0x40000400
 8009fb0:	40000800 	.word	0x40000800
 8009fb4:	40000c00 	.word	0x40000c00
 8009fb8:	40010400 	.word	0x40010400
 8009fbc:	40001800 	.word	0x40001800
 8009fc0:	40014000 	.word	0x40014000
 8009fc4:	00010007 	.word	0x00010007

08009fc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d101      	bne.n	8009fe4 <HAL_TIM_ConfigClockSource+0x1c>
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	e0dc      	b.n	800a19e <HAL_TIM_ConfigClockSource+0x1d6>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2202      	movs	r2, #2
 8009ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	4b6a      	ldr	r3, [pc, #424]	; (800a1a8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a000:	4013      	ands	r3, r2
 800a002:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a00a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a64      	ldr	r2, [pc, #400]	; (800a1ac <HAL_TIM_ConfigClockSource+0x1e4>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	f000 80a9 	beq.w	800a172 <HAL_TIM_ConfigClockSource+0x1aa>
 800a020:	4a62      	ldr	r2, [pc, #392]	; (800a1ac <HAL_TIM_ConfigClockSource+0x1e4>)
 800a022:	4293      	cmp	r3, r2
 800a024:	f200 80ae 	bhi.w	800a184 <HAL_TIM_ConfigClockSource+0x1bc>
 800a028:	4a61      	ldr	r2, [pc, #388]	; (800a1b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	f000 80a1 	beq.w	800a172 <HAL_TIM_ConfigClockSource+0x1aa>
 800a030:	4a5f      	ldr	r2, [pc, #380]	; (800a1b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a032:	4293      	cmp	r3, r2
 800a034:	f200 80a6 	bhi.w	800a184 <HAL_TIM_ConfigClockSource+0x1bc>
 800a038:	4a5e      	ldr	r2, [pc, #376]	; (800a1b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	f000 8099 	beq.w	800a172 <HAL_TIM_ConfigClockSource+0x1aa>
 800a040:	4a5c      	ldr	r2, [pc, #368]	; (800a1b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a042:	4293      	cmp	r3, r2
 800a044:	f200 809e 	bhi.w	800a184 <HAL_TIM_ConfigClockSource+0x1bc>
 800a048:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a04c:	f000 8091 	beq.w	800a172 <HAL_TIM_ConfigClockSource+0x1aa>
 800a050:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a054:	f200 8096 	bhi.w	800a184 <HAL_TIM_ConfigClockSource+0x1bc>
 800a058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a05c:	f000 8089 	beq.w	800a172 <HAL_TIM_ConfigClockSource+0x1aa>
 800a060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a064:	f200 808e 	bhi.w	800a184 <HAL_TIM_ConfigClockSource+0x1bc>
 800a068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a06c:	d03e      	beq.n	800a0ec <HAL_TIM_ConfigClockSource+0x124>
 800a06e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a072:	f200 8087 	bhi.w	800a184 <HAL_TIM_ConfigClockSource+0x1bc>
 800a076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a07a:	f000 8086 	beq.w	800a18a <HAL_TIM_ConfigClockSource+0x1c2>
 800a07e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a082:	d87f      	bhi.n	800a184 <HAL_TIM_ConfigClockSource+0x1bc>
 800a084:	2b70      	cmp	r3, #112	; 0x70
 800a086:	d01a      	beq.n	800a0be <HAL_TIM_ConfigClockSource+0xf6>
 800a088:	2b70      	cmp	r3, #112	; 0x70
 800a08a:	d87b      	bhi.n	800a184 <HAL_TIM_ConfigClockSource+0x1bc>
 800a08c:	2b60      	cmp	r3, #96	; 0x60
 800a08e:	d050      	beq.n	800a132 <HAL_TIM_ConfigClockSource+0x16a>
 800a090:	2b60      	cmp	r3, #96	; 0x60
 800a092:	d877      	bhi.n	800a184 <HAL_TIM_ConfigClockSource+0x1bc>
 800a094:	2b50      	cmp	r3, #80	; 0x50
 800a096:	d03c      	beq.n	800a112 <HAL_TIM_ConfigClockSource+0x14a>
 800a098:	2b50      	cmp	r3, #80	; 0x50
 800a09a:	d873      	bhi.n	800a184 <HAL_TIM_ConfigClockSource+0x1bc>
 800a09c:	2b40      	cmp	r3, #64	; 0x40
 800a09e:	d058      	beq.n	800a152 <HAL_TIM_ConfigClockSource+0x18a>
 800a0a0:	2b40      	cmp	r3, #64	; 0x40
 800a0a2:	d86f      	bhi.n	800a184 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0a4:	2b30      	cmp	r3, #48	; 0x30
 800a0a6:	d064      	beq.n	800a172 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0a8:	2b30      	cmp	r3, #48	; 0x30
 800a0aa:	d86b      	bhi.n	800a184 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0ac:	2b20      	cmp	r3, #32
 800a0ae:	d060      	beq.n	800a172 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0b0:	2b20      	cmp	r3, #32
 800a0b2:	d867      	bhi.n	800a184 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d05c      	beq.n	800a172 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0b8:	2b10      	cmp	r3, #16
 800a0ba:	d05a      	beq.n	800a172 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0bc:	e062      	b.n	800a184 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6818      	ldr	r0, [r3, #0]
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	6899      	ldr	r1, [r3, #8]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	685a      	ldr	r2, [r3, #4]
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	f000 f98b 	bl	800a3e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a0e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68ba      	ldr	r2, [r7, #8]
 800a0e8:	609a      	str	r2, [r3, #8]
      break;
 800a0ea:	e04f      	b.n	800a18c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6818      	ldr	r0, [r3, #0]
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	6899      	ldr	r1, [r3, #8]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	685a      	ldr	r2, [r3, #4]
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	f000 f974 	bl	800a3e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	689a      	ldr	r2, [r3, #8]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a10e:	609a      	str	r2, [r3, #8]
      break;
 800a110:	e03c      	b.n	800a18c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6818      	ldr	r0, [r3, #0]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	6859      	ldr	r1, [r3, #4]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	461a      	mov	r2, r3
 800a120:	f000 f8e4 	bl	800a2ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2150      	movs	r1, #80	; 0x50
 800a12a:	4618      	mov	r0, r3
 800a12c:	f000 f93e 	bl	800a3ac <TIM_ITRx_SetConfig>
      break;
 800a130:	e02c      	b.n	800a18c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6818      	ldr	r0, [r3, #0]
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	6859      	ldr	r1, [r3, #4]
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	461a      	mov	r2, r3
 800a140:	f000 f903 	bl	800a34a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2160      	movs	r1, #96	; 0x60
 800a14a:	4618      	mov	r0, r3
 800a14c:	f000 f92e 	bl	800a3ac <TIM_ITRx_SetConfig>
      break;
 800a150:	e01c      	b.n	800a18c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6818      	ldr	r0, [r3, #0]
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	6859      	ldr	r1, [r3, #4]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	461a      	mov	r2, r3
 800a160:	f000 f8c4 	bl	800a2ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2140      	movs	r1, #64	; 0x40
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 f91e 	bl	800a3ac <TIM_ITRx_SetConfig>
      break;
 800a170:	e00c      	b.n	800a18c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4619      	mov	r1, r3
 800a17c:	4610      	mov	r0, r2
 800a17e:	f000 f915 	bl	800a3ac <TIM_ITRx_SetConfig>
      break;
 800a182:	e003      	b.n	800a18c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	73fb      	strb	r3, [r7, #15]
      break;
 800a188:	e000      	b.n	800a18c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a18a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	ffceff88 	.word	0xffceff88
 800a1ac:	00100040 	.word	0x00100040
 800a1b0:	00100030 	.word	0x00100030
 800a1b4:	00100020 	.word	0x00100020

0800a1b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4a40      	ldr	r2, [pc, #256]	; (800a2cc <TIM_Base_SetConfig+0x114>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d013      	beq.n	800a1f8 <TIM_Base_SetConfig+0x40>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1d6:	d00f      	beq.n	800a1f8 <TIM_Base_SetConfig+0x40>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4a3d      	ldr	r2, [pc, #244]	; (800a2d0 <TIM_Base_SetConfig+0x118>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d00b      	beq.n	800a1f8 <TIM_Base_SetConfig+0x40>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a3c      	ldr	r2, [pc, #240]	; (800a2d4 <TIM_Base_SetConfig+0x11c>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d007      	beq.n	800a1f8 <TIM_Base_SetConfig+0x40>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a3b      	ldr	r2, [pc, #236]	; (800a2d8 <TIM_Base_SetConfig+0x120>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d003      	beq.n	800a1f8 <TIM_Base_SetConfig+0x40>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a3a      	ldr	r2, [pc, #232]	; (800a2dc <TIM_Base_SetConfig+0x124>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d108      	bne.n	800a20a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	4313      	orrs	r3, r2
 800a208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4a2f      	ldr	r2, [pc, #188]	; (800a2cc <TIM_Base_SetConfig+0x114>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d01f      	beq.n	800a252 <TIM_Base_SetConfig+0x9a>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a218:	d01b      	beq.n	800a252 <TIM_Base_SetConfig+0x9a>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4a2c      	ldr	r2, [pc, #176]	; (800a2d0 <TIM_Base_SetConfig+0x118>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d017      	beq.n	800a252 <TIM_Base_SetConfig+0x9a>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a2b      	ldr	r2, [pc, #172]	; (800a2d4 <TIM_Base_SetConfig+0x11c>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d013      	beq.n	800a252 <TIM_Base_SetConfig+0x9a>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4a2a      	ldr	r2, [pc, #168]	; (800a2d8 <TIM_Base_SetConfig+0x120>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d00f      	beq.n	800a252 <TIM_Base_SetConfig+0x9a>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4a29      	ldr	r2, [pc, #164]	; (800a2dc <TIM_Base_SetConfig+0x124>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d00b      	beq.n	800a252 <TIM_Base_SetConfig+0x9a>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4a28      	ldr	r2, [pc, #160]	; (800a2e0 <TIM_Base_SetConfig+0x128>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d007      	beq.n	800a252 <TIM_Base_SetConfig+0x9a>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4a27      	ldr	r2, [pc, #156]	; (800a2e4 <TIM_Base_SetConfig+0x12c>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d003      	beq.n	800a252 <TIM_Base_SetConfig+0x9a>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a26      	ldr	r2, [pc, #152]	; (800a2e8 <TIM_Base_SetConfig+0x130>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d108      	bne.n	800a264 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	4313      	orrs	r3, r2
 800a262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	695b      	ldr	r3, [r3, #20]
 800a26e:	4313      	orrs	r3, r2
 800a270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	689a      	ldr	r2, [r3, #8]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4a10      	ldr	r2, [pc, #64]	; (800a2cc <TIM_Base_SetConfig+0x114>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d00f      	beq.n	800a2b0 <TIM_Base_SetConfig+0xf8>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	4a12      	ldr	r2, [pc, #72]	; (800a2dc <TIM_Base_SetConfig+0x124>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d00b      	beq.n	800a2b0 <TIM_Base_SetConfig+0xf8>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	4a11      	ldr	r2, [pc, #68]	; (800a2e0 <TIM_Base_SetConfig+0x128>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d007      	beq.n	800a2b0 <TIM_Base_SetConfig+0xf8>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a10      	ldr	r2, [pc, #64]	; (800a2e4 <TIM_Base_SetConfig+0x12c>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d003      	beq.n	800a2b0 <TIM_Base_SetConfig+0xf8>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a0f      	ldr	r2, [pc, #60]	; (800a2e8 <TIM_Base_SetConfig+0x130>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d103      	bne.n	800a2b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	691a      	ldr	r2, [r3, #16]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	615a      	str	r2, [r3, #20]
}
 800a2be:	bf00      	nop
 800a2c0:	3714      	adds	r7, #20
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	40010000 	.word	0x40010000
 800a2d0:	40000400 	.word	0x40000400
 800a2d4:	40000800 	.word	0x40000800
 800a2d8:	40000c00 	.word	0x40000c00
 800a2dc:	40010400 	.word	0x40010400
 800a2e0:	40014000 	.word	0x40014000
 800a2e4:	40014400 	.word	0x40014400
 800a2e8:	40014800 	.word	0x40014800

0800a2ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b087      	sub	sp, #28
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6a1b      	ldr	r3, [r3, #32]
 800a2fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6a1b      	ldr	r3, [r3, #32]
 800a302:	f023 0201 	bic.w	r2, r3, #1
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	699b      	ldr	r3, [r3, #24]
 800a30e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	011b      	lsls	r3, r3, #4
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	4313      	orrs	r3, r2
 800a320:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	f023 030a 	bic.w	r3, r3, #10
 800a328:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	4313      	orrs	r3, r2
 800a330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	693a      	ldr	r2, [r7, #16]
 800a336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	697a      	ldr	r2, [r7, #20]
 800a33c:	621a      	str	r2, [r3, #32]
}
 800a33e:	bf00      	nop
 800a340:	371c      	adds	r7, #28
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr

0800a34a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a34a:	b480      	push	{r7}
 800a34c:	b087      	sub	sp, #28
 800a34e:	af00      	add	r7, sp, #0
 800a350:	60f8      	str	r0, [r7, #12]
 800a352:	60b9      	str	r1, [r7, #8]
 800a354:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	f023 0210 	bic.w	r2, r3, #16
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6a1b      	ldr	r3, [r3, #32]
 800a36c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a374:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	031b      	lsls	r3, r3, #12
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a386:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	011b      	lsls	r3, r3, #4
 800a38c:	693a      	ldr	r2, [r7, #16]
 800a38e:	4313      	orrs	r3, r2
 800a390:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	697a      	ldr	r2, [r7, #20]
 800a396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	693a      	ldr	r2, [r7, #16]
 800a39c:	621a      	str	r2, [r3, #32]
}
 800a39e:	bf00      	nop
 800a3a0:	371c      	adds	r7, #28
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
	...

0800a3ac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3bc:	68fa      	ldr	r2, [r7, #12]
 800a3be:	4b09      	ldr	r3, [pc, #36]	; (800a3e4 <TIM_ITRx_SetConfig+0x38>)
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	f043 0307 	orr.w	r3, r3, #7
 800a3ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	609a      	str	r2, [r3, #8]
}
 800a3d6:	bf00      	nop
 800a3d8:	3714      	adds	r7, #20
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	ffcfff8f 	.word	0xffcfff8f

0800a3e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	607a      	str	r2, [r7, #4]
 800a3f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a402:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	021a      	lsls	r2, r3, #8
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	431a      	orrs	r2, r3
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	4313      	orrs	r3, r2
 800a410:	697a      	ldr	r2, [r7, #20]
 800a412:	4313      	orrs	r3, r2
 800a414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	697a      	ldr	r2, [r7, #20]
 800a41a:	609a      	str	r2, [r3, #8]
}
 800a41c:	bf00      	nop
 800a41e:	371c      	adds	r7, #28
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d101      	bne.n	800a440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a43c:	2302      	movs	r3, #2
 800a43e:	e06d      	b.n	800a51c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2202      	movs	r2, #2
 800a44c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a30      	ldr	r2, [pc, #192]	; (800a528 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d004      	beq.n	800a474 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a2f      	ldr	r2, [pc, #188]	; (800a52c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d108      	bne.n	800a486 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a47a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	4313      	orrs	r3, r2
 800a484:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a48c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	4313      	orrs	r3, r2
 800a496:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a20      	ldr	r2, [pc, #128]	; (800a528 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d022      	beq.n	800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4b2:	d01d      	beq.n	800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a1d      	ldr	r2, [pc, #116]	; (800a530 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d018      	beq.n	800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a1c      	ldr	r2, [pc, #112]	; (800a534 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d013      	beq.n	800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a1a      	ldr	r2, [pc, #104]	; (800a538 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d00e      	beq.n	800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a15      	ldr	r2, [pc, #84]	; (800a52c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d009      	beq.n	800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a16      	ldr	r2, [pc, #88]	; (800a53c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d004      	beq.n	800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a15      	ldr	r2, [pc, #84]	; (800a540 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d10c      	bne.n	800a50a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	68ba      	ldr	r2, [r7, #8]
 800a508:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2201      	movs	r2, #1
 800a50e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3714      	adds	r7, #20
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr
 800a528:	40010000 	.word	0x40010000
 800a52c:	40010400 	.word	0x40010400
 800a530:	40000400 	.word	0x40000400
 800a534:	40000800 	.word	0x40000800
 800a538:	40000c00 	.word	0x40000c00
 800a53c:	40001800 	.word	0x40001800
 800a540:	40014000 	.word	0x40014000

0800a544 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d101      	bne.n	800a556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	e042      	b.n	800a5dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d106      	bne.n	800a56e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f7f7 fef5 	bl	8002358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2224      	movs	r2, #36	; 0x24
 800a572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f022 0201 	bic.w	r2, r2, #1
 800a584:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f82c 	bl	800a5e4 <UART_SetConfig>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d101      	bne.n	800a596 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	e022      	b.n	800a5dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d002      	beq.n	800a5a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 fd88 	bl	800b0b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	685a      	ldr	r2, [r3, #4]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a5b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	689a      	ldr	r2, [r3, #8]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a5c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f042 0201 	orr.w	r2, r2, #1
 800a5d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fe0f 	bl	800b1f8 <UART_CheckIdleState>
 800a5da:	4603      	mov	r3, r0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5e8:	b092      	sub	sp, #72	; 0x48
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	689a      	ldr	r2, [r3, #8]
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	691b      	ldr	r3, [r3, #16]
 800a5fc:	431a      	orrs	r2, r3
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	431a      	orrs	r2, r3
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	69db      	ldr	r3, [r3, #28]
 800a608:	4313      	orrs	r3, r2
 800a60a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	4bbe      	ldr	r3, [pc, #760]	; (800a90c <UART_SetConfig+0x328>)
 800a614:	4013      	ands	r3, r2
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	6812      	ldr	r2, [r2, #0]
 800a61a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a61c:	430b      	orrs	r3, r1
 800a61e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	68da      	ldr	r2, [r3, #12]
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	430a      	orrs	r2, r1
 800a634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4ab3      	ldr	r2, [pc, #716]	; (800a910 <UART_SetConfig+0x32c>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d004      	beq.n	800a650 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	6a1b      	ldr	r3, [r3, #32]
 800a64a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a64c:	4313      	orrs	r3, r2
 800a64e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	689a      	ldr	r2, [r3, #8]
 800a656:	4baf      	ldr	r3, [pc, #700]	; (800a914 <UART_SetConfig+0x330>)
 800a658:	4013      	ands	r3, r2
 800a65a:	697a      	ldr	r2, [r7, #20]
 800a65c:	6812      	ldr	r2, [r2, #0]
 800a65e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a660:	430b      	orrs	r3, r1
 800a662:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66a:	f023 010f 	bic.w	r1, r3, #15
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	430a      	orrs	r2, r1
 800a678:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4aa6      	ldr	r2, [pc, #664]	; (800a918 <UART_SetConfig+0x334>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d177      	bne.n	800a774 <UART_SetConfig+0x190>
 800a684:	4ba5      	ldr	r3, [pc, #660]	; (800a91c <UART_SetConfig+0x338>)
 800a686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a688:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a68c:	2b28      	cmp	r3, #40	; 0x28
 800a68e:	d86d      	bhi.n	800a76c <UART_SetConfig+0x188>
 800a690:	a201      	add	r2, pc, #4	; (adr r2, 800a698 <UART_SetConfig+0xb4>)
 800a692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a696:	bf00      	nop
 800a698:	0800a73d 	.word	0x0800a73d
 800a69c:	0800a76d 	.word	0x0800a76d
 800a6a0:	0800a76d 	.word	0x0800a76d
 800a6a4:	0800a76d 	.word	0x0800a76d
 800a6a8:	0800a76d 	.word	0x0800a76d
 800a6ac:	0800a76d 	.word	0x0800a76d
 800a6b0:	0800a76d 	.word	0x0800a76d
 800a6b4:	0800a76d 	.word	0x0800a76d
 800a6b8:	0800a745 	.word	0x0800a745
 800a6bc:	0800a76d 	.word	0x0800a76d
 800a6c0:	0800a76d 	.word	0x0800a76d
 800a6c4:	0800a76d 	.word	0x0800a76d
 800a6c8:	0800a76d 	.word	0x0800a76d
 800a6cc:	0800a76d 	.word	0x0800a76d
 800a6d0:	0800a76d 	.word	0x0800a76d
 800a6d4:	0800a76d 	.word	0x0800a76d
 800a6d8:	0800a74d 	.word	0x0800a74d
 800a6dc:	0800a76d 	.word	0x0800a76d
 800a6e0:	0800a76d 	.word	0x0800a76d
 800a6e4:	0800a76d 	.word	0x0800a76d
 800a6e8:	0800a76d 	.word	0x0800a76d
 800a6ec:	0800a76d 	.word	0x0800a76d
 800a6f0:	0800a76d 	.word	0x0800a76d
 800a6f4:	0800a76d 	.word	0x0800a76d
 800a6f8:	0800a755 	.word	0x0800a755
 800a6fc:	0800a76d 	.word	0x0800a76d
 800a700:	0800a76d 	.word	0x0800a76d
 800a704:	0800a76d 	.word	0x0800a76d
 800a708:	0800a76d 	.word	0x0800a76d
 800a70c:	0800a76d 	.word	0x0800a76d
 800a710:	0800a76d 	.word	0x0800a76d
 800a714:	0800a76d 	.word	0x0800a76d
 800a718:	0800a75d 	.word	0x0800a75d
 800a71c:	0800a76d 	.word	0x0800a76d
 800a720:	0800a76d 	.word	0x0800a76d
 800a724:	0800a76d 	.word	0x0800a76d
 800a728:	0800a76d 	.word	0x0800a76d
 800a72c:	0800a76d 	.word	0x0800a76d
 800a730:	0800a76d 	.word	0x0800a76d
 800a734:	0800a76d 	.word	0x0800a76d
 800a738:	0800a765 	.word	0x0800a765
 800a73c:	2301      	movs	r3, #1
 800a73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a742:	e222      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a744:	2304      	movs	r3, #4
 800a746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a74a:	e21e      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a74c:	2308      	movs	r3, #8
 800a74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a752:	e21a      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a754:	2310      	movs	r3, #16
 800a756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a75a:	e216      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a75c:	2320      	movs	r3, #32
 800a75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a762:	e212      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a764:	2340      	movs	r3, #64	; 0x40
 800a766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a76a:	e20e      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a76c:	2380      	movs	r3, #128	; 0x80
 800a76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a772:	e20a      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a69      	ldr	r2, [pc, #420]	; (800a920 <UART_SetConfig+0x33c>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d130      	bne.n	800a7e0 <UART_SetConfig+0x1fc>
 800a77e:	4b67      	ldr	r3, [pc, #412]	; (800a91c <UART_SetConfig+0x338>)
 800a780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a782:	f003 0307 	and.w	r3, r3, #7
 800a786:	2b05      	cmp	r3, #5
 800a788:	d826      	bhi.n	800a7d8 <UART_SetConfig+0x1f4>
 800a78a:	a201      	add	r2, pc, #4	; (adr r2, 800a790 <UART_SetConfig+0x1ac>)
 800a78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a790:	0800a7a9 	.word	0x0800a7a9
 800a794:	0800a7b1 	.word	0x0800a7b1
 800a798:	0800a7b9 	.word	0x0800a7b9
 800a79c:	0800a7c1 	.word	0x0800a7c1
 800a7a0:	0800a7c9 	.word	0x0800a7c9
 800a7a4:	0800a7d1 	.word	0x0800a7d1
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ae:	e1ec      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a7b0:	2304      	movs	r3, #4
 800a7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7b6:	e1e8      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a7b8:	2308      	movs	r3, #8
 800a7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7be:	e1e4      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a7c0:	2310      	movs	r3, #16
 800a7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7c6:	e1e0      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a7c8:	2320      	movs	r3, #32
 800a7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ce:	e1dc      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a7d0:	2340      	movs	r3, #64	; 0x40
 800a7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7d6:	e1d8      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a7d8:	2380      	movs	r3, #128	; 0x80
 800a7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7de:	e1d4      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a4f      	ldr	r2, [pc, #316]	; (800a924 <UART_SetConfig+0x340>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d130      	bne.n	800a84c <UART_SetConfig+0x268>
 800a7ea:	4b4c      	ldr	r3, [pc, #304]	; (800a91c <UART_SetConfig+0x338>)
 800a7ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ee:	f003 0307 	and.w	r3, r3, #7
 800a7f2:	2b05      	cmp	r3, #5
 800a7f4:	d826      	bhi.n	800a844 <UART_SetConfig+0x260>
 800a7f6:	a201      	add	r2, pc, #4	; (adr r2, 800a7fc <UART_SetConfig+0x218>)
 800a7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7fc:	0800a815 	.word	0x0800a815
 800a800:	0800a81d 	.word	0x0800a81d
 800a804:	0800a825 	.word	0x0800a825
 800a808:	0800a82d 	.word	0x0800a82d
 800a80c:	0800a835 	.word	0x0800a835
 800a810:	0800a83d 	.word	0x0800a83d
 800a814:	2300      	movs	r3, #0
 800a816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a81a:	e1b6      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a81c:	2304      	movs	r3, #4
 800a81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a822:	e1b2      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a824:	2308      	movs	r3, #8
 800a826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a82a:	e1ae      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a82c:	2310      	movs	r3, #16
 800a82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a832:	e1aa      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a834:	2320      	movs	r3, #32
 800a836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a83a:	e1a6      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a83c:	2340      	movs	r3, #64	; 0x40
 800a83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a842:	e1a2      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a844:	2380      	movs	r3, #128	; 0x80
 800a846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a84a:	e19e      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a35      	ldr	r2, [pc, #212]	; (800a928 <UART_SetConfig+0x344>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d130      	bne.n	800a8b8 <UART_SetConfig+0x2d4>
 800a856:	4b31      	ldr	r3, [pc, #196]	; (800a91c <UART_SetConfig+0x338>)
 800a858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a85a:	f003 0307 	and.w	r3, r3, #7
 800a85e:	2b05      	cmp	r3, #5
 800a860:	d826      	bhi.n	800a8b0 <UART_SetConfig+0x2cc>
 800a862:	a201      	add	r2, pc, #4	; (adr r2, 800a868 <UART_SetConfig+0x284>)
 800a864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a868:	0800a881 	.word	0x0800a881
 800a86c:	0800a889 	.word	0x0800a889
 800a870:	0800a891 	.word	0x0800a891
 800a874:	0800a899 	.word	0x0800a899
 800a878:	0800a8a1 	.word	0x0800a8a1
 800a87c:	0800a8a9 	.word	0x0800a8a9
 800a880:	2300      	movs	r3, #0
 800a882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a886:	e180      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a888:	2304      	movs	r3, #4
 800a88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a88e:	e17c      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a890:	2308      	movs	r3, #8
 800a892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a896:	e178      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a898:	2310      	movs	r3, #16
 800a89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a89e:	e174      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a8a0:	2320      	movs	r3, #32
 800a8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8a6:	e170      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a8a8:	2340      	movs	r3, #64	; 0x40
 800a8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ae:	e16c      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a8b0:	2380      	movs	r3, #128	; 0x80
 800a8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8b6:	e168      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a1b      	ldr	r2, [pc, #108]	; (800a92c <UART_SetConfig+0x348>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d142      	bne.n	800a948 <UART_SetConfig+0x364>
 800a8c2:	4b16      	ldr	r3, [pc, #88]	; (800a91c <UART_SetConfig+0x338>)
 800a8c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8c6:	f003 0307 	and.w	r3, r3, #7
 800a8ca:	2b05      	cmp	r3, #5
 800a8cc:	d838      	bhi.n	800a940 <UART_SetConfig+0x35c>
 800a8ce:	a201      	add	r2, pc, #4	; (adr r2, 800a8d4 <UART_SetConfig+0x2f0>)
 800a8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d4:	0800a8ed 	.word	0x0800a8ed
 800a8d8:	0800a8f5 	.word	0x0800a8f5
 800a8dc:	0800a8fd 	.word	0x0800a8fd
 800a8e0:	0800a905 	.word	0x0800a905
 800a8e4:	0800a931 	.word	0x0800a931
 800a8e8:	0800a939 	.word	0x0800a939
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8f2:	e14a      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a8f4:	2304      	movs	r3, #4
 800a8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8fa:	e146      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a8fc:	2308      	movs	r3, #8
 800a8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a902:	e142      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a904:	2310      	movs	r3, #16
 800a906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a90a:	e13e      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a90c:	cfff69f3 	.word	0xcfff69f3
 800a910:	58000c00 	.word	0x58000c00
 800a914:	11fff4ff 	.word	0x11fff4ff
 800a918:	40011000 	.word	0x40011000
 800a91c:	58024400 	.word	0x58024400
 800a920:	40004400 	.word	0x40004400
 800a924:	40004800 	.word	0x40004800
 800a928:	40004c00 	.word	0x40004c00
 800a92c:	40005000 	.word	0x40005000
 800a930:	2320      	movs	r3, #32
 800a932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a936:	e128      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a938:	2340      	movs	r3, #64	; 0x40
 800a93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a93e:	e124      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a940:	2380      	movs	r3, #128	; 0x80
 800a942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a946:	e120      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4acb      	ldr	r2, [pc, #812]	; (800ac7c <UART_SetConfig+0x698>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d176      	bne.n	800aa40 <UART_SetConfig+0x45c>
 800a952:	4bcb      	ldr	r3, [pc, #812]	; (800ac80 <UART_SetConfig+0x69c>)
 800a954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a956:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a95a:	2b28      	cmp	r3, #40	; 0x28
 800a95c:	d86c      	bhi.n	800aa38 <UART_SetConfig+0x454>
 800a95e:	a201      	add	r2, pc, #4	; (adr r2, 800a964 <UART_SetConfig+0x380>)
 800a960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a964:	0800aa09 	.word	0x0800aa09
 800a968:	0800aa39 	.word	0x0800aa39
 800a96c:	0800aa39 	.word	0x0800aa39
 800a970:	0800aa39 	.word	0x0800aa39
 800a974:	0800aa39 	.word	0x0800aa39
 800a978:	0800aa39 	.word	0x0800aa39
 800a97c:	0800aa39 	.word	0x0800aa39
 800a980:	0800aa39 	.word	0x0800aa39
 800a984:	0800aa11 	.word	0x0800aa11
 800a988:	0800aa39 	.word	0x0800aa39
 800a98c:	0800aa39 	.word	0x0800aa39
 800a990:	0800aa39 	.word	0x0800aa39
 800a994:	0800aa39 	.word	0x0800aa39
 800a998:	0800aa39 	.word	0x0800aa39
 800a99c:	0800aa39 	.word	0x0800aa39
 800a9a0:	0800aa39 	.word	0x0800aa39
 800a9a4:	0800aa19 	.word	0x0800aa19
 800a9a8:	0800aa39 	.word	0x0800aa39
 800a9ac:	0800aa39 	.word	0x0800aa39
 800a9b0:	0800aa39 	.word	0x0800aa39
 800a9b4:	0800aa39 	.word	0x0800aa39
 800a9b8:	0800aa39 	.word	0x0800aa39
 800a9bc:	0800aa39 	.word	0x0800aa39
 800a9c0:	0800aa39 	.word	0x0800aa39
 800a9c4:	0800aa21 	.word	0x0800aa21
 800a9c8:	0800aa39 	.word	0x0800aa39
 800a9cc:	0800aa39 	.word	0x0800aa39
 800a9d0:	0800aa39 	.word	0x0800aa39
 800a9d4:	0800aa39 	.word	0x0800aa39
 800a9d8:	0800aa39 	.word	0x0800aa39
 800a9dc:	0800aa39 	.word	0x0800aa39
 800a9e0:	0800aa39 	.word	0x0800aa39
 800a9e4:	0800aa29 	.word	0x0800aa29
 800a9e8:	0800aa39 	.word	0x0800aa39
 800a9ec:	0800aa39 	.word	0x0800aa39
 800a9f0:	0800aa39 	.word	0x0800aa39
 800a9f4:	0800aa39 	.word	0x0800aa39
 800a9f8:	0800aa39 	.word	0x0800aa39
 800a9fc:	0800aa39 	.word	0x0800aa39
 800aa00:	0800aa39 	.word	0x0800aa39
 800aa04:	0800aa31 	.word	0x0800aa31
 800aa08:	2301      	movs	r3, #1
 800aa0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa0e:	e0bc      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800aa10:	2304      	movs	r3, #4
 800aa12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa16:	e0b8      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800aa18:	2308      	movs	r3, #8
 800aa1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa1e:	e0b4      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800aa20:	2310      	movs	r3, #16
 800aa22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa26:	e0b0      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800aa28:	2320      	movs	r3, #32
 800aa2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa2e:	e0ac      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800aa30:	2340      	movs	r3, #64	; 0x40
 800aa32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa36:	e0a8      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800aa38:	2380      	movs	r3, #128	; 0x80
 800aa3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa3e:	e0a4      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a8f      	ldr	r2, [pc, #572]	; (800ac84 <UART_SetConfig+0x6a0>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d130      	bne.n	800aaac <UART_SetConfig+0x4c8>
 800aa4a:	4b8d      	ldr	r3, [pc, #564]	; (800ac80 <UART_SetConfig+0x69c>)
 800aa4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa4e:	f003 0307 	and.w	r3, r3, #7
 800aa52:	2b05      	cmp	r3, #5
 800aa54:	d826      	bhi.n	800aaa4 <UART_SetConfig+0x4c0>
 800aa56:	a201      	add	r2, pc, #4	; (adr r2, 800aa5c <UART_SetConfig+0x478>)
 800aa58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa5c:	0800aa75 	.word	0x0800aa75
 800aa60:	0800aa7d 	.word	0x0800aa7d
 800aa64:	0800aa85 	.word	0x0800aa85
 800aa68:	0800aa8d 	.word	0x0800aa8d
 800aa6c:	0800aa95 	.word	0x0800aa95
 800aa70:	0800aa9d 	.word	0x0800aa9d
 800aa74:	2300      	movs	r3, #0
 800aa76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa7a:	e086      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800aa7c:	2304      	movs	r3, #4
 800aa7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa82:	e082      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800aa84:	2308      	movs	r3, #8
 800aa86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa8a:	e07e      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800aa8c:	2310      	movs	r3, #16
 800aa8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa92:	e07a      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800aa94:	2320      	movs	r3, #32
 800aa96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa9a:	e076      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800aa9c:	2340      	movs	r3, #64	; 0x40
 800aa9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaa2:	e072      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800aaa4:	2380      	movs	r3, #128	; 0x80
 800aaa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaaa:	e06e      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a75      	ldr	r2, [pc, #468]	; (800ac88 <UART_SetConfig+0x6a4>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d130      	bne.n	800ab18 <UART_SetConfig+0x534>
 800aab6:	4b72      	ldr	r3, [pc, #456]	; (800ac80 <UART_SetConfig+0x69c>)
 800aab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaba:	f003 0307 	and.w	r3, r3, #7
 800aabe:	2b05      	cmp	r3, #5
 800aac0:	d826      	bhi.n	800ab10 <UART_SetConfig+0x52c>
 800aac2:	a201      	add	r2, pc, #4	; (adr r2, 800aac8 <UART_SetConfig+0x4e4>)
 800aac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac8:	0800aae1 	.word	0x0800aae1
 800aacc:	0800aae9 	.word	0x0800aae9
 800aad0:	0800aaf1 	.word	0x0800aaf1
 800aad4:	0800aaf9 	.word	0x0800aaf9
 800aad8:	0800ab01 	.word	0x0800ab01
 800aadc:	0800ab09 	.word	0x0800ab09
 800aae0:	2300      	movs	r3, #0
 800aae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aae6:	e050      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800aae8:	2304      	movs	r3, #4
 800aaea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaee:	e04c      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800aaf0:	2308      	movs	r3, #8
 800aaf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaf6:	e048      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800aaf8:	2310      	movs	r3, #16
 800aafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aafe:	e044      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800ab00:	2320      	movs	r3, #32
 800ab02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab06:	e040      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800ab08:	2340      	movs	r3, #64	; 0x40
 800ab0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab0e:	e03c      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800ab10:	2380      	movs	r3, #128	; 0x80
 800ab12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab16:	e038      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a5b      	ldr	r2, [pc, #364]	; (800ac8c <UART_SetConfig+0x6a8>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d130      	bne.n	800ab84 <UART_SetConfig+0x5a0>
 800ab22:	4b57      	ldr	r3, [pc, #348]	; (800ac80 <UART_SetConfig+0x69c>)
 800ab24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab26:	f003 0307 	and.w	r3, r3, #7
 800ab2a:	2b05      	cmp	r3, #5
 800ab2c:	d826      	bhi.n	800ab7c <UART_SetConfig+0x598>
 800ab2e:	a201      	add	r2, pc, #4	; (adr r2, 800ab34 <UART_SetConfig+0x550>)
 800ab30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab34:	0800ab4d 	.word	0x0800ab4d
 800ab38:	0800ab55 	.word	0x0800ab55
 800ab3c:	0800ab5d 	.word	0x0800ab5d
 800ab40:	0800ab65 	.word	0x0800ab65
 800ab44:	0800ab6d 	.word	0x0800ab6d
 800ab48:	0800ab75 	.word	0x0800ab75
 800ab4c:	2302      	movs	r3, #2
 800ab4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab52:	e01a      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800ab54:	2304      	movs	r3, #4
 800ab56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab5a:	e016      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800ab5c:	2308      	movs	r3, #8
 800ab5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab62:	e012      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800ab64:	2310      	movs	r3, #16
 800ab66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab6a:	e00e      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800ab6c:	2320      	movs	r3, #32
 800ab6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab72:	e00a      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800ab74:	2340      	movs	r3, #64	; 0x40
 800ab76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab7a:	e006      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800ab7c:	2380      	movs	r3, #128	; 0x80
 800ab7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab82:	e002      	b.n	800ab8a <UART_SetConfig+0x5a6>
 800ab84:	2380      	movs	r3, #128	; 0x80
 800ab86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a3f      	ldr	r2, [pc, #252]	; (800ac8c <UART_SetConfig+0x6a8>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	f040 80f8 	bne.w	800ad86 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ab9a:	2b20      	cmp	r3, #32
 800ab9c:	dc46      	bgt.n	800ac2c <UART_SetConfig+0x648>
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	f2c0 8082 	blt.w	800aca8 <UART_SetConfig+0x6c4>
 800aba4:	3b02      	subs	r3, #2
 800aba6:	2b1e      	cmp	r3, #30
 800aba8:	d87e      	bhi.n	800aca8 <UART_SetConfig+0x6c4>
 800abaa:	a201      	add	r2, pc, #4	; (adr r2, 800abb0 <UART_SetConfig+0x5cc>)
 800abac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb0:	0800ac33 	.word	0x0800ac33
 800abb4:	0800aca9 	.word	0x0800aca9
 800abb8:	0800ac3b 	.word	0x0800ac3b
 800abbc:	0800aca9 	.word	0x0800aca9
 800abc0:	0800aca9 	.word	0x0800aca9
 800abc4:	0800aca9 	.word	0x0800aca9
 800abc8:	0800ac4b 	.word	0x0800ac4b
 800abcc:	0800aca9 	.word	0x0800aca9
 800abd0:	0800aca9 	.word	0x0800aca9
 800abd4:	0800aca9 	.word	0x0800aca9
 800abd8:	0800aca9 	.word	0x0800aca9
 800abdc:	0800aca9 	.word	0x0800aca9
 800abe0:	0800aca9 	.word	0x0800aca9
 800abe4:	0800aca9 	.word	0x0800aca9
 800abe8:	0800ac5b 	.word	0x0800ac5b
 800abec:	0800aca9 	.word	0x0800aca9
 800abf0:	0800aca9 	.word	0x0800aca9
 800abf4:	0800aca9 	.word	0x0800aca9
 800abf8:	0800aca9 	.word	0x0800aca9
 800abfc:	0800aca9 	.word	0x0800aca9
 800ac00:	0800aca9 	.word	0x0800aca9
 800ac04:	0800aca9 	.word	0x0800aca9
 800ac08:	0800aca9 	.word	0x0800aca9
 800ac0c:	0800aca9 	.word	0x0800aca9
 800ac10:	0800aca9 	.word	0x0800aca9
 800ac14:	0800aca9 	.word	0x0800aca9
 800ac18:	0800aca9 	.word	0x0800aca9
 800ac1c:	0800aca9 	.word	0x0800aca9
 800ac20:	0800aca9 	.word	0x0800aca9
 800ac24:	0800aca9 	.word	0x0800aca9
 800ac28:	0800ac9b 	.word	0x0800ac9b
 800ac2c:	2b40      	cmp	r3, #64	; 0x40
 800ac2e:	d037      	beq.n	800aca0 <UART_SetConfig+0x6bc>
 800ac30:	e03a      	b.n	800aca8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ac32:	f7fd fe17 	bl	8008864 <HAL_RCCEx_GetD3PCLK1Freq>
 800ac36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ac38:	e03c      	b.n	800acb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fd fe26 	bl	8008890 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac48:	e034      	b.n	800acb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac4a:	f107 0318 	add.w	r3, r7, #24
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fd ff72 	bl	8008b38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac58:	e02c      	b.n	800acb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac5a:	4b09      	ldr	r3, [pc, #36]	; (800ac80 <UART_SetConfig+0x69c>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f003 0320 	and.w	r3, r3, #32
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d016      	beq.n	800ac94 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac66:	4b06      	ldr	r3, [pc, #24]	; (800ac80 <UART_SetConfig+0x69c>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	08db      	lsrs	r3, r3, #3
 800ac6c:	f003 0303 	and.w	r3, r3, #3
 800ac70:	4a07      	ldr	r2, [pc, #28]	; (800ac90 <UART_SetConfig+0x6ac>)
 800ac72:	fa22 f303 	lsr.w	r3, r2, r3
 800ac76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac78:	e01c      	b.n	800acb4 <UART_SetConfig+0x6d0>
 800ac7a:	bf00      	nop
 800ac7c:	40011400 	.word	0x40011400
 800ac80:	58024400 	.word	0x58024400
 800ac84:	40007800 	.word	0x40007800
 800ac88:	40007c00 	.word	0x40007c00
 800ac8c:	58000c00 	.word	0x58000c00
 800ac90:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ac94:	4b9d      	ldr	r3, [pc, #628]	; (800af0c <UART_SetConfig+0x928>)
 800ac96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac98:	e00c      	b.n	800acb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac9a:	4b9d      	ldr	r3, [pc, #628]	; (800af10 <UART_SetConfig+0x92c>)
 800ac9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac9e:	e009      	b.n	800acb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aca0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aca6:	e005      	b.n	800acb4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800aca8:	2300      	movs	r3, #0
 800acaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800acac:	2301      	movs	r3, #1
 800acae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800acb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800acb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f000 81de 	beq.w	800b078 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc0:	4a94      	ldr	r2, [pc, #592]	; (800af14 <UART_SetConfig+0x930>)
 800acc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acc6:	461a      	mov	r2, r3
 800acc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acca:	fbb3 f3f2 	udiv	r3, r3, r2
 800acce:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	685a      	ldr	r2, [r3, #4]
 800acd4:	4613      	mov	r3, r2
 800acd6:	005b      	lsls	r3, r3, #1
 800acd8:	4413      	add	r3, r2
 800acda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acdc:	429a      	cmp	r2, r3
 800acde:	d305      	bcc.n	800acec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ace6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ace8:	429a      	cmp	r2, r3
 800acea:	d903      	bls.n	800acf4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800acf2:	e1c1      	b.n	800b078 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf6:	2200      	movs	r2, #0
 800acf8:	60bb      	str	r3, [r7, #8]
 800acfa:	60fa      	str	r2, [r7, #12]
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad00:	4a84      	ldr	r2, [pc, #528]	; (800af14 <UART_SetConfig+0x930>)
 800ad02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	2200      	movs	r2, #0
 800ad0a:	603b      	str	r3, [r7, #0]
 800ad0c:	607a      	str	r2, [r7, #4]
 800ad0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad16:	f7f5 fadf 	bl	80002d8 <__aeabi_uldivmod>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	4610      	mov	r0, r2
 800ad20:	4619      	mov	r1, r3
 800ad22:	f04f 0200 	mov.w	r2, #0
 800ad26:	f04f 0300 	mov.w	r3, #0
 800ad2a:	020b      	lsls	r3, r1, #8
 800ad2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad30:	0202      	lsls	r2, r0, #8
 800ad32:	6979      	ldr	r1, [r7, #20]
 800ad34:	6849      	ldr	r1, [r1, #4]
 800ad36:	0849      	lsrs	r1, r1, #1
 800ad38:	2000      	movs	r0, #0
 800ad3a:	460c      	mov	r4, r1
 800ad3c:	4605      	mov	r5, r0
 800ad3e:	eb12 0804 	adds.w	r8, r2, r4
 800ad42:	eb43 0905 	adc.w	r9, r3, r5
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	469a      	mov	sl, r3
 800ad4e:	4693      	mov	fp, r2
 800ad50:	4652      	mov	r2, sl
 800ad52:	465b      	mov	r3, fp
 800ad54:	4640      	mov	r0, r8
 800ad56:	4649      	mov	r1, r9
 800ad58:	f7f5 fabe 	bl	80002d8 <__aeabi_uldivmod>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	460b      	mov	r3, r1
 800ad60:	4613      	mov	r3, r2
 800ad62:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad6a:	d308      	bcc.n	800ad7e <UART_SetConfig+0x79a>
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad72:	d204      	bcs.n	800ad7e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad7a:	60da      	str	r2, [r3, #12]
 800ad7c:	e17c      	b.n	800b078 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ad84:	e178      	b.n	800b078 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	69db      	ldr	r3, [r3, #28]
 800ad8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad8e:	f040 80c5 	bne.w	800af1c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ad92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ad96:	2b20      	cmp	r3, #32
 800ad98:	dc48      	bgt.n	800ae2c <UART_SetConfig+0x848>
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	db7b      	blt.n	800ae96 <UART_SetConfig+0x8b2>
 800ad9e:	2b20      	cmp	r3, #32
 800ada0:	d879      	bhi.n	800ae96 <UART_SetConfig+0x8b2>
 800ada2:	a201      	add	r2, pc, #4	; (adr r2, 800ada8 <UART_SetConfig+0x7c4>)
 800ada4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada8:	0800ae33 	.word	0x0800ae33
 800adac:	0800ae3b 	.word	0x0800ae3b
 800adb0:	0800ae97 	.word	0x0800ae97
 800adb4:	0800ae97 	.word	0x0800ae97
 800adb8:	0800ae43 	.word	0x0800ae43
 800adbc:	0800ae97 	.word	0x0800ae97
 800adc0:	0800ae97 	.word	0x0800ae97
 800adc4:	0800ae97 	.word	0x0800ae97
 800adc8:	0800ae53 	.word	0x0800ae53
 800adcc:	0800ae97 	.word	0x0800ae97
 800add0:	0800ae97 	.word	0x0800ae97
 800add4:	0800ae97 	.word	0x0800ae97
 800add8:	0800ae97 	.word	0x0800ae97
 800addc:	0800ae97 	.word	0x0800ae97
 800ade0:	0800ae97 	.word	0x0800ae97
 800ade4:	0800ae97 	.word	0x0800ae97
 800ade8:	0800ae63 	.word	0x0800ae63
 800adec:	0800ae97 	.word	0x0800ae97
 800adf0:	0800ae97 	.word	0x0800ae97
 800adf4:	0800ae97 	.word	0x0800ae97
 800adf8:	0800ae97 	.word	0x0800ae97
 800adfc:	0800ae97 	.word	0x0800ae97
 800ae00:	0800ae97 	.word	0x0800ae97
 800ae04:	0800ae97 	.word	0x0800ae97
 800ae08:	0800ae97 	.word	0x0800ae97
 800ae0c:	0800ae97 	.word	0x0800ae97
 800ae10:	0800ae97 	.word	0x0800ae97
 800ae14:	0800ae97 	.word	0x0800ae97
 800ae18:	0800ae97 	.word	0x0800ae97
 800ae1c:	0800ae97 	.word	0x0800ae97
 800ae20:	0800ae97 	.word	0x0800ae97
 800ae24:	0800ae97 	.word	0x0800ae97
 800ae28:	0800ae89 	.word	0x0800ae89
 800ae2c:	2b40      	cmp	r3, #64	; 0x40
 800ae2e:	d02e      	beq.n	800ae8e <UART_SetConfig+0x8aa>
 800ae30:	e031      	b.n	800ae96 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae32:	f7fb fd61 	bl	80068f8 <HAL_RCC_GetPCLK1Freq>
 800ae36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae38:	e033      	b.n	800aea2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae3a:	f7fb fd73 	bl	8006924 <HAL_RCC_GetPCLK2Freq>
 800ae3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae40:	e02f      	b.n	800aea2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fd fd22 	bl	8008890 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae50:	e027      	b.n	800aea2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae52:	f107 0318 	add.w	r3, r7, #24
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7fd fe6e 	bl	8008b38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae60:	e01f      	b.n	800aea2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae62:	4b2d      	ldr	r3, [pc, #180]	; (800af18 <UART_SetConfig+0x934>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 0320 	and.w	r3, r3, #32
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d009      	beq.n	800ae82 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae6e:	4b2a      	ldr	r3, [pc, #168]	; (800af18 <UART_SetConfig+0x934>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	08db      	lsrs	r3, r3, #3
 800ae74:	f003 0303 	and.w	r3, r3, #3
 800ae78:	4a24      	ldr	r2, [pc, #144]	; (800af0c <UART_SetConfig+0x928>)
 800ae7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae80:	e00f      	b.n	800aea2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ae82:	4b22      	ldr	r3, [pc, #136]	; (800af0c <UART_SetConfig+0x928>)
 800ae84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae86:	e00c      	b.n	800aea2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae88:	4b21      	ldr	r3, [pc, #132]	; (800af10 <UART_SetConfig+0x92c>)
 800ae8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae8c:	e009      	b.n	800aea2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae94:	e005      	b.n	800aea2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ae96:	2300      	movs	r3, #0
 800ae98:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aea0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f000 80e7 	beq.w	800b078 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeae:	4a19      	ldr	r2, [pc, #100]	; (800af14 <UART_SetConfig+0x930>)
 800aeb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aebc:	005a      	lsls	r2, r3, #1
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	085b      	lsrs	r3, r3, #1
 800aec4:	441a      	add	r2, r3
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	fbb2 f3f3 	udiv	r3, r2, r3
 800aece:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed2:	2b0f      	cmp	r3, #15
 800aed4:	d916      	bls.n	800af04 <UART_SetConfig+0x920>
 800aed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aedc:	d212      	bcs.n	800af04 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	f023 030f 	bic.w	r3, r3, #15
 800aee6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeea:	085b      	lsrs	r3, r3, #1
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	f003 0307 	and.w	r3, r3, #7
 800aef2:	b29a      	uxth	r2, r3
 800aef4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aef6:	4313      	orrs	r3, r2
 800aef8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800af00:	60da      	str	r2, [r3, #12]
 800af02:	e0b9      	b.n	800b078 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800af04:	2301      	movs	r3, #1
 800af06:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800af0a:	e0b5      	b.n	800b078 <UART_SetConfig+0xa94>
 800af0c:	03d09000 	.word	0x03d09000
 800af10:	003d0900 	.word	0x003d0900
 800af14:	0800bf80 	.word	0x0800bf80
 800af18:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800af1c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800af20:	2b20      	cmp	r3, #32
 800af22:	dc49      	bgt.n	800afb8 <UART_SetConfig+0x9d4>
 800af24:	2b00      	cmp	r3, #0
 800af26:	db7c      	blt.n	800b022 <UART_SetConfig+0xa3e>
 800af28:	2b20      	cmp	r3, #32
 800af2a:	d87a      	bhi.n	800b022 <UART_SetConfig+0xa3e>
 800af2c:	a201      	add	r2, pc, #4	; (adr r2, 800af34 <UART_SetConfig+0x950>)
 800af2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af32:	bf00      	nop
 800af34:	0800afbf 	.word	0x0800afbf
 800af38:	0800afc7 	.word	0x0800afc7
 800af3c:	0800b023 	.word	0x0800b023
 800af40:	0800b023 	.word	0x0800b023
 800af44:	0800afcf 	.word	0x0800afcf
 800af48:	0800b023 	.word	0x0800b023
 800af4c:	0800b023 	.word	0x0800b023
 800af50:	0800b023 	.word	0x0800b023
 800af54:	0800afdf 	.word	0x0800afdf
 800af58:	0800b023 	.word	0x0800b023
 800af5c:	0800b023 	.word	0x0800b023
 800af60:	0800b023 	.word	0x0800b023
 800af64:	0800b023 	.word	0x0800b023
 800af68:	0800b023 	.word	0x0800b023
 800af6c:	0800b023 	.word	0x0800b023
 800af70:	0800b023 	.word	0x0800b023
 800af74:	0800afef 	.word	0x0800afef
 800af78:	0800b023 	.word	0x0800b023
 800af7c:	0800b023 	.word	0x0800b023
 800af80:	0800b023 	.word	0x0800b023
 800af84:	0800b023 	.word	0x0800b023
 800af88:	0800b023 	.word	0x0800b023
 800af8c:	0800b023 	.word	0x0800b023
 800af90:	0800b023 	.word	0x0800b023
 800af94:	0800b023 	.word	0x0800b023
 800af98:	0800b023 	.word	0x0800b023
 800af9c:	0800b023 	.word	0x0800b023
 800afa0:	0800b023 	.word	0x0800b023
 800afa4:	0800b023 	.word	0x0800b023
 800afa8:	0800b023 	.word	0x0800b023
 800afac:	0800b023 	.word	0x0800b023
 800afb0:	0800b023 	.word	0x0800b023
 800afb4:	0800b015 	.word	0x0800b015
 800afb8:	2b40      	cmp	r3, #64	; 0x40
 800afba:	d02e      	beq.n	800b01a <UART_SetConfig+0xa36>
 800afbc:	e031      	b.n	800b022 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afbe:	f7fb fc9b 	bl	80068f8 <HAL_RCC_GetPCLK1Freq>
 800afc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800afc4:	e033      	b.n	800b02e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afc6:	f7fb fcad 	bl	8006924 <HAL_RCC_GetPCLK2Freq>
 800afca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800afcc:	e02f      	b.n	800b02e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fd fc5c 	bl	8008890 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800afd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afdc:	e027      	b.n	800b02e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afde:	f107 0318 	add.w	r3, r7, #24
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7fd fda8 	bl	8008b38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afec:	e01f      	b.n	800b02e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afee:	4b2d      	ldr	r3, [pc, #180]	; (800b0a4 <UART_SetConfig+0xac0>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f003 0320 	and.w	r3, r3, #32
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d009      	beq.n	800b00e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800affa:	4b2a      	ldr	r3, [pc, #168]	; (800b0a4 <UART_SetConfig+0xac0>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	08db      	lsrs	r3, r3, #3
 800b000:	f003 0303 	and.w	r3, r3, #3
 800b004:	4a28      	ldr	r2, [pc, #160]	; (800b0a8 <UART_SetConfig+0xac4>)
 800b006:	fa22 f303 	lsr.w	r3, r2, r3
 800b00a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b00c:	e00f      	b.n	800b02e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b00e:	4b26      	ldr	r3, [pc, #152]	; (800b0a8 <UART_SetConfig+0xac4>)
 800b010:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b012:	e00c      	b.n	800b02e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b014:	4b25      	ldr	r3, [pc, #148]	; (800b0ac <UART_SetConfig+0xac8>)
 800b016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b018:	e009      	b.n	800b02e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b01a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b020:	e005      	b.n	800b02e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b022:	2300      	movs	r3, #0
 800b024:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b026:	2301      	movs	r3, #1
 800b028:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b02c:	bf00      	nop
    }

    if (pclk != 0U)
 800b02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b030:	2b00      	cmp	r3, #0
 800b032:	d021      	beq.n	800b078 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b038:	4a1d      	ldr	r2, [pc, #116]	; (800b0b0 <UART_SetConfig+0xacc>)
 800b03a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b03e:	461a      	mov	r2, r3
 800b040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b042:	fbb3 f2f2 	udiv	r2, r3, r2
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	085b      	lsrs	r3, r3, #1
 800b04c:	441a      	add	r2, r3
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	fbb2 f3f3 	udiv	r3, r2, r3
 800b056:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05a:	2b0f      	cmp	r3, #15
 800b05c:	d909      	bls.n	800b072 <UART_SetConfig+0xa8e>
 800b05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b064:	d205      	bcs.n	800b072 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b068:	b29a      	uxth	r2, r3
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	60da      	str	r2, [r3, #12]
 800b070:	e002      	b.n	800b078 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b072:	2301      	movs	r3, #1
 800b074:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	2201      	movs	r2, #1
 800b07c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	2201      	movs	r2, #1
 800b084:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	2200      	movs	r2, #0
 800b08c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	2200      	movs	r2, #0
 800b092:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b094:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3748      	adds	r7, #72	; 0x48
 800b09c:	46bd      	mov	sp, r7
 800b09e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b0a2:	bf00      	nop
 800b0a4:	58024400 	.word	0x58024400
 800b0a8:	03d09000 	.word	0x03d09000
 800b0ac:	003d0900 	.word	0x003d0900
 800b0b0:	0800bf80 	.word	0x0800bf80

0800b0b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c0:	f003 0301 	and.w	r3, r3, #1
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d00a      	beq.n	800b0de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	430a      	orrs	r2, r1
 800b0dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e2:	f003 0302 	and.w	r3, r3, #2
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00a      	beq.n	800b100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	430a      	orrs	r2, r1
 800b0fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b104:	f003 0304 	and.w	r3, r3, #4
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00a      	beq.n	800b122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	430a      	orrs	r2, r1
 800b120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b126:	f003 0308 	and.w	r3, r3, #8
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00a      	beq.n	800b144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	430a      	orrs	r2, r1
 800b142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b148:	f003 0310 	and.w	r3, r3, #16
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00a      	beq.n	800b166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	430a      	orrs	r2, r1
 800b164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16a:	f003 0320 	and.w	r3, r3, #32
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00a      	beq.n	800b188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	430a      	orrs	r2, r1
 800b186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b18c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b190:	2b00      	cmp	r3, #0
 800b192:	d01a      	beq.n	800b1ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	430a      	orrs	r2, r1
 800b1a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1b2:	d10a      	bne.n	800b1ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	430a      	orrs	r2, r1
 800b1c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00a      	beq.n	800b1ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	430a      	orrs	r2, r1
 800b1ea:	605a      	str	r2, [r3, #4]
  }
}
 800b1ec:	bf00      	nop
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b098      	sub	sp, #96	; 0x60
 800b1fc:	af02      	add	r7, sp, #8
 800b1fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b208:	f7f7 fc58 	bl	8002abc <HAL_GetTick>
 800b20c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 0308 	and.w	r3, r3, #8
 800b218:	2b08      	cmp	r3, #8
 800b21a:	d12f      	bne.n	800b27c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b21c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b220:	9300      	str	r3, [sp, #0]
 800b222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b224:	2200      	movs	r2, #0
 800b226:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f88e 	bl	800b34c <UART_WaitOnFlagUntilTimeout>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d022      	beq.n	800b27c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23e:	e853 3f00 	ldrex	r3, [r3]
 800b242:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b24a:	653b      	str	r3, [r7, #80]	; 0x50
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	461a      	mov	r2, r3
 800b252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b254:	647b      	str	r3, [r7, #68]	; 0x44
 800b256:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b258:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b25a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b25c:	e841 2300 	strex	r3, r2, [r1]
 800b260:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b264:	2b00      	cmp	r3, #0
 800b266:	d1e6      	bne.n	800b236 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2220      	movs	r2, #32
 800b26c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b278:	2303      	movs	r3, #3
 800b27a:	e063      	b.n	800b344 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f003 0304 	and.w	r3, r3, #4
 800b286:	2b04      	cmp	r3, #4
 800b288:	d149      	bne.n	800b31e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b28a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b292:	2200      	movs	r2, #0
 800b294:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 f857 	bl	800b34c <UART_WaitOnFlagUntilTimeout>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d03c      	beq.n	800b31e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ac:	e853 3f00 	ldrex	r3, [r3]
 800b2b0:	623b      	str	r3, [r7, #32]
   return(result);
 800b2b2:	6a3b      	ldr	r3, [r7, #32]
 800b2b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b2b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	461a      	mov	r2, r3
 800b2c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2c2:	633b      	str	r3, [r7, #48]	; 0x30
 800b2c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2ca:	e841 2300 	strex	r3, r2, [r1]
 800b2ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1e6      	bne.n	800b2a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	3308      	adds	r3, #8
 800b2dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	e853 3f00 	ldrex	r3, [r3]
 800b2e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f023 0301 	bic.w	r3, r3, #1
 800b2ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	3308      	adds	r3, #8
 800b2f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2f6:	61fa      	str	r2, [r7, #28]
 800b2f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fa:	69b9      	ldr	r1, [r7, #24]
 800b2fc:	69fa      	ldr	r2, [r7, #28]
 800b2fe:	e841 2300 	strex	r3, r2, [r1]
 800b302:	617b      	str	r3, [r7, #20]
   return(result);
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1e5      	bne.n	800b2d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2220      	movs	r2, #32
 800b30e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b31a:	2303      	movs	r3, #3
 800b31c:	e012      	b.n	800b344 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2220      	movs	r2, #32
 800b322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2220      	movs	r2, #32
 800b32a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b342:	2300      	movs	r3, #0
}
 800b344:	4618      	mov	r0, r3
 800b346:	3758      	adds	r7, #88	; 0x58
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	603b      	str	r3, [r7, #0]
 800b358:	4613      	mov	r3, r2
 800b35a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b35c:	e049      	b.n	800b3f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b364:	d045      	beq.n	800b3f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b366:	f7f7 fba9 	bl	8002abc <HAL_GetTick>
 800b36a:	4602      	mov	r2, r0
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	1ad3      	subs	r3, r2, r3
 800b370:	69ba      	ldr	r2, [r7, #24]
 800b372:	429a      	cmp	r2, r3
 800b374:	d302      	bcc.n	800b37c <UART_WaitOnFlagUntilTimeout+0x30>
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d101      	bne.n	800b380 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b37c:	2303      	movs	r3, #3
 800b37e:	e048      	b.n	800b412 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f003 0304 	and.w	r3, r3, #4
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d031      	beq.n	800b3f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	69db      	ldr	r3, [r3, #28]
 800b394:	f003 0308 	and.w	r3, r3, #8
 800b398:	2b08      	cmp	r3, #8
 800b39a:	d110      	bne.n	800b3be <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2208      	movs	r2, #8
 800b3a2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b3a4:	68f8      	ldr	r0, [r7, #12]
 800b3a6:	f000 f839 	bl	800b41c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2208      	movs	r2, #8
 800b3ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e029      	b.n	800b412 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	69db      	ldr	r3, [r3, #28]
 800b3c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3cc:	d111      	bne.n	800b3f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b3d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b3d8:	68f8      	ldr	r0, [r7, #12]
 800b3da:	f000 f81f 	bl	800b41c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2220      	movs	r2, #32
 800b3e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b3ee:	2303      	movs	r3, #3
 800b3f0:	e00f      	b.n	800b412 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	69da      	ldr	r2, [r3, #28]
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	4013      	ands	r3, r2
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	bf0c      	ite	eq
 800b402:	2301      	moveq	r3, #1
 800b404:	2300      	movne	r3, #0
 800b406:	b2db      	uxtb	r3, r3
 800b408:	461a      	mov	r2, r3
 800b40a:	79fb      	ldrb	r3, [r7, #7]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d0a6      	beq.n	800b35e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b410:	2300      	movs	r3, #0
}
 800b412:	4618      	mov	r0, r3
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
	...

0800b41c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b095      	sub	sp, #84	; 0x54
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b42a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b42c:	e853 3f00 	ldrex	r3, [r3]
 800b430:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b434:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b438:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	461a      	mov	r2, r3
 800b440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b442:	643b      	str	r3, [r7, #64]	; 0x40
 800b444:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b446:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b448:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b44a:	e841 2300 	strex	r3, r2, [r1]
 800b44e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1e6      	bne.n	800b424 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	3308      	adds	r3, #8
 800b45c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45e:	6a3b      	ldr	r3, [r7, #32]
 800b460:	e853 3f00 	ldrex	r3, [r3]
 800b464:	61fb      	str	r3, [r7, #28]
   return(result);
 800b466:	69fa      	ldr	r2, [r7, #28]
 800b468:	4b1e      	ldr	r3, [pc, #120]	; (800b4e4 <UART_EndRxTransfer+0xc8>)
 800b46a:	4013      	ands	r3, r2
 800b46c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	3308      	adds	r3, #8
 800b474:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b476:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b478:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b47a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b47c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b47e:	e841 2300 	strex	r3, r2, [r1]
 800b482:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b486:	2b00      	cmp	r3, #0
 800b488:	d1e5      	bne.n	800b456 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d118      	bne.n	800b4c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	e853 3f00 	ldrex	r3, [r3]
 800b49e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	f023 0310 	bic.w	r3, r3, #16
 800b4a6:	647b      	str	r3, [r7, #68]	; 0x44
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4b0:	61bb      	str	r3, [r7, #24]
 800b4b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b4:	6979      	ldr	r1, [r7, #20]
 800b4b6:	69ba      	ldr	r2, [r7, #24]
 800b4b8:	e841 2300 	strex	r3, r2, [r1]
 800b4bc:	613b      	str	r3, [r7, #16]
   return(result);
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d1e6      	bne.n	800b492 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2220      	movs	r2, #32
 800b4c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b4d8:	bf00      	nop
 800b4da:	3754      	adds	r7, #84	; 0x54
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr
 800b4e4:	effffffe 	.word	0xeffffffe

0800b4e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d101      	bne.n	800b4fe <HAL_UARTEx_DisableFifoMode+0x16>
 800b4fa:	2302      	movs	r3, #2
 800b4fc:	e027      	b.n	800b54e <HAL_UARTEx_DisableFifoMode+0x66>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2201      	movs	r2, #1
 800b502:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2224      	movs	r2, #36	; 0x24
 800b50a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f022 0201 	bic.w	r2, r2, #1
 800b524:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b52c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	68fa      	ldr	r2, [r7, #12]
 800b53a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2220      	movs	r2, #32
 800b540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b54c:	2300      	movs	r3, #0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3714      	adds	r7, #20
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr

0800b55a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b55a:	b580      	push	{r7, lr}
 800b55c:	b084      	sub	sp, #16
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
 800b562:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d101      	bne.n	800b572 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b56e:	2302      	movs	r3, #2
 800b570:	e02d      	b.n	800b5ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2201      	movs	r2, #1
 800b576:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2224      	movs	r2, #36	; 0x24
 800b57e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	681a      	ldr	r2, [r3, #0]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f022 0201 	bic.w	r2, r2, #1
 800b598:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	683a      	ldr	r2, [r7, #0]
 800b5aa:	430a      	orrs	r2, r1
 800b5ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 f850 	bl	800b654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2220      	movs	r2, #32
 800b5c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b5cc:	2300      	movs	r3, #0
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b084      	sub	sp, #16
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
 800b5de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d101      	bne.n	800b5ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b5ea:	2302      	movs	r3, #2
 800b5ec:	e02d      	b.n	800b64a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2224      	movs	r2, #36	; 0x24
 800b5fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f022 0201 	bic.w	r2, r2, #1
 800b614:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	683a      	ldr	r2, [r7, #0]
 800b626:	430a      	orrs	r2, r1
 800b628:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 f812 	bl	800b654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2220      	movs	r2, #32
 800b63c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b648:	2300      	movs	r3, #0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
	...

0800b654 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b660:	2b00      	cmp	r3, #0
 800b662:	d108      	bne.n	800b676 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2201      	movs	r2, #1
 800b668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b674:	e031      	b.n	800b6da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b676:	2310      	movs	r3, #16
 800b678:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b67a:	2310      	movs	r3, #16
 800b67c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	0e5b      	lsrs	r3, r3, #25
 800b686:	b2db      	uxtb	r3, r3
 800b688:	f003 0307 	and.w	r3, r3, #7
 800b68c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	0f5b      	lsrs	r3, r3, #29
 800b696:	b2db      	uxtb	r3, r3
 800b698:	f003 0307 	and.w	r3, r3, #7
 800b69c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b69e:	7bbb      	ldrb	r3, [r7, #14]
 800b6a0:	7b3a      	ldrb	r2, [r7, #12]
 800b6a2:	4911      	ldr	r1, [pc, #68]	; (800b6e8 <UARTEx_SetNbDataToProcess+0x94>)
 800b6a4:	5c8a      	ldrb	r2, [r1, r2]
 800b6a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b6aa:	7b3a      	ldrb	r2, [r7, #12]
 800b6ac:	490f      	ldr	r1, [pc, #60]	; (800b6ec <UARTEx_SetNbDataToProcess+0x98>)
 800b6ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6b4:	b29a      	uxth	r2, r3
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6bc:	7bfb      	ldrb	r3, [r7, #15]
 800b6be:	7b7a      	ldrb	r2, [r7, #13]
 800b6c0:	4909      	ldr	r1, [pc, #36]	; (800b6e8 <UARTEx_SetNbDataToProcess+0x94>)
 800b6c2:	5c8a      	ldrb	r2, [r1, r2]
 800b6c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b6c8:	7b7a      	ldrb	r2, [r7, #13]
 800b6ca:	4908      	ldr	r1, [pc, #32]	; (800b6ec <UARTEx_SetNbDataToProcess+0x98>)
 800b6cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b6da:	bf00      	nop
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	0800bf98 	.word	0x0800bf98
 800b6ec:	0800bfa0 	.word	0x0800bfa0

0800b6f0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d121      	bne.n	800b746 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	4b27      	ldr	r3, [pc, #156]	; (800b7a4 <FMC_SDRAM_Init+0xb4>)
 800b708:	4013      	ands	r3, r2
 800b70a:	683a      	ldr	r2, [r7, #0]
 800b70c:	6851      	ldr	r1, [r2, #4]
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	6892      	ldr	r2, [r2, #8]
 800b712:	4311      	orrs	r1, r2
 800b714:	683a      	ldr	r2, [r7, #0]
 800b716:	68d2      	ldr	r2, [r2, #12]
 800b718:	4311      	orrs	r1, r2
 800b71a:	683a      	ldr	r2, [r7, #0]
 800b71c:	6912      	ldr	r2, [r2, #16]
 800b71e:	4311      	orrs	r1, r2
 800b720:	683a      	ldr	r2, [r7, #0]
 800b722:	6952      	ldr	r2, [r2, #20]
 800b724:	4311      	orrs	r1, r2
 800b726:	683a      	ldr	r2, [r7, #0]
 800b728:	6992      	ldr	r2, [r2, #24]
 800b72a:	4311      	orrs	r1, r2
 800b72c:	683a      	ldr	r2, [r7, #0]
 800b72e:	69d2      	ldr	r2, [r2, #28]
 800b730:	4311      	orrs	r1, r2
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	6a12      	ldr	r2, [r2, #32]
 800b736:	4311      	orrs	r1, r2
 800b738:	683a      	ldr	r2, [r7, #0]
 800b73a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b73c:	430a      	orrs	r2, r1
 800b73e:	431a      	orrs	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	601a      	str	r2, [r3, #0]
 800b744:	e026      	b.n	800b794 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	69d9      	ldr	r1, [r3, #28]
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	4319      	orrs	r1, r3
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75c:	430b      	orrs	r3, r1
 800b75e:	431a      	orrs	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	685a      	ldr	r2, [r3, #4]
 800b768:	4b0e      	ldr	r3, [pc, #56]	; (800b7a4 <FMC_SDRAM_Init+0xb4>)
 800b76a:	4013      	ands	r3, r2
 800b76c:	683a      	ldr	r2, [r7, #0]
 800b76e:	6851      	ldr	r1, [r2, #4]
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	6892      	ldr	r2, [r2, #8]
 800b774:	4311      	orrs	r1, r2
 800b776:	683a      	ldr	r2, [r7, #0]
 800b778:	68d2      	ldr	r2, [r2, #12]
 800b77a:	4311      	orrs	r1, r2
 800b77c:	683a      	ldr	r2, [r7, #0]
 800b77e:	6912      	ldr	r2, [r2, #16]
 800b780:	4311      	orrs	r1, r2
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	6952      	ldr	r2, [r2, #20]
 800b786:	4311      	orrs	r1, r2
 800b788:	683a      	ldr	r2, [r7, #0]
 800b78a:	6992      	ldr	r2, [r2, #24]
 800b78c:	430a      	orrs	r2, r1
 800b78e:	431a      	orrs	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b794:	2300      	movs	r3, #0
}
 800b796:	4618      	mov	r0, r3
 800b798:	370c      	adds	r7, #12
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	ffff8000 	.word	0xffff8000

0800b7a8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d128      	bne.n	800b80c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	1e59      	subs	r1, r3, #1
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	011b      	lsls	r3, r3, #4
 800b7d0:	4319      	orrs	r1, r3
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	021b      	lsls	r3, r3, #8
 800b7da:	4319      	orrs	r1, r3
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	031b      	lsls	r3, r3, #12
 800b7e4:	4319      	orrs	r1, r3
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	041b      	lsls	r3, r3, #16
 800b7ee:	4319      	orrs	r1, r3
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	695b      	ldr	r3, [r3, #20]
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	051b      	lsls	r3, r3, #20
 800b7f8:	4319      	orrs	r1, r3
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	699b      	ldr	r3, [r3, #24]
 800b7fe:	3b01      	subs	r3, #1
 800b800:	061b      	lsls	r3, r3, #24
 800b802:	430b      	orrs	r3, r1
 800b804:	431a      	orrs	r2, r3
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	609a      	str	r2, [r3, #8]
 800b80a:	e02d      	b.n	800b868 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	689a      	ldr	r2, [r3, #8]
 800b810:	4b19      	ldr	r3, [pc, #100]	; (800b878 <FMC_SDRAM_Timing_Init+0xd0>)
 800b812:	4013      	ands	r3, r2
 800b814:	68ba      	ldr	r2, [r7, #8]
 800b816:	68d2      	ldr	r2, [r2, #12]
 800b818:	3a01      	subs	r2, #1
 800b81a:	0311      	lsls	r1, r2, #12
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	6952      	ldr	r2, [r2, #20]
 800b820:	3a01      	subs	r2, #1
 800b822:	0512      	lsls	r2, r2, #20
 800b824:	430a      	orrs	r2, r1
 800b826:	431a      	orrs	r2, r3
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	1e59      	subs	r1, r3, #1
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	3b01      	subs	r3, #1
 800b840:	011b      	lsls	r3, r3, #4
 800b842:	4319      	orrs	r1, r3
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	3b01      	subs	r3, #1
 800b84a:	021b      	lsls	r3, r3, #8
 800b84c:	4319      	orrs	r1, r3
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	691b      	ldr	r3, [r3, #16]
 800b852:	3b01      	subs	r3, #1
 800b854:	041b      	lsls	r3, r3, #16
 800b856:	4319      	orrs	r1, r3
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	699b      	ldr	r3, [r3, #24]
 800b85c:	3b01      	subs	r3, #1
 800b85e:	061b      	lsls	r3, r3, #24
 800b860:	430b      	orrs	r3, r1
 800b862:	431a      	orrs	r2, r3
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800b868:	2300      	movs	r3, #0
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3714      	adds	r7, #20
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	ff0f0fff 	.word	0xff0f0fff

0800b87c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b87c:	b084      	sub	sp, #16
 800b87e:	b580      	push	{r7, lr}
 800b880:	b084      	sub	sp, #16
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
 800b886:	f107 001c 	add.w	r0, r7, #28
 800b88a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b890:	2b01      	cmp	r3, #1
 800b892:	d120      	bne.n	800b8d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b898:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	68da      	ldr	r2, [r3, #12]
 800b8a4:	4b2a      	ldr	r3, [pc, #168]	; (800b950 <USB_CoreInit+0xd4>)
 800b8a6:	4013      	ands	r3, r2
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b8b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d105      	bne.n	800b8ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 faac 	bl	800be28 <USB_CoreReset>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	73fb      	strb	r3, [r7, #15]
 800b8d4:	e01a      	b.n	800b90c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 faa0 	bl	800be28 <USB_CoreReset>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b8ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d106      	bne.n	800b900 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	639a      	str	r2, [r3, #56]	; 0x38
 800b8fe:	e005      	b.n	800b90c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b904:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d116      	bne.n	800b940 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b916:	b29a      	uxth	r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b920:	4b0c      	ldr	r3, [pc, #48]	; (800b954 <USB_CoreInit+0xd8>)
 800b922:	4313      	orrs	r3, r2
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	f043 0206 	orr.w	r2, r3, #6
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	f043 0220 	orr.w	r2, r3, #32
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b940:	7bfb      	ldrb	r3, [r7, #15]
}
 800b942:	4618      	mov	r0, r3
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b94c:	b004      	add	sp, #16
 800b94e:	4770      	bx	lr
 800b950:	ffbdffbf 	.word	0xffbdffbf
 800b954:	03ee0000 	.word	0x03ee0000

0800b958 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	f023 0201 	bic.w	r2, r3, #1
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	370c      	adds	r7, #12
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr

0800b97a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b084      	sub	sp, #16
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	460b      	mov	r3, r1
 800b984:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b986:	2300      	movs	r3, #0
 800b988:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	68db      	ldr	r3, [r3, #12]
 800b98e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b996:	78fb      	ldrb	r3, [r7, #3]
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d115      	bne.n	800b9c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b9a8:	2001      	movs	r0, #1
 800b9aa:	f7f7 f893 	bl	8002ad4 <HAL_Delay>
      ms++;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 fa29 	bl	800be0c <USB_GetMode>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d01e      	beq.n	800b9fe <USB_SetCurrentMode+0x84>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2b31      	cmp	r3, #49	; 0x31
 800b9c4:	d9f0      	bls.n	800b9a8 <USB_SetCurrentMode+0x2e>
 800b9c6:	e01a      	b.n	800b9fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b9c8:	78fb      	ldrb	r3, [r7, #3]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d115      	bne.n	800b9fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	68db      	ldr	r3, [r3, #12]
 800b9d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b9da:	2001      	movs	r0, #1
 800b9dc:	f7f7 f87a 	bl	8002ad4 <HAL_Delay>
      ms++;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fa10 	bl	800be0c <USB_GetMode>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d005      	beq.n	800b9fe <USB_SetCurrentMode+0x84>
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2b31      	cmp	r3, #49	; 0x31
 800b9f6:	d9f0      	bls.n	800b9da <USB_SetCurrentMode+0x60>
 800b9f8:	e001      	b.n	800b9fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e005      	b.n	800ba0a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2b32      	cmp	r3, #50	; 0x32
 800ba02:	d101      	bne.n	800ba08 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ba04:	2301      	movs	r3, #1
 800ba06:	e000      	b.n	800ba0a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
	...

0800ba14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba14:	b084      	sub	sp, #16
 800ba16:	b580      	push	{r7, lr}
 800ba18:	b086      	sub	sp, #24
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
 800ba1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ba22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ba26:	2300      	movs	r3, #0
 800ba28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ba2e:	2300      	movs	r3, #0
 800ba30:	613b      	str	r3, [r7, #16]
 800ba32:	e009      	b.n	800ba48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	3340      	adds	r3, #64	; 0x40
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	4413      	add	r3, r2
 800ba3e:	2200      	movs	r2, #0
 800ba40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	3301      	adds	r3, #1
 800ba46:	613b      	str	r3, [r7, #16]
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	2b0e      	cmp	r3, #14
 800ba4c:	d9f2      	bls.n	800ba34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ba4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d11c      	bne.n	800ba8e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	68fa      	ldr	r2, [r7, #12]
 800ba5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba62:	f043 0302 	orr.w	r3, r3, #2
 800ba66:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba6c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	601a      	str	r2, [r3, #0]
 800ba8c:	e005      	b.n	800ba9a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800baa0:	461a      	mov	r2, r3
 800baa2:	2300      	movs	r3, #0
 800baa4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baac:	4619      	mov	r1, r3
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bab4:	461a      	mov	r2, r3
 800bab6:	680b      	ldr	r3, [r1, #0]
 800bab8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800baba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800babc:	2b01      	cmp	r3, #1
 800babe:	d10c      	bne.n	800bada <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d104      	bne.n	800bad0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bac6:	2100      	movs	r1, #0
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 f965 	bl	800bd98 <USB_SetDevSpeed>
 800bace:	e008      	b.n	800bae2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bad0:	2101      	movs	r1, #1
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 f960 	bl	800bd98 <USB_SetDevSpeed>
 800bad8:	e003      	b.n	800bae2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bada:	2103      	movs	r1, #3
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 f95b 	bl	800bd98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bae2:	2110      	movs	r1, #16
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 f8f3 	bl	800bcd0 <USB_FlushTxFifo>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d001      	beq.n	800baf4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800baf0:	2301      	movs	r3, #1
 800baf2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 f91f 	bl	800bd38 <USB_FlushRxFifo>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb16:	461a      	mov	r2, r3
 800bb18:	2300      	movs	r3, #0
 800bb1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb22:	461a      	mov	r2, r3
 800bb24:	2300      	movs	r3, #0
 800bb26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb28:	2300      	movs	r3, #0
 800bb2a:	613b      	str	r3, [r7, #16]
 800bb2c:	e043      	b.n	800bbb6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	015a      	lsls	r2, r3, #5
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	4413      	add	r3, r2
 800bb36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb44:	d118      	bne.n	800bb78 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d10a      	bne.n	800bb62 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	015a      	lsls	r2, r3, #5
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4413      	add	r3, r2
 800bb54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb58:	461a      	mov	r2, r3
 800bb5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bb5e:	6013      	str	r3, [r2, #0]
 800bb60:	e013      	b.n	800bb8a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	015a      	lsls	r2, r3, #5
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	4413      	add	r3, r2
 800bb6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb6e:	461a      	mov	r2, r3
 800bb70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bb74:	6013      	str	r3, [r2, #0]
 800bb76:	e008      	b.n	800bb8a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	015a      	lsls	r2, r3, #5
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	4413      	add	r3, r2
 800bb80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb84:	461a      	mov	r2, r3
 800bb86:	2300      	movs	r3, #0
 800bb88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	015a      	lsls	r2, r3, #5
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	4413      	add	r3, r2
 800bb92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb96:	461a      	mov	r2, r3
 800bb98:	2300      	movs	r3, #0
 800bb9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	015a      	lsls	r2, r3, #5
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	4413      	add	r3, r2
 800bba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bba8:	461a      	mov	r2, r3
 800bbaa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bbae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	613b      	str	r3, [r7, #16]
 800bbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb8:	693a      	ldr	r2, [r7, #16]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d3b7      	bcc.n	800bb2e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	613b      	str	r3, [r7, #16]
 800bbc2:	e043      	b.n	800bc4c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	015a      	lsls	r2, r3, #5
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	4413      	add	r3, r2
 800bbcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbda:	d118      	bne.n	800bc0e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d10a      	bne.n	800bbf8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	015a      	lsls	r2, r3, #5
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	4413      	add	r3, r2
 800bbea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbee:	461a      	mov	r2, r3
 800bbf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bbf4:	6013      	str	r3, [r2, #0]
 800bbf6:	e013      	b.n	800bc20 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	015a      	lsls	r2, r3, #5
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	4413      	add	r3, r2
 800bc00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc04:	461a      	mov	r2, r3
 800bc06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bc0a:	6013      	str	r3, [r2, #0]
 800bc0c:	e008      	b.n	800bc20 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	015a      	lsls	r2, r3, #5
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	4413      	add	r3, r2
 800bc16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	015a      	lsls	r2, r3, #5
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	4413      	add	r3, r2
 800bc28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	2300      	movs	r3, #0
 800bc30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	015a      	lsls	r2, r3, #5
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	4413      	add	r3, r2
 800bc3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc3e:	461a      	mov	r2, r3
 800bc40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bc44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	613b      	str	r3, [r7, #16]
 800bc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4e:	693a      	ldr	r2, [r7, #16]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d3b7      	bcc.n	800bbc4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bc74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d105      	bne.n	800bc88 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	699b      	ldr	r3, [r3, #24]
 800bc80:	f043 0210 	orr.w	r2, r3, #16
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	699a      	ldr	r2, [r3, #24]
 800bc8c:	4b0e      	ldr	r3, [pc, #56]	; (800bcc8 <USB_DevInit+0x2b4>)
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bc94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d005      	beq.n	800bca6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	699b      	ldr	r3, [r3, #24]
 800bc9e:	f043 0208 	orr.w	r2, r3, #8
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d105      	bne.n	800bcb8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	699a      	ldr	r2, [r3, #24]
 800bcb0:	4b06      	ldr	r3, [pc, #24]	; (800bccc <USB_DevInit+0x2b8>)
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bcb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3718      	adds	r7, #24
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bcc4:	b004      	add	sp, #16
 800bcc6:	4770      	bx	lr
 800bcc8:	803c3800 	.word	0x803c3800
 800bccc:	40000004 	.word	0x40000004

0800bcd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	3301      	adds	r3, #1
 800bce2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	4a13      	ldr	r2, [pc, #76]	; (800bd34 <USB_FlushTxFifo+0x64>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d901      	bls.n	800bcf0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bcec:	2303      	movs	r3, #3
 800bcee:	e01b      	b.n	800bd28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	691b      	ldr	r3, [r3, #16]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	daf2      	bge.n	800bcde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	019b      	lsls	r3, r3, #6
 800bd00:	f043 0220 	orr.w	r2, r3, #32
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	4a08      	ldr	r2, [pc, #32]	; (800bd34 <USB_FlushTxFifo+0x64>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d901      	bls.n	800bd1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bd16:	2303      	movs	r3, #3
 800bd18:	e006      	b.n	800bd28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	f003 0320 	and.w	r3, r3, #32
 800bd22:	2b20      	cmp	r3, #32
 800bd24:	d0f0      	beq.n	800bd08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3714      	adds	r7, #20
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr
 800bd34:	00030d40 	.word	0x00030d40

0800bd38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b085      	sub	sp, #20
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bd40:	2300      	movs	r3, #0
 800bd42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	3301      	adds	r3, #1
 800bd48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	4a11      	ldr	r2, [pc, #68]	; (800bd94 <USB_FlushRxFifo+0x5c>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d901      	bls.n	800bd56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bd52:	2303      	movs	r3, #3
 800bd54:	e018      	b.n	800bd88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	daf2      	bge.n	800bd44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2210      	movs	r2, #16
 800bd66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	4a08      	ldr	r2, [pc, #32]	; (800bd94 <USB_FlushRxFifo+0x5c>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d901      	bls.n	800bd7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bd76:	2303      	movs	r3, #3
 800bd78:	e006      	b.n	800bd88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	691b      	ldr	r3, [r3, #16]
 800bd7e:	f003 0310 	and.w	r3, r3, #16
 800bd82:	2b10      	cmp	r3, #16
 800bd84:	d0f0      	beq.n	800bd68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bd86:	2300      	movs	r3, #0
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3714      	adds	r7, #20
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr
 800bd94:	00030d40 	.word	0x00030d40

0800bd98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	460b      	mov	r3, r1
 800bda2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	78fb      	ldrb	r3, [r7, #3]
 800bdb2:	68f9      	ldr	r1, [r7, #12]
 800bdb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bdbc:	2300      	movs	r3, #0
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3714      	adds	r7, #20
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr

0800bdca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bdca:	b480      	push	{r7}
 800bdcc:	b085      	sub	sp, #20
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bde4:	f023 0303 	bic.w	r3, r3, #3
 800bde8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdf8:	f043 0302 	orr.w	r3, r3, #2
 800bdfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bdfe:	2300      	movs	r3, #0
}
 800be00:	4618      	mov	r0, r3
 800be02:	3714      	adds	r7, #20
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	695b      	ldr	r3, [r3, #20]
 800be18:	f003 0301 	and.w	r3, r3, #1
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	370c      	adds	r7, #12
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800be28:	b480      	push	{r7}
 800be2a:	b085      	sub	sp, #20
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be30:	2300      	movs	r3, #0
 800be32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	3301      	adds	r3, #1
 800be38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	4a13      	ldr	r2, [pc, #76]	; (800be8c <USB_CoreReset+0x64>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d901      	bls.n	800be46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800be42:	2303      	movs	r3, #3
 800be44:	e01b      	b.n	800be7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	691b      	ldr	r3, [r3, #16]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	daf2      	bge.n	800be34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800be4e:	2300      	movs	r3, #0
 800be50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	691b      	ldr	r3, [r3, #16]
 800be56:	f043 0201 	orr.w	r2, r3, #1
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	3301      	adds	r3, #1
 800be62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	4a09      	ldr	r2, [pc, #36]	; (800be8c <USB_CoreReset+0x64>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d901      	bls.n	800be70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800be6c:	2303      	movs	r3, #3
 800be6e:	e006      	b.n	800be7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	691b      	ldr	r3, [r3, #16]
 800be74:	f003 0301 	and.w	r3, r3, #1
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d0f0      	beq.n	800be5e <USB_CoreReset+0x36>

  return HAL_OK;
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3714      	adds	r7, #20
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	00030d40 	.word	0x00030d40

0800be90 <__libc_init_array>:
 800be90:	b570      	push	{r4, r5, r6, lr}
 800be92:	4d0d      	ldr	r5, [pc, #52]	; (800bec8 <__libc_init_array+0x38>)
 800be94:	4c0d      	ldr	r4, [pc, #52]	; (800becc <__libc_init_array+0x3c>)
 800be96:	1b64      	subs	r4, r4, r5
 800be98:	10a4      	asrs	r4, r4, #2
 800be9a:	2600      	movs	r6, #0
 800be9c:	42a6      	cmp	r6, r4
 800be9e:	d109      	bne.n	800beb4 <__libc_init_array+0x24>
 800bea0:	4d0b      	ldr	r5, [pc, #44]	; (800bed0 <__libc_init_array+0x40>)
 800bea2:	4c0c      	ldr	r4, [pc, #48]	; (800bed4 <__libc_init_array+0x44>)
 800bea4:	f000 f82e 	bl	800bf04 <_init>
 800bea8:	1b64      	subs	r4, r4, r5
 800beaa:	10a4      	asrs	r4, r4, #2
 800beac:	2600      	movs	r6, #0
 800beae:	42a6      	cmp	r6, r4
 800beb0:	d105      	bne.n	800bebe <__libc_init_array+0x2e>
 800beb2:	bd70      	pop	{r4, r5, r6, pc}
 800beb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800beb8:	4798      	blx	r3
 800beba:	3601      	adds	r6, #1
 800bebc:	e7ee      	b.n	800be9c <__libc_init_array+0xc>
 800bebe:	f855 3b04 	ldr.w	r3, [r5], #4
 800bec2:	4798      	blx	r3
 800bec4:	3601      	adds	r6, #1
 800bec6:	e7f2      	b.n	800beae <__libc_init_array+0x1e>
 800bec8:	0800bfb0 	.word	0x0800bfb0
 800becc:	0800bfb0 	.word	0x0800bfb0
 800bed0:	0800bfb0 	.word	0x0800bfb0
 800bed4:	0800bfb4 	.word	0x0800bfb4

0800bed8 <memcpy>:
 800bed8:	440a      	add	r2, r1
 800beda:	4291      	cmp	r1, r2
 800bedc:	f100 33ff 	add.w	r3, r0, #4294967295
 800bee0:	d100      	bne.n	800bee4 <memcpy+0xc>
 800bee2:	4770      	bx	lr
 800bee4:	b510      	push	{r4, lr}
 800bee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800beea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800beee:	4291      	cmp	r1, r2
 800bef0:	d1f9      	bne.n	800bee6 <memcpy+0xe>
 800bef2:	bd10      	pop	{r4, pc}

0800bef4 <memset>:
 800bef4:	4402      	add	r2, r0
 800bef6:	4603      	mov	r3, r0
 800bef8:	4293      	cmp	r3, r2
 800befa:	d100      	bne.n	800befe <memset+0xa>
 800befc:	4770      	bx	lr
 800befe:	f803 1b01 	strb.w	r1, [r3], #1
 800bf02:	e7f9      	b.n	800bef8 <memset+0x4>

0800bf04 <_init>:
 800bf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf06:	bf00      	nop
 800bf08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf0a:	bc08      	pop	{r3}
 800bf0c:	469e      	mov	lr, r3
 800bf0e:	4770      	bx	lr

0800bf10 <_fini>:
 800bf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf12:	bf00      	nop
 800bf14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf16:	bc08      	pop	{r3}
 800bf18:	469e      	mov	lr, r3
 800bf1a:	4770      	bx	lr
