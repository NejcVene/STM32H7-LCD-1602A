
LCD_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efac  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  0800f24c  0800f24c  0001f24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f3f0  0800f3f0  0001f3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f3f8  0800f3f8  0001f3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f3fc  0800f3fc  0001f3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  0800f400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2400009c  0800f49c  0002009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000fc  0800f4fc  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c80  2400015c  0800f55c  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000ddc  0800f55c  00020ddc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032757  00000000  00000000  0002018a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000470d  00000000  00000000  000528e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002520  00000000  00000000  00056ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002380  00000000  00000000  00059510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042241  00000000  00000000  0005b890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030462  00000000  00000000  0009dad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a6025  00000000  00000000  000cdf33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00273f58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a8c8  00000000  00000000  00273fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400015c 	.word	0x2400015c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f234 	.word	0x0800f234

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000160 	.word	0x24000160
 80002dc:	0800f234 	.word	0x0800f234

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <__LCD_Delay>:
/*
 * @brief Function to delay in microseconds
 * @param delay: value in microseconds to delay
 * @retval None
 */
void __LCD_Delay(uint16_t delay) {
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&timer, 0);
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <__LCD_Delay+0x30>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < delay);
 80006a6:	bf00      	nop
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <__LCD_Delay+0x30>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d3f9      	bcc.n	80006a8 <__LCD_Delay+0x14>

}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	24000750 	.word	0x24000750

080006c8 <__LCD_Write4Bits>:
/*
 * @brief Function to write individual bits to the pins
 * @param value: value to write
 * @retval None
 */
void __LCD_Write4Bits(uint8_t value) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DATA4_PORT, DATA4_PIN, (value >> 3) & 0x01);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	08db      	lsrs	r3, r3, #3
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	f003 0301 	and.w	r3, r3, #1
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	461a      	mov	r2, r3
 80006e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e4:	481a      	ldr	r0, [pc, #104]	; (8000750 <__LCD_Write4Bits+0x88>)
 80006e6:	f005 fccf 	bl	8006088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA3_PORT, DATA3_PIN, (value >> 2) & 0x01);
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	089b      	lsrs	r3, r3, #2
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	461a      	mov	r2, r3
 80006f8:	2102      	movs	r1, #2
 80006fa:	4816      	ldr	r0, [pc, #88]	; (8000754 <__LCD_Write4Bits+0x8c>)
 80006fc:	f005 fcc4 	bl	8006088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA2_PORT, DATA2_PIN, (value >> 1) & 0x01);
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	085b      	lsrs	r3, r3, #1
 8000704:	b2db      	uxtb	r3, r3
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	b2db      	uxtb	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	2140      	movs	r1, #64	; 0x40
 8000710:	480f      	ldr	r0, [pc, #60]	; (8000750 <__LCD_Write4Bits+0x88>)
 8000712:	f005 fcb9 	bl	8006088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA1_PORT, DATA1_PIN, value & 0x01);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	461a      	mov	r2, r3
 8000720:	2108      	movs	r1, #8
 8000722:	480d      	ldr	r0, [pc, #52]	; (8000758 <__LCD_Write4Bits+0x90>)
 8000724:	f005 fcb0 	bl	8006088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 1);
 8000728:	2201      	movs	r2, #1
 800072a:	2140      	movs	r1, #64	; 0x40
 800072c:	480b      	ldr	r0, [pc, #44]	; (800075c <__LCD_Write4Bits+0x94>)
 800072e:	f005 fcab 	bl	8006088 <HAL_GPIO_WritePin>
	__LCD_Delay(120);
 8000732:	2078      	movs	r0, #120	; 0x78
 8000734:	f7ff ffae 	bl	8000694 <__LCD_Delay>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2140      	movs	r1, #64	; 0x40
 800073c:	4807      	ldr	r0, [pc, #28]	; (800075c <__LCD_Write4Bits+0x94>)
 800073e:	f005 fca3 	bl	8006088 <HAL_GPIO_WritePin>
	__LCD_Delay(120);
 8000742:	2078      	movs	r0, #120	; 0x78
 8000744:	f7ff ffa6 	bl	8000694 <__LCD_Delay>

}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	58020000 	.word	0x58020000
 8000754:	58022800 	.word	0x58022800
 8000758:	58021800 	.word	0x58021800
 800075c:	58020400 	.word	0x58020400

08000760 <__LCD_Send>:
 * @brief Function to send data to the LCD and enable RS pin
 * @param value: value to send
 * @param state: state to set RS (register select) pin [0, 1]
 * @retval None
 */
void __LCD_Send(uint8_t value, int state) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(RS_PORT, RS_PIN, state);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	461a      	mov	r2, r3
 8000772:	2180      	movs	r1, #128	; 0x80
 8000774:	4808      	ldr	r0, [pc, #32]	; (8000798 <__LCD_Send+0x38>)
 8000776:	f005 fc87 	bl	8006088 <HAL_GPIO_WritePin>
	__LCD_Write4Bits(value >> 4);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	091b      	lsrs	r3, r3, #4
 800077e:	b2db      	uxtb	r3, r3
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffa1 	bl	80006c8 <__LCD_Write4Bits>
	__LCD_Write4Bits(value);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff9d 	bl	80006c8 <__LCD_Write4Bits>

}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	58020400 	.word	0x58020400

0800079c <__LCD_Cmd>:
/*
 * @brief Function to send command to the LCD
 * @param value: command to send
 * @retval None
 */
void __LCD_Cmd(uint8_t value) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]

	__LCD_Send(value, 0);
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffd8 	bl	8000760 <__LCD_Send>

}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <__LCD_Data>:
/*
 * @brief Function to send data to the LCD
 * @param value: value to send
 * @retval None
 */
void __LCD_Data(uint8_t value) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]

	__LCD_Send(value, 1);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2101      	movs	r1, #1
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ffca 	bl	8000760 <__LCD_Send>

}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <LCD_Write>:
/*
 * @brief Function to write to the LCD
 * @param value: value to write to the LCD
 * @retval None
 */
void LCD_Write(char *value) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]

	while (*value) {
 80007dc:	e00a      	b.n	80007f4 <LCD_Write+0x20>
		__LCD_Data(*value++);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	607a      	str	r2, [r7, #4]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ffe6 	bl	80007b8 <__LCD_Data>
		__LCD_Delay(5000);
 80007ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80007f0:	f7ff ff50 	bl	8000694 <__LCD_Delay>
	while (*value) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f0      	bne.n	80007de <LCD_Write+0xa>
		// HAL_Delay(1000);
	}

}
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <LCD_Pos_Cursor>:
 * @brief Function to set the cursor position
 * @param row: row to set the cursor [0, 1]
 * @param col: column to set the cursor [0, 15]
 * @retval None
 */
void LCD_Pos_Cursor(uint8_t row, uint8_t col) {
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	460a      	mov	r2, r1
 8000810:	71fb      	strb	r3, [r7, #7]
 8000812:	4613      	mov	r3, r2
 8000814:	71bb      	strb	r3, [r7, #6]

	switch (row) {
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <LCD_Pos_Cursor+0x1c>
 800081c:	2b01      	cmp	r3, #1
 800081e:	d005      	beq.n	800082c <LCD_Pos_Cursor+0x26>
 8000820:	e009      	b.n	8000836 <LCD_Pos_Cursor+0x30>
		case 0:
			col |= 0x80;
 8000822:	79bb      	ldrb	r3, [r7, #6]
 8000824:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000828:	71bb      	strb	r3, [r7, #6]
	        break;
 800082a:	e009      	b.n	8000840 <LCD_Pos_Cursor+0x3a>
	    case 1:
	        col |= 0xC0;
 800082c:	79bb      	ldrb	r3, [r7, #6]
 800082e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000832:	71bb      	strb	r3, [r7, #6]
	        break;
 8000834:	e004      	b.n	8000840 <LCD_Pos_Cursor+0x3a>
	    default:
	    	row = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	71fb      	strb	r3, [r7, #7]
	    	col = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	71bb      	strb	r3, [r7, #6]
	    	break;
 800083e:	bf00      	nop
	}
	__LCD_Cmd(col);
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ffaa 	bl	800079c <__LCD_Cmd>

}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <LCD_Clear>:
/*
 * @brief Function to clear the display
 * @param None
 * @retval None
 */
void LCD_Clear(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

	__LCD_Cmd(CLEAR);
 8000854:	2001      	movs	r0, #1
 8000856:	f7ff ffa1 	bl	800079c <__LCD_Cmd>

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}

0800085e <LCD_Scroll_Display_Right>:
/*
 * @brief Function to scroll the display right
 * @param None
 * @retval None
 */
void LCD_Scroll_Display_Right(void) {
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0

	__LCD_Cmd(SCROLL_DISPLAY_RIGHT);
 8000862:	201c      	movs	r0, #28
 8000864:	f7ff ff9a 	bl	800079c <__LCD_Cmd>

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <LCD_Scroll_Display_Left>:
/*
 * @brief Function to scroll the display left
 * @param None
 * @retval None
 */
void LCD_Scroll_Display_Left(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

	__LCD_Cmd(SCROLL_DISPLAY_LEFT);
 8000870:	2018      	movs	r0, #24
 8000872:	f7ff ff93 	bl	800079c <__LCD_Cmd>

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}

0800087a <LCD_Init>:
 * @brief Function to initialize the LCD
 * @param cursor: true/false to enable cursor
 * @param blinking: true/false to enable blinking
 * @retval None
 */
void LCD_Init(bool cursor, bool blinking) {
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	4603      	mov	r3, r0
 8000882:	460a      	mov	r2, r1
 8000884:	71fb      	strb	r3, [r7, #7]
 8000886:	4613      	mov	r3, r2
 8000888:	71bb      	strb	r3, [r7, #6]

	// Init
	__LCD_Delay(50000);
 800088a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800088e:	f7ff ff01 	bl	8000694 <__LCD_Delay>
	__LCD_Cmd(0x30);
 8000892:	2030      	movs	r0, #48	; 0x30
 8000894:	f7ff ff82 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(4500);
 8000898:	f241 1094 	movw	r0, #4500	; 0x1194
 800089c:	f7ff fefa 	bl	8000694 <__LCD_Delay>
	__LCD_Cmd(0x30);
 80008a0:	2030      	movs	r0, #48	; 0x30
 80008a2:	f7ff ff7b 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(150);
 80008a6:	2096      	movs	r0, #150	; 0x96
 80008a8:	f7ff fef4 	bl	8000694 <__LCD_Delay>
	__LCD_Cmd(0x30);
 80008ac:	2030      	movs	r0, #48	; 0x30
 80008ae:	f7ff ff75 	bl	800079c <__LCD_Cmd>

	// Go to 4 bit mode
	__LCD_Delay(10);
 80008b2:	200a      	movs	r0, #10
 80008b4:	f7ff feee 	bl	8000694 <__LCD_Delay>
	__LCD_Cmd(0x20);
 80008b8:	2020      	movs	r0, #32
 80008ba:	f7ff ff6f 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(50);
 80008be:	2032      	movs	r0, #50	; 0x32
 80008c0:	f7ff fee8 	bl	8000694 <__LCD_Delay>

	// Set display lines and font
	__LCD_Cmd(0x28);
 80008c4:	2028      	movs	r0, #40	; 0x28
 80008c6:	f7ff ff69 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(50);
 80008ca:	2032      	movs	r0, #50	; 0x32
 80008cc:	f7ff fee2 	bl	8000694 <__LCD_Delay>

	// Display on/off
	__LCD_Cmd(0x08);
 80008d0:	2008      	movs	r0, #8
 80008d2:	f7ff ff63 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(50);
 80008d6:	2032      	movs	r0, #50	; 0x32
 80008d8:	f7ff fedc 	bl	8000694 <__LCD_Delay>

	// Display clear
	__LCD_Cmd(0x01);
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff ff5d 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(1500);
 80008e2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80008e6:	f7ff fed5 	bl	8000694 <__LCD_Delay>

	// Entry mode set
	__LCD_Cmd(0x06);
 80008ea:	2006      	movs	r0, #6
 80008ec:	f7ff ff56 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(50);
 80008f0:	2032      	movs	r0, #50	; 0x32
 80008f2:	f7ff fecf 	bl	8000694 <__LCD_Delay>

	// Display on/off
	if (cursor && blinking) {
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d006      	beq.n	800090a <LCD_Init+0x90>
 80008fc:	79bb      	ldrb	r3, [r7, #6]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <LCD_Init+0x90>
		__LCD_Cmd(CURSOR_BLINK);
 8000902:	200f      	movs	r0, #15
 8000904:	f7ff ff4a 	bl	800079c <__LCD_Cmd>
 8000908:	e010      	b.n	800092c <LCD_Init+0xb2>
	} else if (cursor) {
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d003      	beq.n	8000918 <LCD_Init+0x9e>
		__LCD_Cmd(CURSOR);
 8000910:	200e      	movs	r0, #14
 8000912:	f7ff ff43 	bl	800079c <__LCD_Cmd>
 8000916:	e009      	b.n	800092c <LCD_Init+0xb2>
	} else if (blinking) {
 8000918:	79bb      	ldrb	r3, [r7, #6]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d003      	beq.n	8000926 <LCD_Init+0xac>
		__LCD_Cmd(BLINK);
 800091e:	200d      	movs	r0, #13
 8000920:	f7ff ff3c 	bl	800079c <__LCD_Cmd>
 8000924:	e002      	b.n	800092c <LCD_Init+0xb2>
	} else {
		__LCD_Cmd(NO_BLINK_NO_CURSOR);
 8000926:	200c      	movs	r0, #12
 8000928:	f7ff ff38 	bl	800079c <__LCD_Cmd>
	}

	__LCD_Delay(50000);
 800092c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000930:	f7ff feb0 	bl	8000694 <__LCD_Delay>
	LCD_Pos_Cursor(0, 0);
 8000934:	2100      	movs	r1, #0
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff ff65 	bl	8000806 <LCD_Pos_Cursor>

}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094a:	f002 fa77 	bl	8002e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094e:	f000 f89d 	bl	8000a8c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000952:	f000 f91d 	bl	8000b90 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000956:	f000 fed9 	bl	800170c <MX_GPIO_Init>
  MX_ADC1_Init();
 800095a:	f000 f949 	bl	8000bf0 <MX_ADC1_Init>
  MX_ADC2_Init();
 800095e:	f000 f9bd 	bl	8000cdc <MX_ADC2_Init>
  MX_ADC3_Init();
 8000962:	f000 fa1f 	bl	8000da4 <MX_ADC3_Init>
  MX_ETH_Init();
 8000966:	f000 fa7f 	bl	8000e68 <MX_ETH_Init>
  MX_FDCAN1_Init();
 800096a:	f000 fac9 	bl	8000f00 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800096e:	f000 fb2b 	bl	8000fc8 <MX_FDCAN2_Init>
  MX_FMC_Init();
 8000972:	f000 fe7d 	bl	8001670 <MX_FMC_Init>
  MX_LTDC_Init();
 8000976:	f000 fb8b 	bl	8001090 <MX_LTDC_Init>
  MX_RTC_Init();
 800097a:	f000 fc3b 	bl	80011f4 <MX_RTC_Init>
  MX_SAI2_Init();
 800097e:	f000 fc95 	bl	80012ac <MX_SAI2_Init>
  MX_SPI2_Init();
 8000982:	f000 fd51 	bl	8001428 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000986:	f000 fdf5 	bl	8001574 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800098a:	f000 fe3f 	bl	800160c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800098e:	f000 fd9f 	bl	80014d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  STATE state = SETUP;
 8000992:	2300      	movs	r3, #0
 8000994:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  switch (state) {
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b06      	cmp	r3, #6
 800099a:	d866      	bhi.n	8000a6a <main+0x126>
 800099c:	a201      	add	r2, pc, #4	; (adr r2, 80009a4 <main+0x60>)
 800099e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a2:	bf00      	nop
 80009a4:	080009c1 	.word	0x080009c1
 80009a8:	080009cf 	.word	0x080009cf
 80009ac:	080009df 	.word	0x080009df
 80009b0:	080009f1 	.word	0x080009f1
 80009b4:	08000a51 	.word	0x08000a51
 80009b8:	08000a57 	.word	0x08000a57
 80009bc:	08000a5d 	.word	0x08000a5d
	  	  case SETUP:
	  		  LCD_Init(false, false);
 80009c0:	2100      	movs	r1, #0
 80009c2:	2000      	movs	r0, #0
 80009c4:	f7ff ff59 	bl	800087a <LCD_Init>
	  		  state = SHOW_MENU;
 80009c8:	2301      	movs	r3, #1
 80009ca:	71fb      	strb	r3, [r7, #7]
	  		  break;
 80009cc:	e055      	b.n	8000a7a <main+0x136>
	  	  case SHOW_MENU:
	  		  if (printWelcomeText()) {
 80009ce:	f001 f8b1 	bl	8001b34 <printWelcomeText>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d04b      	beq.n	8000a70 <main+0x12c>
	  			  state = GET_OPTION;
 80009d8:	2302      	movs	r3, #2
 80009da:	71fb      	strb	r3, [r7, #7]
	  		  }
	  		  break;
 80009dc:	e048      	b.n	8000a70 <main+0x12c>
	  	  case GET_OPTION:
	  		  if (receiveValue(1)) {
 80009de:	2001      	movs	r0, #1
 80009e0:	f001 f8d6 	bl	8001b90 <receiveValue>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d044      	beq.n	8000a74 <main+0x130>
	  			  state = SELECT_PROGRAM;
 80009ea:	2303      	movs	r3, #3
 80009ec:	71fb      	strb	r3, [r7, #7]
	  		  }
	  		  break;
 80009ee:	e041      	b.n	8000a74 <main+0x130>
	  	  case SELECT_PROGRAM:
	  		  if (haveReceived) {
 80009f0:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <main+0x140>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d03f      	beq.n	8000a78 <main+0x134>
	  			switch (rxBuffer[0]) {
 80009f8:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <main+0x144>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b33      	cmp	r3, #51	; 0x33
 80009fe:	d018      	beq.n	8000a32 <main+0xee>
 8000a00:	2b33      	cmp	r3, #51	; 0x33
 8000a02:	dc19      	bgt.n	8000a38 <main+0xf4>
 8000a04:	2b31      	cmp	r3, #49	; 0x31
 8000a06:	d002      	beq.n	8000a0e <main+0xca>
 8000a08:	2b32      	cmp	r3, #50	; 0x32
 8000a0a:	d009      	beq.n	8000a20 <main+0xdc>
	  				  	break;
	  				case '3':
	  				  	state = CLOCK_F;
	  				  	break;
	  				default:
	  				  	break;
 8000a0c:	e014      	b.n	8000a38 <main+0xf4>
	  					if (receiveValue(32)) {
 8000a0e:	2020      	movs	r0, #32
 8000a10:	f001 f8be 	bl	8001b90 <receiveValue>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d010      	beq.n	8000a3c <main+0xf8>
	  						state = TEXT_TO_LCD;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	71fb      	strb	r3, [r7, #7]
	  				  	break;
 8000a1e:	e00d      	b.n	8000a3c <main+0xf8>
	  					if (receiveValue(4)) {
 8000a20:	2004      	movs	r0, #4
 8000a22:	f001 f8b5 	bl	8001b90 <receiveValue>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d009      	beq.n	8000a40 <main+0xfc>
	  						state = MOVE_TEXT;
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	71fb      	strb	r3, [r7, #7]
	  				  	break;
 8000a30:	e006      	b.n	8000a40 <main+0xfc>
	  				  	state = CLOCK_F;
 8000a32:	2306      	movs	r3, #6
 8000a34:	71fb      	strb	r3, [r7, #7]
	  				  	break;
 8000a36:	e004      	b.n	8000a42 <main+0xfe>
	  				  	break;
 8000a38:	bf00      	nop
 8000a3a:	e002      	b.n	8000a42 <main+0xfe>
	  				  	break;
 8000a3c:	bf00      	nop
 8000a3e:	e000      	b.n	8000a42 <main+0xfe>
	  				  	break;
 8000a40:	bf00      	nop
	  			}
	  			if (state != SELECT_PROGRAM) {
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	d017      	beq.n	8000a78 <main+0x134>
	  				haveReceived = false;
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <main+0x140>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
	  			}
	  		  }
	  		  break;
 8000a4e:	e013      	b.n	8000a78 <main+0x134>
	  	  case TEXT_TO_LCD:
	  		  typeToLCD();
 8000a50:	f001 f8b8 	bl	8001bc4 <typeToLCD>
	  		  break;
 8000a54:	e011      	b.n	8000a7a <main+0x136>
	  	  case MOVE_TEXT:
	  		  moveTextLCD();
 8000a56:	f001 f8c7 	bl	8001be8 <moveTextLCD>
	  		  break;
 8000a5a:	e00e      	b.n	8000a7a <main+0x136>
	  	  case CLOCK_F:
	  		  displayClock();
 8000a5c:	f001 f912 	bl	8001c84 <displayClock>
	  		  HAL_Delay(800);
 8000a60:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a64:	f002 fa7c 	bl	8002f60 <HAL_Delay>
	  		  break;
 8000a68:	e007      	b.n	8000a7a <main+0x136>
	  	  default:
	  		  return -1;
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	e005      	b.n	8000a7c <main+0x138>
	  		  break;
 8000a70:	bf00      	nop
 8000a72:	e790      	b.n	8000996 <main+0x52>
	  		  break;
 8000a74:	bf00      	nop
 8000a76:	e78e      	b.n	8000996 <main+0x52>
	  		  break;
 8000a78:	bf00      	nop
	  switch (state) {
 8000a7a:	e78c      	b.n	8000996 <main+0x52>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	24000d70 	.word	0x24000d70
 8000a88:	24000d74 	.word	0x24000d74

08000a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b09c      	sub	sp, #112	; 0x70
 8000a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	224c      	movs	r2, #76	; 0x4c
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f00d ff62 	bl	800e964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2220      	movs	r2, #32
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f00d ff5c 	bl	800e964 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aac:	2002      	movs	r0, #2
 8000aae:	f005 fef5 	bl	800689c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b34      	ldr	r3, [pc, #208]	; (8000b88 <SystemClock_Config+0xfc>)
 8000ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aba:	4a33      	ldr	r2, [pc, #204]	; (8000b88 <SystemClock_Config+0xfc>)
 8000abc:	f023 0301 	bic.w	r3, r3, #1
 8000ac0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ac2:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <SystemClock_Config+0xfc>)
 8000ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <SystemClock_Config+0x100>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ad4:	4a2d      	ldr	r2, [pc, #180]	; (8000b8c <SystemClock_Config+0x100>)
 8000ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <SystemClock_Config+0x100>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ae8:	bf00      	nop
 8000aea:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <SystemClock_Config+0x100>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000af6:	d1f8      	bne.n	8000aea <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000af8:	230b      	movs	r3, #11
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000afc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b02:	2301      	movs	r3, #1
 8000b04:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b06:	2340      	movs	r3, #64	; 0x40
 8000b08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b12:	2302      	movs	r3, #2
 8000b14:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8000b16:	2316      	movs	r3, #22
 8000b18:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000b1a:	23a9      	movs	r3, #169	; 0xa9
 8000b1c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b22:	2304      	movs	r3, #4
 8000b24:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b26:	2302      	movs	r3, #2
 8000b28:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f005 fef8 	bl	8006930 <HAL_RCC_OscConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000b46:	f001 f8d7 	bl	8001cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4a:	233f      	movs	r3, #63	; 0x3f
 8000b4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f006 fb38 	bl	80071e4 <HAL_RCC_ClockConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b7a:	f001 f8bd 	bl	8001cf8 <Error_Handler>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3770      	adds	r7, #112	; 0x70
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	58000400 	.word	0x58000400
 8000b8c:	58024800 	.word	0x58024800

08000b90 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b0b0      	sub	sp, #192	; 0xc0
 8000b94:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b96:	463b      	mov	r3, r7
 8000b98:	22c0      	movs	r2, #192	; 0xc0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f00d fee1 	bl	800e964 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ba2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ba6:	f04f 0300 	mov.w	r3, #0
 8000baa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000bb6:	2305      	movs	r3, #5
 8000bb8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bc2:	23c0      	movs	r3, #192	; 0xc0
 8000bc4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000bc6:	2320      	movs	r3, #32
 8000bc8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f006 fe90 	bl	80078fc <HAL_RCCEx_PeriphCLKConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000be2:	f001 f889 	bl	8001cf8 <Error_Handler>
  }
}
 8000be6:	bf00      	nop
 8000be8:	37c0      	adds	r7, #192	; 0xc0
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c02:	463b      	mov	r3, r7
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
 8000c10:	615a      	str	r2, [r3, #20]
 8000c12:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c16:	4a30      	ldr	r2, [pc, #192]	; (8000cd8 <MX_ADC1_Init+0xe8>)
 8000c18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c1a:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c26:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c2e:	2204      	movs	r2, #4
 8000c30:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c32:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c44:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c4a:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c50:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c56:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c70:	4818      	ldr	r0, [pc, #96]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c72:	f002 fb5b 	bl	800332c <HAL_ADC_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c7c:	f001 f83c 	bl	8001cf8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4812      	ldr	r0, [pc, #72]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c8c:	f003 f972 	bl	8003f74 <HAL_ADCEx_MultiModeConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000c96:	f001 f82f 	bl	8001cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c9e:	2306      	movs	r3, #6
 8000ca0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ca6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000caa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cac:	2304      	movs	r3, #4
 8000cae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb8:	463b      	mov	r3, r7
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000cbe:	f002 fcd7 	bl	8003670 <HAL_ADC_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000cc8:	f001 f816 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	240001b0 	.word	0x240001b0
 8000cd8:	40022000 	.word	0x40022000

08000cdc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
 8000cf0:	615a      	str	r2, [r3, #20]
 8000cf2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000cf4:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000cf6:	4a2a      	ldr	r2, [pc, #168]	; (8000da0 <MX_ADC2_Init+0xc4>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cfa:	4b28      	ldr	r3, [pc, #160]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d00:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d06:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d0e:	2204      	movs	r2, #4
 8000d10:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d12:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d18:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d30:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d36:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d50:	4812      	ldr	r0, [pc, #72]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d52:	f002 faeb 	bl	800332c <HAL_ADC_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000d5c:	f000 ffcc 	bl	8001cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d60:	2301      	movs	r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d64:	2306      	movs	r3, #6
 8000d66:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d6c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d70:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d72:	2304      	movs	r3, #4
 8000d74:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	4619      	mov	r1, r3
 8000d82:	4806      	ldr	r0, [pc, #24]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d84:	f002 fc74 	bl	8003670 <HAL_ADC_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000d8e:	f000 ffb3 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	3720      	adds	r7, #32
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	24000214 	.word	0x24000214
 8000da0:	40022100 	.word	0x40022100

08000da4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
 8000db8:	615a      	str	r2, [r3, #20]
 8000dba:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000dbe:	4a28      	ldr	r2, [pc, #160]	; (8000e60 <MX_ADC3_Init+0xbc>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dc8:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000dd4:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000de0:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000de6:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e12:	4812      	ldr	r0, [pc, #72]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000e14:	f002 fa8a 	bl	800332c <HAL_ADC_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000e1e:	f000 ff6b 	bl	8001cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <MX_ADC3_Init+0xc0>)
 8000e24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e26:	2306      	movs	r3, #6
 8000e28:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e2e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e32:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e34:	2304      	movs	r3, #4
 8000e36:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	4619      	mov	r1, r3
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000e46:	f002 fc13 	bl	8003670 <HAL_ADC_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000e50:	f000 ff52 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	3720      	adds	r7, #32
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	24000278 	.word	0x24000278
 8000e60:	58026000 	.word	0x58026000
 8000e64:	1d500080 	.word	0x1d500080

08000e68 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <MX_ETH_Init+0x80>)
 8000e6e:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <MX_ETH_Init+0x84>)
 8000e70:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <MX_ETH_Init+0x88>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000e78:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <MX_ETH_Init+0x88>)
 8000e7a:	2280      	movs	r2, #128	; 0x80
 8000e7c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <MX_ETH_Init+0x88>)
 8000e80:	22e1      	movs	r2, #225	; 0xe1
 8000e82:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <MX_ETH_Init+0x88>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <MX_ETH_Init+0x88>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000e90:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <MX_ETH_Init+0x88>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MX_ETH_Init+0x80>)
 8000e98:	4a15      	ldr	r2, [pc, #84]	; (8000ef0 <MX_ETH_Init+0x88>)
 8000e9a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <MX_ETH_Init+0x80>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_ETH_Init+0x80>)
 8000ea4:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <MX_ETH_Init+0x8c>)
 8000ea6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_ETH_Init+0x80>)
 8000eaa:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <MX_ETH_Init+0x90>)
 8000eac:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_ETH_Init+0x80>)
 8000eb0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000eb4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000eb6:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <MX_ETH_Init+0x80>)
 8000eb8:	f003 ffae 	bl	8004e18 <HAL_ETH_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000ec2:	f000 ff19 	bl	8001cf8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ec6:	2238      	movs	r2, #56	; 0x38
 8000ec8:	2100      	movs	r1, #0
 8000eca:	480c      	ldr	r0, [pc, #48]	; (8000efc <MX_ETH_Init+0x94>)
 8000ecc:	f00d fd4a 	bl	800e964 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <MX_ETH_Init+0x94>)
 8000ed2:	2221      	movs	r2, #33	; 0x21
 8000ed4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_ETH_Init+0x94>)
 8000ed8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000edc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <MX_ETH_Init+0x94>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	240002dc 	.word	0x240002dc
 8000eec:	40028000 	.word	0x40028000
 8000ef0:	24000dac 	.word	0x24000dac
 8000ef4:	240000fc 	.word	0x240000fc
 8000ef8:	2400009c 	.word	0x2400009c
 8000efc:	24000178 	.word	0x24000178

08000f00 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f04:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f06:	4a2f      	ldr	r2, [pc, #188]	; (8000fc4 <MX_FDCAN1_Init+0xc4>)
 8000f08:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f10:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f16:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f1c:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f22:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000f28:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f2a:	2210      	movs	r2, #16
 8000f2c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f2e:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000f34:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f40:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000f52:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f72:	2204      	movs	r2, #4
 8000f74:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f7e:	2204      	movs	r2, #4
 8000f80:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000fa8:	2204      	movs	r2, #4
 8000faa:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000fae:	f004 fb57 	bl	8005660 <HAL_FDCAN_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000fb8:	f000 fe9e 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2400038c 	.word	0x2400038c
 8000fc4:	4000a000 	.word	0x4000a000

08000fc8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000fcc:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8000fce:	4a2f      	ldr	r2, [pc, #188]	; (800108c <MX_FDCAN2_Init+0xc4>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000fde:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000fe4:	4b28      	ldr	r3, [pc, #160]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000fea:	4b27      	ldr	r3, [pc, #156]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000ff0:	4b25      	ldr	r3, [pc, #148]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8000ff2:	2210      	movs	r2, #16
 8000ff4:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000ff6:	4b24      	ldr	r3, [pc, #144]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8000ffe:	2202      	movs	r2, #2
 8001000:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001004:	2202      	movs	r2, #2
 8001006:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 800100a:	2201      	movs	r2, #1
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800100e:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001010:	2201      	movs	r2, #1
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001014:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001016:	2201      	movs	r2, #1
 8001018:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800101a:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 800101c:	2201      	movs	r2, #1
 800101e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001022:	2200      	movs	r2, #0
 8001024:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001028:	2200      	movs	r2, #0
 800102a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 800102e:	2200      	movs	r2, #0
 8001030:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001034:	2200      	movs	r2, #0
 8001036:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 800103a:	2204      	movs	r2, #4
 800103c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001040:	2200      	movs	r2, #0
 8001042:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001046:	2204      	movs	r2, #4
 8001048:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 800104c:	2200      	movs	r2, #0
 800104e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001052:	2204      	movs	r2, #4
 8001054:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001058:	2200      	movs	r2, #0
 800105a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 800105e:	2200      	movs	r2, #0
 8001060:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001064:	2200      	movs	r2, #0
 8001066:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 800106a:	2200      	movs	r2, #0
 800106c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001070:	2204      	movs	r2, #4
 8001072:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001076:	f004 faf3 	bl	8005660 <HAL_FDCAN_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8001080:	f000 fe3a 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2400042c 	.word	0x2400042c
 800108c:	4000a400 	.word	0x4000a400

08001090 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b09a      	sub	sp, #104	; 0x68
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001096:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800109a:	2234      	movs	r2, #52	; 0x34
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f00d fc60 	bl	800e964 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80010a4:	463b      	mov	r3, r7
 80010a6:	2234      	movs	r2, #52	; 0x34
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f00d fc5a 	bl	800e964 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80010b0:	4b4e      	ldr	r3, [pc, #312]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010b2:	4a4f      	ldr	r2, [pc, #316]	; (80011f0 <MX_LTDC_Init+0x160>)
 80010b4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80010b6:	4b4d      	ldr	r3, [pc, #308]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80010bc:	4b4b      	ldr	r3, [pc, #300]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80010c2:	4b4a      	ldr	r3, [pc, #296]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80010c8:	4b48      	ldr	r3, [pc, #288]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80010ce:	4b47      	ldr	r3, [pc, #284]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010d0:	2207      	movs	r2, #7
 80010d2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80010d4:	4b45      	ldr	r3, [pc, #276]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010d6:	2203      	movs	r2, #3
 80010d8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80010da:	4b44      	ldr	r3, [pc, #272]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010dc:	220e      	movs	r2, #14
 80010de:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80010e0:	4b42      	ldr	r3, [pc, #264]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010e2:	2205      	movs	r2, #5
 80010e4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80010e6:	4b41      	ldr	r3, [pc, #260]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010e8:	f240 228e 	movw	r2, #654	; 0x28e
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80010ee:	4b3f      	ldr	r3, [pc, #252]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010f0:	f240 12e5 	movw	r2, #485	; 0x1e5
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80010f6:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010f8:	f44f 7225 	mov.w	r2, #660	; 0x294
 80010fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80010fe:	4b3b      	ldr	r3, [pc, #236]	; (80011ec <MX_LTDC_Init+0x15c>)
 8001100:	f240 12e7 	movw	r2, #487	; 0x1e7
 8001104:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001106:	4b39      	ldr	r3, [pc, #228]	; (80011ec <MX_LTDC_Init+0x15c>)
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800110e:	4b37      	ldr	r3, [pc, #220]	; (80011ec <MX_LTDC_Init+0x15c>)
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001116:	4b35      	ldr	r3, [pc, #212]	; (80011ec <MX_LTDC_Init+0x15c>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800111e:	4833      	ldr	r0, [pc, #204]	; (80011ec <MX_LTDC_Init+0x15c>)
 8001120:	f004 ffcc 	bl	80060bc <HAL_LTDC_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800112a:	f000 fde5 	bl	8001cf8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800113e:	2300      	movs	r3, #0
 8001140:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800114a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800114e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001150:	2305      	movs	r3, #5
 8001152:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001172:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001176:	2200      	movs	r2, #0
 8001178:	4619      	mov	r1, r3
 800117a:	481c      	ldr	r0, [pc, #112]	; (80011ec <MX_LTDC_Init+0x15c>)
 800117c:	f005 f86e 	bl	800625c <HAL_LTDC_ConfigLayer>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001186:	f000 fdb7 	bl	8001cf8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80011a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011aa:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80011ac:	2305      	movs	r3, #5
 80011ae:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80011ce:	463b      	mov	r3, r7
 80011d0:	2201      	movs	r2, #1
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_LTDC_Init+0x15c>)
 80011d6:	f005 f841 	bl	800625c <HAL_LTDC_ConfigLayer>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80011e0:	f000 fd8a 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	3768      	adds	r7, #104	; 0x68
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	240004cc 	.word	0x240004cc
 80011f0:	50001000 	.word	0x50001000

080011f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001208:	2300      	movs	r3, #0
 800120a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <MX_RTC_Init+0xb0>)
 800120e:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <MX_RTC_Init+0xb4>)
 8001210:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <MX_RTC_Init+0xb0>)
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001218:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <MX_RTC_Init+0xb0>)
 800121a:	227f      	movs	r2, #127	; 0x7f
 800121c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <MX_RTC_Init+0xb0>)
 8001220:	22ff      	movs	r2, #255	; 0xff
 8001222:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_RTC_Init+0xb0>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800122a:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <MX_RTC_Init+0xb0>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001230:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_RTC_Init+0xb0>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <MX_RTC_Init+0xb0>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800123c:	4819      	ldr	r0, [pc, #100]	; (80012a4 <MX_RTC_Init+0xb0>)
 800123e:	f009 f85b 	bl	800a2f8 <HAL_RTC_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001248:	f000 fd56 	bl	8001cf8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	2200      	movs	r2, #0
 8001264:	4619      	mov	r1, r3
 8001266:	480f      	ldr	r0, [pc, #60]	; (80012a4 <MX_RTC_Init+0xb0>)
 8001268:	f009 f8c8 	bl	800a3fc <HAL_RTC_SetTime>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001272:	f000 fd41 	bl	8001cf8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001276:	2301      	movs	r3, #1
 8001278:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800127a:	2301      	movs	r3, #1
 800127c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 800127e:	2301      	movs	r3, #1
 8001280:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	2200      	movs	r2, #0
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_RTC_Init+0xb0>)
 800128e:	f009 f9af 	bl	800a5f0 <HAL_RTC_SetDate>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001298:	f000 fd2e 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	24000574 	.word	0x24000574
 80012a8:	58004000 	.word	0x58004000

080012ac <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80012b0:	4b58      	ldr	r3, [pc, #352]	; (8001414 <MX_SAI2_Init+0x168>)
 80012b2:	4a59      	ldr	r2, [pc, #356]	; (8001418 <MX_SAI2_Init+0x16c>)
 80012b4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80012b6:	4b57      	ldr	r3, [pc, #348]	; (8001414 <MX_SAI2_Init+0x168>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80012bc:	4b55      	ldr	r3, [pc, #340]	; (8001414 <MX_SAI2_Init+0x168>)
 80012be:	2200      	movs	r2, #0
 80012c0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80012c2:	4b54      	ldr	r3, [pc, #336]	; (8001414 <MX_SAI2_Init+0x168>)
 80012c4:	2240      	movs	r2, #64	; 0x40
 80012c6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80012c8:	4b52      	ldr	r3, [pc, #328]	; (8001414 <MX_SAI2_Init+0x168>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80012ce:	4b51      	ldr	r3, [pc, #324]	; (8001414 <MX_SAI2_Init+0x168>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80012d4:	4b4f      	ldr	r3, [pc, #316]	; (8001414 <MX_SAI2_Init+0x168>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80012da:	4b4e      	ldr	r3, [pc, #312]	; (8001414 <MX_SAI2_Init+0x168>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80012e0:	4b4c      	ldr	r3, [pc, #304]	; (8001414 <MX_SAI2_Init+0x168>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80012e6:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <MX_SAI2_Init+0x168>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80012ec:	4b49      	ldr	r3, [pc, #292]	; (8001414 <MX_SAI2_Init+0x168>)
 80012ee:	4a4b      	ldr	r2, [pc, #300]	; (800141c <MX_SAI2_Init+0x170>)
 80012f0:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80012f2:	4b48      	ldr	r3, [pc, #288]	; (8001414 <MX_SAI2_Init+0x168>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80012f8:	4b46      	ldr	r3, [pc, #280]	; (8001414 <MX_SAI2_Init+0x168>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80012fe:	4b45      	ldr	r3, [pc, #276]	; (8001414 <MX_SAI2_Init+0x168>)
 8001300:	2200      	movs	r2, #0
 8001302:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001304:	4b43      	ldr	r3, [pc, #268]	; (8001414 <MX_SAI2_Init+0x168>)
 8001306:	2200      	movs	r2, #0
 8001308:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 800130a:	4b42      	ldr	r3, [pc, #264]	; (8001414 <MX_SAI2_Init+0x168>)
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8001312:	4b40      	ldr	r3, [pc, #256]	; (8001414 <MX_SAI2_Init+0x168>)
 8001314:	2201      	movs	r2, #1
 8001316:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001318:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <MX_SAI2_Init+0x168>)
 800131a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800131e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001320:	4b3c      	ldr	r3, [pc, #240]	; (8001414 <MX_SAI2_Init+0x168>)
 8001322:	2208      	movs	r2, #8
 8001324:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001326:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <MX_SAI2_Init+0x168>)
 8001328:	2201      	movs	r2, #1
 800132a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800132c:	4b39      	ldr	r3, [pc, #228]	; (8001414 <MX_SAI2_Init+0x168>)
 800132e:	2200      	movs	r2, #0
 8001330:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001332:	4b38      	ldr	r3, [pc, #224]	; (8001414 <MX_SAI2_Init+0x168>)
 8001334:	2200      	movs	r2, #0
 8001336:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001338:	4b36      	ldr	r3, [pc, #216]	; (8001414 <MX_SAI2_Init+0x168>)
 800133a:	2200      	movs	r2, #0
 800133c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800133e:	4b35      	ldr	r3, [pc, #212]	; (8001414 <MX_SAI2_Init+0x168>)
 8001340:	2200      	movs	r2, #0
 8001342:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001344:	4b33      	ldr	r3, [pc, #204]	; (8001414 <MX_SAI2_Init+0x168>)
 8001346:	2200      	movs	r2, #0
 8001348:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800134a:	4b32      	ldr	r3, [pc, #200]	; (8001414 <MX_SAI2_Init+0x168>)
 800134c:	2201      	movs	r2, #1
 800134e:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001350:	4b30      	ldr	r3, [pc, #192]	; (8001414 <MX_SAI2_Init+0x168>)
 8001352:	2200      	movs	r2, #0
 8001354:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001356:	482f      	ldr	r0, [pc, #188]	; (8001414 <MX_SAI2_Init+0x168>)
 8001358:	f009 faf0 	bl	800a93c <HAL_SAI_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 8001362:	f000 fcc9 	bl	8001cf8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001366:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <MX_SAI2_Init+0x174>)
 8001368:	4a2e      	ldr	r2, [pc, #184]	; (8001424 <MX_SAI2_Init+0x178>)
 800136a:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800136c:	4b2c      	ldr	r3, [pc, #176]	; (8001420 <MX_SAI2_Init+0x174>)
 800136e:	2200      	movs	r2, #0
 8001370:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <MX_SAI2_Init+0x174>)
 8001374:	2203      	movs	r2, #3
 8001376:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001378:	4b29      	ldr	r3, [pc, #164]	; (8001420 <MX_SAI2_Init+0x174>)
 800137a:	2240      	movs	r2, #64	; 0x40
 800137c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800137e:	4b28      	ldr	r3, [pc, #160]	; (8001420 <MX_SAI2_Init+0x174>)
 8001380:	2200      	movs	r2, #0
 8001382:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001384:	4b26      	ldr	r3, [pc, #152]	; (8001420 <MX_SAI2_Init+0x174>)
 8001386:	2200      	movs	r2, #0
 8001388:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800138a:	4b25      	ldr	r3, [pc, #148]	; (8001420 <MX_SAI2_Init+0x174>)
 800138c:	2201      	movs	r2, #1
 800138e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001390:	4b23      	ldr	r3, [pc, #140]	; (8001420 <MX_SAI2_Init+0x174>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001396:	4b22      	ldr	r3, [pc, #136]	; (8001420 <MX_SAI2_Init+0x174>)
 8001398:	2200      	movs	r2, #0
 800139a:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <MX_SAI2_Init+0x174>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <MX_SAI2_Init+0x174>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <MX_SAI2_Init+0x174>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <MX_SAI2_Init+0x174>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_SAI2_Init+0x174>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <MX_SAI2_Init+0x174>)
 80013be:	2201      	movs	r2, #1
 80013c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <MX_SAI2_Init+0x174>)
 80013c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c8:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <MX_SAI2_Init+0x174>)
 80013cc:	2208      	movs	r2, #8
 80013ce:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <MX_SAI2_Init+0x174>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <MX_SAI2_Init+0x174>)
 80013d8:	2200      	movs	r2, #0
 80013da:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80013dc:	4b10      	ldr	r3, [pc, #64]	; (8001420 <MX_SAI2_Init+0x174>)
 80013de:	2200      	movs	r2, #0
 80013e0:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_SAI2_Init+0x174>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <MX_SAI2_Init+0x174>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_SAI2_Init+0x174>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <MX_SAI2_Init+0x174>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_SAI2_Init+0x174>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001400:	4807      	ldr	r0, [pc, #28]	; (8001420 <MX_SAI2_Init+0x174>)
 8001402:	f009 fa9b 	bl	800a93c <HAL_SAI_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 800140c:	f000 fc74 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	24000598 	.word	0x24000598
 8001418:	40015c04 	.word	0x40015c04
 800141c:	0002ee00 	.word	0x0002ee00
 8001420:	24000630 	.word	0x24000630
 8001424:	40015c24 	.word	0x40015c24

08001428 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800142c:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <MX_SPI2_Init+0xa0>)
 800142e:	4a27      	ldr	r2, [pc, #156]	; (80014cc <MX_SPI2_Init+0xa4>)
 8001430:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001432:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001434:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001438:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800143a:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <MX_SPI2_Init+0xa0>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001442:	2203      	movs	r2, #3
 8001444:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <MX_SPI2_Init+0xa0>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <MX_SPI2_Init+0xa0>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001466:	2200      	movs	r2, #0
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800146a:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <MX_SPI2_Init+0xa0>)
 800146c:	2200      	movs	r2, #0
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001472:	2200      	movs	r2, #0
 8001474:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800147c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001480:	2200      	movs	r2, #0
 8001482:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001486:	2200      	movs	r2, #0
 8001488:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_SPI2_Init+0xa0>)
 800148c:	2200      	movs	r2, #0
 800148e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001492:	2200      	movs	r2, #0
 8001494:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001498:	2200      	movs	r2, #0
 800149a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <MX_SPI2_Init+0xa0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_SPI2_Init+0xa0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <MX_SPI2_Init+0xa0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_SPI2_Init+0xa0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <MX_SPI2_Init+0xa0>)
 80014b6:	f009 fd61 	bl	800af7c <HAL_SPI_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 80014c0:	f000 fc1a 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	240006c8 	.word	0x240006c8
 80014cc:	40003800 	.word	0x40003800

080014d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <MX_TIM3_Init+0x9c>)
 80014f0:	4a1f      	ldr	r2, [pc, #124]	; (8001570 <MX_TIM3_Init+0xa0>)
 80014f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <MX_TIM3_Init+0x9c>)
 80014f6:	223f      	movs	r2, #63	; 0x3f
 80014f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <MX_TIM3_Init+0x9c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_TIM3_Init+0x9c>)
 8001502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001506:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <MX_TIM3_Init+0x9c>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_TIM3_Init+0x9c>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001514:	4815      	ldr	r0, [pc, #84]	; (800156c <MX_TIM3_Init+0x9c>)
 8001516:	f009 fe70 	bl	800b1fa <HAL_TIM_Base_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001520:	f000 fbea 	bl	8001cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001528:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	4619      	mov	r1, r3
 8001530:	480e      	ldr	r0, [pc, #56]	; (800156c <MX_TIM3_Init+0x9c>)
 8001532:	f009 ff29 	bl	800b388 <HAL_TIM_ConfigClockSource>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800153c:	f000 fbdc 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	4619      	mov	r1, r3
 800154c:	4807      	ldr	r0, [pc, #28]	; (800156c <MX_TIM3_Init+0x9c>)
 800154e:	f00a f94b 	bl	800b7e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001558:	f000 fbce 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3);
 800155c:	4803      	ldr	r0, [pc, #12]	; (800156c <MX_TIM3_Init+0x9c>)
 800155e:	f009 fea3 	bl	800b2a8 <HAL_TIM_Base_Start>

  /* USER CODE END TIM3_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	24000750 	.word	0x24000750
 8001570:	40000400 	.word	0x40000400

08001574 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001578:	4b22      	ldr	r3, [pc, #136]	; (8001604 <MX_USART3_UART_Init+0x90>)
 800157a:	4a23      	ldr	r2, [pc, #140]	; (8001608 <MX_USART3_UART_Init+0x94>)
 800157c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800157e:	4b21      	ldr	r3, [pc, #132]	; (8001604 <MX_USART3_UART_Init+0x90>)
 8001580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001584:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <MX_USART3_UART_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <MX_USART3_UART_Init+0x90>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <MX_USART3_UART_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <MX_USART3_UART_Init+0x90>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b19      	ldr	r3, [pc, #100]	; (8001604 <MX_USART3_UART_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b17      	ldr	r3, [pc, #92]	; (8001604 <MX_USART3_UART_Init+0x90>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015aa:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_USART3_UART_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_USART3_UART_Init+0x90>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <MX_USART3_UART_Init+0x90>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015bc:	4811      	ldr	r0, [pc, #68]	; (8001604 <MX_USART3_UART_Init+0x90>)
 80015be:	f00a f9a1 	bl	800b904 <HAL_UART_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80015c8:	f000 fb96 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015cc:	2100      	movs	r1, #0
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <MX_USART3_UART_Init+0x90>)
 80015d0:	f00c fcf5 	bl	800dfbe <HAL_UARTEx_SetTxFifoThreshold>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80015da:	f000 fb8d 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015de:	2100      	movs	r1, #0
 80015e0:	4808      	ldr	r0, [pc, #32]	; (8001604 <MX_USART3_UART_Init+0x90>)
 80015e2:	f00c fd2a 	bl	800e03a <HAL_UARTEx_SetRxFifoThreshold>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80015ec:	f000 fb84 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_USART3_UART_Init+0x90>)
 80015f2:	f00c fcab 	bl	800df4c <HAL_UARTEx_DisableFifoMode>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80015fc:	f000 fb7c 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2400079c 	.word	0x2400079c
 8001608:	40004800 	.word	0x40004800

0800160c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001612:	4a16      	ldr	r2, [pc, #88]	; (800166c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001614:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001618:	2209      	movs	r2, #9
 800161a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800161e:	2202      	movs	r2, #2
 8001620:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001624:	2200      	movs	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800162a:	2202      	movs	r2, #2
 800162c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001630:	2200      	movs	r2, #0
 8001632:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001636:	2200      	movs	r2, #0
 8001638:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800163c:	2200      	movs	r2, #0
 800163e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001642:	2201      	movs	r2, #1
 8001644:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001648:	2201      	movs	r2, #1
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800164e:	2200      	movs	r2, #0
 8001650:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001654:	f004 ffda 	bl	800660c <HAL_PCD_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800165e:	f000 fb4b 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	24000830 	.word	0x24000830
 800166c:	40080000 	.word	0x40080000

08001670 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
 8001684:	615a      	str	r2, [r3, #20]
 8001686:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <MX_FMC_Init+0x94>)
 800168a:	4a1f      	ldr	r2, [pc, #124]	; (8001708 <MX_FMC_Init+0x98>)
 800168c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <MX_FMC_Init+0x94>)
 8001690:	2201      	movs	r2, #1
 8001692:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <MX_FMC_Init+0x94>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <MX_FMC_Init+0x94>)
 800169c:	2204      	movs	r2, #4
 800169e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <MX_FMC_Init+0x94>)
 80016a2:	2210      	movs	r2, #16
 80016a4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <MX_FMC_Init+0x94>)
 80016a8:	2240      	movs	r2, #64	; 0x40
 80016aa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <MX_FMC_Init+0x94>)
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80016b2:	4b14      	ldr	r3, [pc, #80]	; (8001704 <MX_FMC_Init+0x94>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <MX_FMC_Init+0x94>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_FMC_Init+0x94>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <MX_FMC_Init+0x94>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80016ca:	2310      	movs	r3, #16
 80016cc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80016ce:	2310      	movs	r3, #16
 80016d0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80016d2:	2310      	movs	r3, #16
 80016d4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80016d6:	2310      	movs	r3, #16
 80016d8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80016da:	2310      	movs	r3, #16
 80016dc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80016de:	2310      	movs	r3, #16
 80016e0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80016e2:	2310      	movs	r3, #16
 80016e4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	4806      	ldr	r0, [pc, #24]	; (8001704 <MX_FMC_Init+0x94>)
 80016ec:	f009 fc0a 	bl	800af04 <HAL_SDRAM_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80016f6:	f000 faff 	bl	8001cf8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80016fa:	bf00      	nop
 80016fc:	3720      	adds	r7, #32
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	24000d3c 	.word	0x24000d3c
 8001708:	52004140 	.word	0x52004140

0800170c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b090      	sub	sp, #64	; 0x40
 8001710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001722:	4bc0      	ldr	r3, [pc, #768]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001728:	4abe      	ldr	r2, [pc, #760]	; (8001a24 <MX_GPIO_Init+0x318>)
 800172a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001732:	4bbc      	ldr	r3, [pc, #752]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
 800173e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001740:	4bb8      	ldr	r3, [pc, #736]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001746:	4ab7      	ldr	r2, [pc, #732]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001750:	4bb4      	ldr	r3, [pc, #720]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800175e:	4bb1      	ldr	r3, [pc, #708]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001764:	4aaf      	ldr	r2, [pc, #700]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800176a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800176e:	4bad      	ldr	r3, [pc, #692]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001778:	623b      	str	r3, [r7, #32]
 800177a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800177c:	4ba9      	ldr	r3, [pc, #676]	; (8001a24 <MX_GPIO_Init+0x318>)
 800177e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001782:	4aa8      	ldr	r2, [pc, #672]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001788:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800178c:	4ba5      	ldr	r3, [pc, #660]	; (8001a24 <MX_GPIO_Init+0x318>)
 800178e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	4ba2      	ldr	r3, [pc, #648]	; (8001a24 <MX_GPIO_Init+0x318>)
 800179c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a0:	4aa0      	ldr	r2, [pc, #640]	; (8001a24 <MX_GPIO_Init+0x318>)
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017aa:	4b9e      	ldr	r3, [pc, #632]	; (8001a24 <MX_GPIO_Init+0x318>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b8:	4b9a      	ldr	r3, [pc, #616]	; (8001a24 <MX_GPIO_Init+0x318>)
 80017ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017be:	4a99      	ldr	r2, [pc, #612]	; (8001a24 <MX_GPIO_Init+0x318>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017c8:	4b96      	ldr	r3, [pc, #600]	; (8001a24 <MX_GPIO_Init+0x318>)
 80017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017d6:	4b93      	ldr	r3, [pc, #588]	; (8001a24 <MX_GPIO_Init+0x318>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017dc:	4a91      	ldr	r2, [pc, #580]	; (8001a24 <MX_GPIO_Init+0x318>)
 80017de:	f043 0310 	orr.w	r3, r3, #16
 80017e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017e6:	4b8f      	ldr	r3, [pc, #572]	; (8001a24 <MX_GPIO_Init+0x318>)
 80017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017f4:	4b8b      	ldr	r3, [pc, #556]	; (8001a24 <MX_GPIO_Init+0x318>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fa:	4a8a      	ldr	r2, [pc, #552]	; (8001a24 <MX_GPIO_Init+0x318>)
 80017fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001800:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001804:	4b87      	ldr	r3, [pc, #540]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001812:	4b84      	ldr	r3, [pc, #528]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001818:	4a82      	ldr	r2, [pc, #520]	; (8001a24 <MX_GPIO_Init+0x318>)
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001822:	4b80      	ldr	r3, [pc, #512]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001830:	4b7c      	ldr	r3, [pc, #496]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001836:	4a7b      	ldr	r2, [pc, #492]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001840:	4b78      	ldr	r3, [pc, #480]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800184e:	4b75      	ldr	r3, [pc, #468]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001854:	4a73      	ldr	r2, [pc, #460]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001856:	f043 0320 	orr.w	r3, r3, #32
 800185a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800185e:	4b71      	ldr	r3, [pc, #452]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001864:	f003 0320 	and.w	r3, r3, #32
 8001868:	603b      	str	r3, [r7, #0]
 800186a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	f241 01c4 	movw	r1, #4292	; 0x10c4
 8001872:	486d      	ldr	r0, [pc, #436]	; (8001a28 <MX_GPIO_Init+0x31c>)
 8001874:	f004 fc08 	bl	8006088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_6, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800187e:	486b      	ldr	r0, [pc, #428]	; (8001a2c <MX_GPIO_Init+0x320>)
 8001880:	f004 fc02 	bl	8006088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800188a:	4869      	ldr	r0, [pc, #420]	; (8001a30 <MX_GPIO_Init+0x324>)
 800188c:	f004 fbfc 	bl	8006088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	2108      	movs	r1, #8
 8001894:	4867      	ldr	r0, [pc, #412]	; (8001a34 <MX_GPIO_Init+0x328>)
 8001896:	f004 fbf7 	bl	8006088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_1, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	2102      	movs	r1, #2
 800189e:	4866      	ldr	r0, [pc, #408]	; (8001a38 <MX_GPIO_Init+0x32c>)
 80018a0:	f004 fbf2 	bl	8006088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2104      	movs	r1, #4
 80018a8:	4864      	ldr	r0, [pc, #400]	; (8001a3c <MX_GPIO_Init+0x330>)
 80018aa:	f004 fbed 	bl	8006088 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB6 PB7 MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 80018ae:	f241 03c4 	movw	r3, #4292	; 0x10c4
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c4:	4619      	mov	r1, r3
 80018c6:	4858      	ldr	r0, [pc, #352]	; (8001a28 <MX_GPIO_Init+0x31c>)
 80018c8:	f004 fa2e 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80018de:	2303      	movs	r3, #3
 80018e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e6:	4619      	mov	r1, r3
 80018e8:	4855      	ldr	r0, [pc, #340]	; (8001a40 <MX_GPIO_Init+0x334>)
 80018ea:	f004 fa1d 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f2:	2300      	movs	r3, #0
 80018f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fe:	4619      	mov	r1, r3
 8001900:	4850      	ldr	r0, [pc, #320]	; (8001a44 <MX_GPIO_Init+0x338>)
 8001902:	f004 fa11 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001906:	2330      	movs	r3, #48	; 0x30
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001916:	230a      	movs	r3, #10
 8001918:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800191a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800191e:	4619      	mov	r1, r3
 8001920:	4849      	ldr	r0, [pc, #292]	; (8001a48 <MX_GPIO_Init+0x33c>)
 8001922:	f004 fa01 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 8001926:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192c:	2300      	movs	r3, #0
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001938:	4619      	mov	r1, r3
 800193a:	483c      	ldr	r0, [pc, #240]	; (8001a2c <MX_GPIO_Init+0x320>)
 800193c:	f004 f9f4 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001946:	2300      	movs	r3, #0
 8001948:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001952:	4619      	mov	r1, r3
 8001954:	483d      	ldr	r0, [pc, #244]	; (8001a4c <MX_GPIO_Init+0x340>)
 8001956:	f004 f9e7 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_6;
 800195a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001970:	4619      	mov	r1, r3
 8001972:	482e      	ldr	r0, [pc, #184]	; (8001a2c <MX_GPIO_Init+0x320>)
 8001974:	f004 f9d8 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001988:	2306      	movs	r3, #6
 800198a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001990:	4619      	mov	r1, r3
 8001992:	4828      	ldr	r0, [pc, #160]	; (8001a34 <MX_GPIO_Init+0x328>)
 8001994:	f004 f9c8 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2301      	movs	r3, #1
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ae:	4619      	mov	r1, r3
 80019b0:	481f      	ldr	r0, [pc, #124]	; (8001a30 <MX_GPIO_Init+0x324>)
 80019b2:	f004 f9b9 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019b6:	2308      	movs	r3, #8
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ca:	4619      	mov	r1, r3
 80019cc:	4819      	ldr	r0, [pc, #100]	; (8001a34 <MX_GPIO_Init+0x328>)
 80019ce:	f004 f9ab 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80019d2:	2304      	movs	r3, #4
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e4:	4619      	mov	r1, r3
 80019e6:	4813      	ldr	r0, [pc, #76]	; (8001a34 <MX_GPIO_Init+0x328>)
 80019e8:	f004 f99e 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80019ec:	2301      	movs	r3, #1
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f0:	2300      	movs	r3, #0
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fc:	4619      	mov	r1, r3
 80019fe:	480e      	ldr	r0, [pc, #56]	; (8001a38 <MX_GPIO_Init+0x32c>)
 8001a00:	f004 f992 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a04:	2302      	movs	r3, #2
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4807      	ldr	r0, [pc, #28]	; (8001a38 <MX_GPIO_Init+0x32c>)
 8001a1c:	f004 f984 	bl	8005d28 <HAL_GPIO_Init>
 8001a20:	e016      	b.n	8001a50 <MX_GPIO_Init+0x344>
 8001a22:	bf00      	nop
 8001a24:	58024400 	.word	0x58024400
 8001a28:	58020400 	.word	0x58020400
 8001a2c:	58020000 	.word	0x58020000
 8001a30:	58022000 	.word	0x58022000
 8001a34:	58021800 	.word	0x58021800
 8001a38:	58022800 	.word	0x58022800
 8001a3c:	58022400 	.word	0x58022400
 8001a40:	58021c00 	.word	0x58021c00
 8001a44:	58020c00 	.word	0x58020c00
 8001a48:	58021000 	.word	0x58021000
 8001a4c:	58020800 	.word	0x58020800

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001a50:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a62:	2309      	movs	r3, #9
 8001a64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4822      	ldr	r0, [pc, #136]	; (8001af8 <MX_GPIO_Init+0x3ec>)
 8001a6e:	f004 f95b 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a84:	230a      	movs	r3, #10
 8001a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	481a      	ldr	r0, [pc, #104]	; (8001af8 <MX_GPIO_Init+0x3ec>)
 8001a90:	f004 f94a 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 8001a94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4814      	ldr	r0, [pc, #80]	; (8001afc <MX_GPIO_Init+0x3f0>)
 8001aac:	f004 f93c 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ab0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ac2:	2309      	movs	r3, #9
 8001ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aca:	4619      	mov	r1, r3
 8001acc:	480c      	ldr	r0, [pc, #48]	; (8001b00 <MX_GPIO_Init+0x3f4>)
 8001ace:	f004 f92b 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001ae2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4806      	ldr	r0, [pc, #24]	; (8001b04 <MX_GPIO_Init+0x3f8>)
 8001aea:	f004 f91d 	bl	8005d28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aee:	bf00      	nop
 8001af0:	3740      	adds	r7, #64	; 0x40
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	58021400 	.word	0x58021400
 8001afc:	58021c00 	.word	0x58021c00
 8001b00:	58020c00 	.word	0x58020c00
 8001b04:	58022400 	.word	0x58022400

08001b08 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

	if (huart == &huart3) {
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a06      	ldr	r2, [pc, #24]	; (8001b2c <HAL_UART_RxCpltCallback+0x24>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d102      	bne.n	8001b1e <HAL_UART_RxCpltCallback+0x16>
		haveReceived = true;
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_UART_RxCpltCallback+0x28>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
	}

}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	2400079c 	.word	0x2400079c
 8001b30:	24000d70 	.word	0x24000d70

08001b34 <printWelcomeText>:

bool printWelcomeText(void) {
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0

	for (int i = 0; i<WELCOME_STRINGS; i++) {
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	e01a      	b.n	8001b76 <printWelcomeText+0x42>
		if (HAL_UART_Transmit(&huart3, (const uint8_t *) welcomeStrings[i], strlen(welcomeStrings[i]), 6000) != HAL_OK) {
 8001b40:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <printWelcomeText+0x54>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001b48:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <printWelcomeText+0x54>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fbc5 	bl	80002e0 <strlen>
 8001b56:	4603      	mov	r3, r0
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	f241 7370 	movw	r3, #6000	; 0x1770
 8001b5e:	4621      	mov	r1, r4
 8001b60:	480a      	ldr	r0, [pc, #40]	; (8001b8c <printWelcomeText+0x58>)
 8001b62:	f009 ff1f 	bl	800b9a4 <HAL_UART_Transmit>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <printWelcomeText+0x3c>
			return false;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	e006      	b.n	8001b7e <printWelcomeText+0x4a>
	for (int i = 0; i<WELCOME_STRINGS; i++) {
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3301      	adds	r3, #1
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b09      	cmp	r3, #9
 8001b7a:	dde1      	ble.n	8001b40 <printWelcomeText+0xc>
		}
	}
	return true;
 8001b7c:	2301      	movs	r3, #1

}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd90      	pop	{r4, r7, pc}
 8001b86:	bf00      	nop
 8001b88:	24000000 	.word	0x24000000
 8001b8c:	2400079c 	.word	0x2400079c

08001b90 <receiveValue>:

bool receiveValue(int bytesToReceive) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

	if (HAL_UART_Receive_IT(&huart3, rxBuffer, bytesToReceive) != HAL_OK) {
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4907      	ldr	r1, [pc, #28]	; (8001bbc <receiveValue+0x2c>)
 8001ba0:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <receiveValue+0x30>)
 8001ba2:	f009 ff8d 	bl	800bac0 <HAL_UART_Receive_IT>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <receiveValue+0x20>
		return false;
 8001bac:	2300      	movs	r3, #0
 8001bae:	e000      	b.n	8001bb2 <receiveValue+0x22>
	}
	return true;
 8001bb0:	2301      	movs	r3, #1

}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	24000d74 	.word	0x24000d74
 8001bc0:	2400079c 	.word	0x2400079c

08001bc4 <typeToLCD>:

void typeToLCD(void) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart3, rxBuffer, RX_BUFFER_SIZE);
 8001bc8:	2220      	movs	r2, #32
 8001bca:	4905      	ldr	r1, [pc, #20]	; (8001be0 <typeToLCD+0x1c>)
 8001bcc:	4805      	ldr	r0, [pc, #20]	; (8001be4 <typeToLCD+0x20>)
 8001bce:	f009 ff77 	bl	800bac0 <HAL_UART_Receive_IT>
	LCD_Clear();
 8001bd2:	f7fe fe3d 	bl	8000850 <LCD_Clear>
	LCD_Write(rxBuffer);
 8001bd6:	4802      	ldr	r0, [pc, #8]	; (8001be0 <typeToLCD+0x1c>)
 8001bd8:	f7fe fdfc 	bl	80007d4 <LCD_Write>

}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	24000d74 	.word	0x24000d74
 8001be4:	2400079c 	.word	0x2400079c

08001be8 <moveTextLCD>:

void moveTextLCD(void) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0

	if (!haveReceived) {
 8001bee:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <moveTextLCD+0x94>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	f083 0301 	eor.w	r3, r3, #1
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d13b      	bne.n	8001c74 <moveTextLCD+0x8c>
		return;
	}
	HAL_Delay(1000);
 8001bfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c00:	f001 f9ae 	bl	8002f60 <HAL_Delay>
	LCD_Write(rxBuffer);
 8001c04:	481e      	ldr	r0, [pc, #120]	; (8001c80 <moveTextLCD+0x98>)
 8001c06:	f7fe fde5 	bl	80007d4 <LCD_Write>
	int i = 0, stringLength = strlen(rxBuffer);
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	481c      	ldr	r0, [pc, #112]	; (8001c80 <moveTextLCD+0x98>)
 8001c10:	f7fe fb66 	bl	80002e0 <strlen>
 8001c14:	4603      	mov	r3, r0
 8001c16:	607b      	str	r3, [r7, #4]
	bool edge = false;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	72fb      	strb	r3, [r7, #11]
	while (1) {
		if (i < (16 - stringLength) && !edge) {
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f1c3 0310 	rsb	r3, r3, #16
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	da13      	bge.n	8001c50 <moveTextLCD+0x68>
 8001c28:	7afb      	ldrb	r3, [r7, #11]
 8001c2a:	f083 0301 	eor.w	r3, r3, #1
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00d      	beq.n	8001c50 <moveTextLCD+0x68>
			LCD_Scroll_Display_Right();
 8001c34:	f7fe fe13 	bl	800085e <LCD_Scroll_Display_Right>
			i++;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	60fb      	str	r3, [r7, #12]
			if (i == (16 - stringLength)) {
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f1c3 0310 	rsb	r3, r3, #16
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d10f      	bne.n	8001c6a <moveTextLCD+0x82>
				edge = true;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	72fb      	strb	r3, [r7, #11]
			if (i == (16 - stringLength)) {
 8001c4e:	e00c      	b.n	8001c6a <moveTextLCD+0x82>
			}
		} else if (edge) {
 8001c50:	7afb      	ldrb	r3, [r7, #11]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d009      	beq.n	8001c6a <moveTextLCD+0x82>
			LCD_Scroll_Display_Left();
 8001c56:	f7fe fe09 	bl	800086c <LCD_Scroll_Display_Left>
			i--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
			if (i == 0) {
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <moveTextLCD+0x82>
				edge = false;
 8001c66:	2300      	movs	r3, #0
 8001c68:	72fb      	strb	r3, [r7, #11]
			}
		}
		HAL_Delay(1000);
 8001c6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c6e:	f001 f977 	bl	8002f60 <HAL_Delay>
		if (i < (16 - stringLength) && !edge) {
 8001c72:	e7d3      	b.n	8001c1c <moveTextLCD+0x34>
		return;
 8001c74:	bf00      	nop
	}

}
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	24000d70 	.word	0x24000d70
 8001c80:	24000d74 	.word	0x24000d74

08001c84 <displayClock>:

void displayClock() {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af02      	add	r7, sp, #8

	uint8_t seconds, minutes, hours;
	char timeString[9];

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	4916      	ldr	r1, [pc, #88]	; (8001ce8 <displayClock+0x64>)
 8001c8e:	4817      	ldr	r0, [pc, #92]	; (8001cec <displayClock+0x68>)
 8001c90:	f008 fc52 	bl	800a538 <HAL_RTC_GetTime>
	seconds = sTime.Seconds;
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <displayClock+0x64>)
 8001c96:	789b      	ldrb	r3, [r3, #2]
 8001c98:	73fb      	strb	r3, [r7, #15]
	minutes = sTime.Minutes;
 8001c9a:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <displayClock+0x64>)
 8001c9c:	785b      	ldrb	r3, [r3, #1]
 8001c9e:	73bb      	strb	r3, [r7, #14]
	hours = sTime.Hours;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <displayClock+0x64>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	737b      	strb	r3, [r7, #13]
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	4911      	ldr	r1, [pc, #68]	; (8001cf0 <displayClock+0x6c>)
 8001caa:	4810      	ldr	r0, [pc, #64]	; (8001cec <displayClock+0x68>)
 8001cac:	f008 fd28 	bl	800a700 <HAL_RTC_GetDate>
	sprintf(timeString, "%02u:%02u:%02u", hours, minutes, seconds);
 8001cb0:	7b7a      	ldrb	r2, [r7, #13]
 8001cb2:	7bb9      	ldrb	r1, [r7, #14]
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	1d38      	adds	r0, r7, #4
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	490d      	ldr	r1, [pc, #52]	; (8001cf4 <displayClock+0x70>)
 8001cbe:	f00c fe59 	bl	800e974 <siprintf>

	HAL_Delay(100);
 8001cc2:	2064      	movs	r0, #100	; 0x64
 8001cc4:	f001 f94c 	bl	8002f60 <HAL_Delay>
	LCD_Pos_Cursor(0, 0);
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f7fe fd9b 	bl	8000806 <LCD_Pos_Cursor>
	HAL_Delay(100);
 8001cd0:	2064      	movs	r0, #100	; 0x64
 8001cd2:	f001 f945 	bl	8002f60 <HAL_Delay>
	LCD_Write(timeString);
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fd7b 	bl	80007d4 <LCD_Write>
	LCD_Pos_Cursor(0, 0);
	HAL_Delay(100);
	LCD_Write(timeString);
	*/

}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	24000d94 	.word	0x24000d94
 8001cec:	24000574 	.word	0x24000574
 8001cf0:	24000da8 	.word	0x24000da8
 8001cf4:	0800f328 	.word	0x0800f328

08001cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cfc:	b672      	cpsid	i
}
 8001cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <Error_Handler+0x8>
	...

08001d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_MspInit+0x30>)
 8001d0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d10:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <HAL_MspInit+0x30>)
 8001d12:	f043 0302 	orr.w	r3, r3, #2
 8001d16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_MspInit+0x30>)
 8001d1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	58024400 	.word	0x58024400

08001d38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b090      	sub	sp, #64	; 0x40
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a72      	ldr	r2, [pc, #456]	; (8001f20 <HAL_ADC_MspInit+0x1e8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d14e      	bne.n	8001df8 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d5a:	4b72      	ldr	r3, [pc, #456]	; (8001f24 <HAL_ADC_MspInit+0x1ec>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	4a70      	ldr	r2, [pc, #448]	; (8001f24 <HAL_ADC_MspInit+0x1ec>)
 8001d62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d64:	4b6f      	ldr	r3, [pc, #444]	; (8001f24 <HAL_ADC_MspInit+0x1ec>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d10e      	bne.n	8001d8a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d6c:	4b6e      	ldr	r3, [pc, #440]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001d6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d72:	4a6d      	ldr	r2, [pc, #436]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001d74:	f043 0320 	orr.w	r3, r3, #32
 8001d78:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d7c:	4b6a      	ldr	r3, [pc, #424]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001d7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d82:	f003 0320 	and.w	r3, r3, #32
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8a:	4b67      	ldr	r3, [pc, #412]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d90:	4a65      	ldr	r2, [pc, #404]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001d92:	f043 0304 	orr.w	r3, r3, #4
 8001d96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d9a:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da8:	4b5f      	ldr	r3, [pc, #380]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dae:	4a5e      	ldr	r2, [pc, #376]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db8:	4b5b      	ldr	r3, [pc, #364]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	623b      	str	r3, [r7, #32]
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4854      	ldr	r0, [pc, #336]	; (8001f2c <HAL_ADC_MspInit+0x1f4>)
 8001dda:	f003 ffa5 	bl	8005d28 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001dde:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001de2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001de6:	f001 f8ff 	bl	8002fe8 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001dea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dee:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001df2:	f001 f8f9 	bl	8002fe8 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001df6:	e08f      	b.n	8001f18 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a4c      	ldr	r2, [pc, #304]	; (8001f30 <HAL_ADC_MspInit+0x1f8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d133      	bne.n	8001e6a <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e02:	4b48      	ldr	r3, [pc, #288]	; (8001f24 <HAL_ADC_MspInit+0x1ec>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	3301      	adds	r3, #1
 8001e08:	4a46      	ldr	r2, [pc, #280]	; (8001f24 <HAL_ADC_MspInit+0x1ec>)
 8001e0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e0c:	4b45      	ldr	r3, [pc, #276]	; (8001f24 <HAL_ADC_MspInit+0x1ec>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d10e      	bne.n	8001e32 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e14:	4b44      	ldr	r3, [pc, #272]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001e16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e1a:	4a43      	ldr	r2, [pc, #268]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001e1c:	f043 0320 	orr.w	r3, r3, #32
 8001e20:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e24:	4b40      	ldr	r3, [pc, #256]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001e26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e2a:	f003 0320 	and.w	r3, r3, #32
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e38:	4a3b      	ldr	r2, [pc, #236]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e42:	4b39      	ldr	r3, [pc, #228]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	61bb      	str	r3, [r7, #24]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001e50:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001e54:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001e58:	f001 f8c6 	bl	8002fe8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001e5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e60:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001e64:	f001 f8c0 	bl	8002fe8 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001e68:	e056      	b.n	8001f18 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a31      	ldr	r2, [pc, #196]	; (8001f34 <HAL_ADC_MspInit+0x1fc>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d151      	bne.n	8001f18 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001e74:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7a:	4a2b      	ldr	r2, [pc, #172]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001e7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e84:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e92:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e98:	4a23      	ldr	r2, [pc, #140]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001e9a:	f043 0320 	orr.w	r3, r3, #32
 8001e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb6:	4a1c      	ldr	r2, [pc, #112]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001eb8:	f043 0304 	orr.w	r3, r3, #4
 8001ebc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_ADC_MspInit+0x1f0>)
 8001ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001edc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4815      	ldr	r0, [pc, #84]	; (8001f38 <HAL_ADC_MspInit+0x200>)
 8001ee4:	f003 ff20 	bl	8005d28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eec:	2303      	movs	r3, #3
 8001eee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef8:	4619      	mov	r1, r3
 8001efa:	480c      	ldr	r0, [pc, #48]	; (8001f2c <HAL_ADC_MspInit+0x1f4>)
 8001efc:	f003 ff14 	bl	8005d28 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001f00:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001f04:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001f08:	f001 f86e 	bl	8002fe8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001f0c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001f10:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001f14:	f001 f868 	bl	8002fe8 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001f18:	bf00      	nop
 8001f1a:	3740      	adds	r7, #64	; 0x40
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40022000 	.word	0x40022000
 8001f24:	24000db4 	.word	0x24000db4
 8001f28:	58024400 	.word	0x58024400
 8001f2c:	58020800 	.word	0x58020800
 8001f30:	40022100 	.word	0x40022100
 8001f34:	58026000 	.word	0x58026000
 8001f38:	58021400 	.word	0x58021400

08001f3c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b092      	sub	sp, #72	; 0x48
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a87      	ldr	r2, [pc, #540]	; (8002178 <HAL_ETH_MspInit+0x23c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	f040 8108 	bne.w	8002170 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001f60:	4b86      	ldr	r3, [pc, #536]	; (800217c <HAL_ETH_MspInit+0x240>)
 8001f62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f66:	4a85      	ldr	r2, [pc, #532]	; (800217c <HAL_ETH_MspInit+0x240>)
 8001f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f6c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f70:	4b82      	ldr	r3, [pc, #520]	; (800217c <HAL_ETH_MspInit+0x240>)
 8001f72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8001f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001f7e:	4b7f      	ldr	r3, [pc, #508]	; (800217c <HAL_ETH_MspInit+0x240>)
 8001f80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f84:	4a7d      	ldr	r2, [pc, #500]	; (800217c <HAL_ETH_MspInit+0x240>)
 8001f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f8e:	4b7b      	ldr	r3, [pc, #492]	; (800217c <HAL_ETH_MspInit+0x240>)
 8001f90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001f9c:	4b77      	ldr	r3, [pc, #476]	; (800217c <HAL_ETH_MspInit+0x240>)
 8001f9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fa2:	4a76      	ldr	r2, [pc, #472]	; (800217c <HAL_ETH_MspInit+0x240>)
 8001fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001fac:	4b73      	ldr	r3, [pc, #460]	; (800217c <HAL_ETH_MspInit+0x240>)
 8001fae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fba:	4b70      	ldr	r3, [pc, #448]	; (800217c <HAL_ETH_MspInit+0x240>)
 8001fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc0:	4a6e      	ldr	r2, [pc, #440]	; (800217c <HAL_ETH_MspInit+0x240>)
 8001fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fca:	4b6c      	ldr	r3, [pc, #432]	; (800217c <HAL_ETH_MspInit+0x240>)
 8001fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fd8:	4b68      	ldr	r3, [pc, #416]	; (800217c <HAL_ETH_MspInit+0x240>)
 8001fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fde:	4a67      	ldr	r2, [pc, #412]	; (800217c <HAL_ETH_MspInit+0x240>)
 8001fe0:	f043 0310 	orr.w	r3, r3, #16
 8001fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fe8:	4b64      	ldr	r3, [pc, #400]	; (800217c <HAL_ETH_MspInit+0x240>)
 8001fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	623b      	str	r3, [r7, #32]
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ff6:	4b61      	ldr	r3, [pc, #388]	; (800217c <HAL_ETH_MspInit+0x240>)
 8001ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffc:	4a5f      	ldr	r2, [pc, #380]	; (800217c <HAL_ETH_MspInit+0x240>)
 8001ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002002:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002006:	4b5d      	ldr	r3, [pc, #372]	; (800217c <HAL_ETH_MspInit+0x240>)
 8002008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002014:	4b59      	ldr	r3, [pc, #356]	; (800217c <HAL_ETH_MspInit+0x240>)
 8002016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800201a:	4a58      	ldr	r2, [pc, #352]	; (800217c <HAL_ETH_MspInit+0x240>)
 800201c:	f043 0304 	orr.w	r3, r3, #4
 8002020:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002024:	4b55      	ldr	r3, [pc, #340]	; (800217c <HAL_ETH_MspInit+0x240>)
 8002026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002032:	4b52      	ldr	r3, [pc, #328]	; (800217c <HAL_ETH_MspInit+0x240>)
 8002034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002038:	4a50      	ldr	r2, [pc, #320]	; (800217c <HAL_ETH_MspInit+0x240>)
 800203a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800203e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002042:	4b4e      	ldr	r3, [pc, #312]	; (800217c <HAL_ETH_MspInit+0x240>)
 8002044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002050:	4b4a      	ldr	r3, [pc, #296]	; (800217c <HAL_ETH_MspInit+0x240>)
 8002052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002056:	4a49      	ldr	r2, [pc, #292]	; (800217c <HAL_ETH_MspInit+0x240>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002060:	4b46      	ldr	r3, [pc, #280]	; (800217c <HAL_ETH_MspInit+0x240>)
 8002062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206e:	4b43      	ldr	r3, [pc, #268]	; (800217c <HAL_ETH_MspInit+0x240>)
 8002070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002074:	4a41      	ldr	r2, [pc, #260]	; (800217c <HAL_ETH_MspInit+0x240>)
 8002076:	f043 0302 	orr.w	r3, r3, #2
 800207a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800207e:	4b3f      	ldr	r3, [pc, #252]	; (800217c <HAL_ETH_MspInit+0x240>)
 8002080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 800208c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002090:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800209e:	230b      	movs	r3, #11
 80020a0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020a6:	4619      	mov	r1, r3
 80020a8:	4835      	ldr	r0, [pc, #212]	; (8002180 <HAL_ETH_MspInit+0x244>)
 80020aa:	f003 fe3d 	bl	8005d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 80020ae:	2304      	movs	r3, #4
 80020b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020be:	230b      	movs	r3, #11
 80020c0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 80020c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020c6:	4619      	mov	r1, r3
 80020c8:	482e      	ldr	r0, [pc, #184]	; (8002184 <HAL_ETH_MspInit+0x248>)
 80020ca:	f003 fe2d 	bl	8005d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 80020ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020dc:	2300      	movs	r3, #0
 80020de:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020e0:	230b      	movs	r3, #11
 80020e2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 80020e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020e8:	4619      	mov	r1, r3
 80020ea:	4827      	ldr	r0, [pc, #156]	; (8002188 <HAL_ETH_MspInit+0x24c>)
 80020ec:	f003 fe1c 	bl	8005d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 80020f0:	233e      	movs	r3, #62	; 0x3e
 80020f2:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f4:	2302      	movs	r3, #2
 80020f6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fc:	2300      	movs	r3, #0
 80020fe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002100:	230b      	movs	r3, #11
 8002102:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002104:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002108:	4619      	mov	r1, r3
 800210a:	4820      	ldr	r0, [pc, #128]	; (800218c <HAL_ETH_MspInit+0x250>)
 800210c:	f003 fe0c 	bl	8005d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8002110:	230c      	movs	r3, #12
 8002112:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002120:	230b      	movs	r3, #11
 8002122:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002124:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002128:	4619      	mov	r1, r3
 800212a:	4819      	ldr	r0, [pc, #100]	; (8002190 <HAL_ETH_MspInit+0x254>)
 800212c:	f003 fdfc 	bl	8005d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8002130:	2386      	movs	r3, #134	; 0x86
 8002132:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213c:	2300      	movs	r3, #0
 800213e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002140:	230b      	movs	r3, #11
 8002142:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002144:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002148:	4619      	mov	r1, r3
 800214a:	4812      	ldr	r0, [pc, #72]	; (8002194 <HAL_ETH_MspInit+0x258>)
 800214c:	f003 fdec 	bl	8005d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8002150:	2303      	movs	r3, #3
 8002152:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002160:	230b      	movs	r3, #11
 8002162:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002164:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002168:	4619      	mov	r1, r3
 800216a:	480b      	ldr	r0, [pc, #44]	; (8002198 <HAL_ETH_MspInit+0x25c>)
 800216c:	f003 fddc 	bl	8005d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002170:	bf00      	nop
 8002172:	3748      	adds	r7, #72	; 0x48
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40028000 	.word	0x40028000
 800217c:	58024400 	.word	0x58024400
 8002180:	58021800 	.word	0x58021800
 8002184:	58021000 	.word	0x58021000
 8002188:	58022000 	.word	0x58022000
 800218c:	58020800 	.word	0x58020800
 8002190:	58021c00 	.word	0x58021c00
 8002194:	58020000 	.word	0x58020000
 8002198:	58020400 	.word	0x58020400

0800219c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b0bc      	sub	sp, #240	; 0xf0
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021b4:	f107 0318 	add.w	r3, r7, #24
 80021b8:	22c0      	movs	r2, #192	; 0xc0
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f00c fbd1 	bl	800e964 <memset>
  if(hfdcan->Instance==FDCAN1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a57      	ldr	r2, [pc, #348]	; (8002324 <HAL_FDCAN_MspInit+0x188>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d151      	bne.n	8002270 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80021cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80021d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80021dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e0:	f107 0318 	add.w	r3, r7, #24
 80021e4:	4618      	mov	r0, r3
 80021e6:	f005 fb89 	bl	80078fc <HAL_RCCEx_PeriphCLKConfig>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80021f0:	f7ff fd82 	bl	8001cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80021f4:	4b4c      	ldr	r3, [pc, #304]	; (8002328 <HAL_FDCAN_MspInit+0x18c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	3301      	adds	r3, #1
 80021fa:	4a4b      	ldr	r2, [pc, #300]	; (8002328 <HAL_FDCAN_MspInit+0x18c>)
 80021fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80021fe:	4b4a      	ldr	r3, [pc, #296]	; (8002328 <HAL_FDCAN_MspInit+0x18c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d10e      	bne.n	8002224 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002206:	4b49      	ldr	r3, [pc, #292]	; (800232c <HAL_FDCAN_MspInit+0x190>)
 8002208:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800220c:	4a47      	ldr	r2, [pc, #284]	; (800232c <HAL_FDCAN_MspInit+0x190>)
 800220e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002212:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002216:	4b45      	ldr	r3, [pc, #276]	; (800232c <HAL_FDCAN_MspInit+0x190>)
 8002218:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800221c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002224:	4b41      	ldr	r3, [pc, #260]	; (800232c <HAL_FDCAN_MspInit+0x190>)
 8002226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800222a:	4a40      	ldr	r2, [pc, #256]	; (800232c <HAL_FDCAN_MspInit+0x190>)
 800222c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002230:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002234:	4b3d      	ldr	r3, [pc, #244]	; (800232c <HAL_FDCAN_MspInit+0x190>)
 8002236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8002242:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800225c:	2309      	movs	r3, #9
 800225e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002262:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002266:	4619      	mov	r1, r3
 8002268:	4831      	ldr	r0, [pc, #196]	; (8002330 <HAL_FDCAN_MspInit+0x194>)
 800226a:	f003 fd5d 	bl	8005d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800226e:	e055      	b.n	800231c <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a2f      	ldr	r2, [pc, #188]	; (8002334 <HAL_FDCAN_MspInit+0x198>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d150      	bne.n	800231c <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800227a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002286:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800228a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800228e:	f107 0318 	add.w	r3, r7, #24
 8002292:	4618      	mov	r0, r3
 8002294:	f005 fb32 	bl	80078fc <HAL_RCCEx_PeriphCLKConfig>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 800229e:	f7ff fd2b 	bl	8001cf8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80022a2:	4b21      	ldr	r3, [pc, #132]	; (8002328 <HAL_FDCAN_MspInit+0x18c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3301      	adds	r3, #1
 80022a8:	4a1f      	ldr	r2, [pc, #124]	; (8002328 <HAL_FDCAN_MspInit+0x18c>)
 80022aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80022ac:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <HAL_FDCAN_MspInit+0x18c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d10e      	bne.n	80022d2 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_FDCAN_MspInit+0x190>)
 80022b6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80022ba:	4a1c      	ldr	r2, [pc, #112]	; (800232c <HAL_FDCAN_MspInit+0x190>)
 80022bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_FDCAN_MspInit+0x190>)
 80022c6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80022ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <HAL_FDCAN_MspInit+0x190>)
 80022d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d8:	4a14      	ldr	r2, [pc, #80]	; (800232c <HAL_FDCAN_MspInit+0x190>)
 80022da:	f043 0302 	orr.w	r3, r3, #2
 80022de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_FDCAN_MspInit+0x190>)
 80022e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 80022f0:	f242 0320 	movw	r3, #8224	; 0x2020
 80022f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800230a:	2309      	movs	r3, #9
 800230c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002310:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002314:	4619      	mov	r1, r3
 8002316:	4808      	ldr	r0, [pc, #32]	; (8002338 <HAL_FDCAN_MspInit+0x19c>)
 8002318:	f003 fd06 	bl	8005d28 <HAL_GPIO_Init>
}
 800231c:	bf00      	nop
 800231e:	37f0      	adds	r7, #240	; 0xf0
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	4000a000 	.word	0x4000a000
 8002328:	24000db8 	.word	0x24000db8
 800232c:	58024400 	.word	0x58024400
 8002330:	58021c00 	.word	0x58021c00
 8002334:	4000a400 	.word	0x4000a400
 8002338:	58020400 	.word	0x58020400

0800233c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b0be      	sub	sp, #248	; 0xf8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002354:	f107 0320 	add.w	r3, r7, #32
 8002358:	22c0      	movs	r2, #192	; 0xc0
 800235a:	2100      	movs	r1, #0
 800235c:	4618      	mov	r0, r3
 800235e:	f00c fb01 	bl	800e964 <memset>
  if(hltdc->Instance==LTDC)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a66      	ldr	r2, [pc, #408]	; (8002500 <HAL_LTDC_MspInit+0x1c4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	f040 80c4 	bne.w	80024f6 <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800236e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 800237a:	2320      	movs	r3, #32
 800237c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 800237e:	23c0      	movs	r3, #192	; 0xc0
 8002380:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002382:	2302      	movs	r3, #2
 8002384:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002386:	2302      	movs	r3, #2
 8002388:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800238a:	2302      	movs	r3, #2
 800238c:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800238e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002392:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002394:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002398:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800239e:	f107 0320 	add.w	r3, r7, #32
 80023a2:	4618      	mov	r0, r3
 80023a4:	f005 faaa 	bl	80078fc <HAL_RCCEx_PeriphCLKConfig>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 80023ae:	f7ff fca3 	bl	8001cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80023b2:	4b54      	ldr	r3, [pc, #336]	; (8002504 <HAL_LTDC_MspInit+0x1c8>)
 80023b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80023b8:	4a52      	ldr	r2, [pc, #328]	; (8002504 <HAL_LTDC_MspInit+0x1c8>)
 80023ba:	f043 0308 	orr.w	r3, r3, #8
 80023be:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80023c2:	4b50      	ldr	r3, [pc, #320]	; (8002504 <HAL_LTDC_MspInit+0x1c8>)
 80023c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	61fb      	str	r3, [r7, #28]
 80023ce:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 80023d0:	4b4c      	ldr	r3, [pc, #304]	; (8002504 <HAL_LTDC_MspInit+0x1c8>)
 80023d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d6:	4a4b      	ldr	r2, [pc, #300]	; (8002504 <HAL_LTDC_MspInit+0x1c8>)
 80023d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e0:	4b48      	ldr	r3, [pc, #288]	; (8002504 <HAL_LTDC_MspInit+0x1c8>)
 80023e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ea:	61bb      	str	r3, [r7, #24]
 80023ec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80023ee:	4b45      	ldr	r3, [pc, #276]	; (8002504 <HAL_LTDC_MspInit+0x1c8>)
 80023f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f4:	4a43      	ldr	r2, [pc, #268]	; (8002504 <HAL_LTDC_MspInit+0x1c8>)
 80023f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023fe:	4b41      	ldr	r3, [pc, #260]	; (8002504 <HAL_LTDC_MspInit+0x1c8>)
 8002400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800240c:	4b3d      	ldr	r3, [pc, #244]	; (8002504 <HAL_LTDC_MspInit+0x1c8>)
 800240e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002412:	4a3c      	ldr	r2, [pc, #240]	; (8002504 <HAL_LTDC_MspInit+0x1c8>)
 8002414:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800241c:	4b39      	ldr	r3, [pc, #228]	; (8002504 <HAL_LTDC_MspInit+0x1c8>)
 800241e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800242a:	4b36      	ldr	r3, [pc, #216]	; (8002504 <HAL_LTDC_MspInit+0x1c8>)
 800242c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002430:	4a34      	ldr	r2, [pc, #208]	; (8002504 <HAL_LTDC_MspInit+0x1c8>)
 8002432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800243a:	4b32      	ldr	r3, [pc, #200]	; (8002504 <HAL_LTDC_MspInit+0x1c8>)
 800243c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8002448:	23fc      	movs	r3, #252	; 0xfc
 800244a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245a:	2300      	movs	r3, #0
 800245c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002460:	230e      	movs	r3, #14
 8002462:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002466:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800246a:	4619      	mov	r1, r3
 800246c:	4826      	ldr	r0, [pc, #152]	; (8002508 <HAL_LTDC_MspInit+0x1cc>)
 800246e:	f003 fc5b 	bl	8005d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8002472:	f24d 2303 	movw	r3, #53763	; 0xd203
 8002476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247a:	2302      	movs	r3, #2
 800247c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800248c:	230e      	movs	r3, #14
 800248e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002492:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002496:	4619      	mov	r1, r3
 8002498:	481c      	ldr	r0, [pc, #112]	; (800250c <HAL_LTDC_MspInit+0x1d0>)
 800249a:	f003 fc45 	bl	8005d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 800249e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80024a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024b8:	230e      	movs	r3, #14
 80024ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80024be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024c2:	4619      	mov	r1, r3
 80024c4:	4812      	ldr	r0, [pc, #72]	; (8002510 <HAL_LTDC_MspInit+0x1d4>)
 80024c6:	f003 fc2f 	bl	8005d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	2300      	movs	r3, #0
 80024e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024e4:	230e      	movs	r3, #14
 80024e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024ee:	4619      	mov	r1, r3
 80024f0:	4808      	ldr	r0, [pc, #32]	; (8002514 <HAL_LTDC_MspInit+0x1d8>)
 80024f2:	f003 fc19 	bl	8005d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80024f6:	bf00      	nop
 80024f8:	37f8      	adds	r7, #248	; 0xf8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	50001000 	.word	0x50001000
 8002504:	58024400 	.word	0x58024400
 8002508:	58022800 	.word	0x58022800
 800250c:	58022000 	.word	0x58022000
 8002510:	58022400 	.word	0x58022400
 8002514:	58021c00 	.word	0x58021c00

08002518 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b0b2      	sub	sp, #200	; 0xc8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002520:	f107 0308 	add.w	r3, r7, #8
 8002524:	22c0      	movs	r2, #192	; 0xc0
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f00c fa1b 	bl	800e964 <memset>
  if(hrtc->Instance==RTC)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a10      	ldr	r2, [pc, #64]	; (8002574 <HAL_RTC_MspInit+0x5c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d119      	bne.n	800256c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002538:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002548:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800254c:	f107 0308 	add.w	r3, r7, #8
 8002550:	4618      	mov	r0, r3
 8002552:	f005 f9d3 	bl	80078fc <HAL_RCCEx_PeriphCLKConfig>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800255c:	f7ff fbcc 	bl	8001cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_RTC_MspInit+0x60>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	4a04      	ldr	r2, [pc, #16]	; (8002578 <HAL_RTC_MspInit+0x60>)
 8002566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800256a:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800256c:	bf00      	nop
 800256e:	37c8      	adds	r7, #200	; 0xc8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	58004000 	.word	0x58004000
 8002578:	58024400 	.word	0x58024400

0800257c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b0bc      	sub	sp, #240	; 0xf0
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002594:	f107 0318 	add.w	r3, r7, #24
 8002598:	22c0      	movs	r2, #192	; 0xc0
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f00c f9e1 	bl	800e964 <memset>
  if(hspi->Instance==SPI2)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a55      	ldr	r2, [pc, #340]	; (80026fc <HAL_SPI_MspInit+0x180>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	f040 80a3 	bne.w	80026f4 <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80025ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025be:	f107 0318 	add.w	r3, r7, #24
 80025c2:	4618      	mov	r0, r3
 80025c4:	f005 f99a 	bl	80078fc <HAL_RCCEx_PeriphCLKConfig>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80025ce:	f7ff fb93 	bl	8001cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025d2:	4b4b      	ldr	r3, [pc, #300]	; (8002700 <HAL_SPI_MspInit+0x184>)
 80025d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025d8:	4a49      	ldr	r2, [pc, #292]	; (8002700 <HAL_SPI_MspInit+0x184>)
 80025da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025e2:	4b47      	ldr	r3, [pc, #284]	; (8002700 <HAL_SPI_MspInit+0x184>)
 80025e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f0:	4b43      	ldr	r3, [pc, #268]	; (8002700 <HAL_SPI_MspInit+0x184>)
 80025f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f6:	4a42      	ldr	r2, [pc, #264]	; (8002700 <HAL_SPI_MspInit+0x184>)
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002600:	4b3f      	ldr	r3, [pc, #252]	; (8002700 <HAL_SPI_MspInit+0x184>)
 8002602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800260e:	4b3c      	ldr	r3, [pc, #240]	; (8002700 <HAL_SPI_MspInit+0x184>)
 8002610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002614:	4a3a      	ldr	r2, [pc, #232]	; (8002700 <HAL_SPI_MspInit+0x184>)
 8002616:	f043 0308 	orr.w	r3, r3, #8
 800261a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800261e:	4b38      	ldr	r3, [pc, #224]	; (8002700 <HAL_SPI_MspInit+0x184>)
 8002620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800262c:	4b34      	ldr	r3, [pc, #208]	; (8002700 <HAL_SPI_MspInit+0x184>)
 800262e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002632:	4a33      	ldr	r2, [pc, #204]	; (8002700 <HAL_SPI_MspInit+0x184>)
 8002634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002638:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800263c:	4b30      	ldr	r3, [pc, #192]	; (8002700 <HAL_SPI_MspInit+0x184>)
 800263e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800264a:	2310      	movs	r3, #16
 800264c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265c:	2300      	movs	r3, #0
 800265e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002662:	2307      	movs	r3, #7
 8002664:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002668:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800266c:	4619      	mov	r1, r3
 800266e:	4825      	ldr	r0, [pc, #148]	; (8002704 <HAL_SPI_MspInit+0x188>)
 8002670:	f003 fb5a 	bl	8005d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002674:	2308      	movs	r3, #8
 8002676:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002686:	2300      	movs	r3, #0
 8002688:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800268c:	2305      	movs	r3, #5
 800268e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002692:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002696:	4619      	mov	r1, r3
 8002698:	481b      	ldr	r0, [pc, #108]	; (8002708 <HAL_SPI_MspInit+0x18c>)
 800269a:	f003 fb45 	bl	8005d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800269e:	2304      	movs	r3, #4
 80026a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026b6:	2305      	movs	r3, #5
 80026b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80026bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80026c0:	4619      	mov	r1, r3
 80026c2:	4812      	ldr	r0, [pc, #72]	; (800270c <HAL_SPI_MspInit+0x190>)
 80026c4:	f003 fb30 	bl	8005d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	2302      	movs	r3, #2
 80026d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026e2:	2305      	movs	r3, #5
 80026e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80026ec:	4619      	mov	r1, r3
 80026ee:	4805      	ldr	r0, [pc, #20]	; (8002704 <HAL_SPI_MspInit+0x188>)
 80026f0:	f003 fb1a 	bl	8005d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80026f4:	bf00      	nop
 80026f6:	37f0      	adds	r7, #240	; 0xf0
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40003800 	.word	0x40003800
 8002700:	58024400 	.word	0x58024400
 8002704:	58020400 	.word	0x58020400
 8002708:	58020c00 	.word	0x58020c00
 800270c:	58022000 	.word	0x58022000

08002710 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0b      	ldr	r2, [pc, #44]	; (800274c <HAL_TIM_Base_MspInit+0x3c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d10e      	bne.n	8002740 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002722:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_TIM_Base_MspInit+0x40>)
 8002724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002728:	4a09      	ldr	r2, [pc, #36]	; (8002750 <HAL_TIM_Base_MspInit+0x40>)
 800272a:	f043 0302 	orr.w	r3, r3, #2
 800272e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002732:	4b07      	ldr	r3, [pc, #28]	; (8002750 <HAL_TIM_Base_MspInit+0x40>)
 8002734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002740:	bf00      	nop
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	40000400 	.word	0x40000400
 8002750:	58024400 	.word	0x58024400

08002754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b0ba      	sub	sp, #232	; 0xe8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800276c:	f107 0310 	add.w	r3, r7, #16
 8002770:	22c0      	movs	r2, #192	; 0xc0
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f00c f8f5 	bl	800e964 <memset>
  if(huart->Instance==USART3)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a2b      	ldr	r2, [pc, #172]	; (800282c <HAL_UART_MspInit+0xd8>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d14e      	bne.n	8002822 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002784:	f04f 0202 	mov.w	r2, #2
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002790:	2300      	movs	r3, #0
 8002792:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002796:	f107 0310 	add.w	r3, r7, #16
 800279a:	4618      	mov	r0, r3
 800279c:	f005 f8ae 	bl	80078fc <HAL_RCCEx_PeriphCLKConfig>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80027a6:	f7ff faa7 	bl	8001cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80027aa:	4b21      	ldr	r3, [pc, #132]	; (8002830 <HAL_UART_MspInit+0xdc>)
 80027ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027b0:	4a1f      	ldr	r2, [pc, #124]	; (8002830 <HAL_UART_MspInit+0xdc>)
 80027b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027ba:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <HAL_UART_MspInit+0xdc>)
 80027bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c8:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_UART_MspInit+0xdc>)
 80027ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ce:	4a18      	ldr	r2, [pc, #96]	; (8002830 <HAL_UART_MspInit+0xdc>)
 80027d0:	f043 0302 	orr.w	r3, r3, #2
 80027d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <HAL_UART_MspInit+0xdc>)
 80027da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80027e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ee:	2302      	movs	r3, #2
 80027f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002800:	2307      	movs	r3, #7
 8002802:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002806:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800280a:	4619      	mov	r1, r3
 800280c:	4809      	ldr	r0, [pc, #36]	; (8002834 <HAL_UART_MspInit+0xe0>)
 800280e:	f003 fa8b 	bl	8005d28 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	2100      	movs	r1, #0
 8002816:	2027      	movs	r0, #39	; 0x27
 8002818:	f001 fd65 	bl	80042e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800281c:	2027      	movs	r0, #39	; 0x27
 800281e:	f001 fd7c 	bl	800431a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002822:	bf00      	nop
 8002824:	37e8      	adds	r7, #232	; 0xe8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40004800 	.word	0x40004800
 8002830:	58024400 	.word	0x58024400
 8002834:	58020400 	.word	0x58020400

08002838 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b0ba      	sub	sp, #232	; 0xe8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002850:	f107 0310 	add.w	r3, r7, #16
 8002854:	22c0      	movs	r2, #192	; 0xc0
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f00c f883 	bl	800e964 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a30      	ldr	r2, [pc, #192]	; (8002924 <HAL_PCD_MspInit+0xec>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d159      	bne.n	800291c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002868:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002874:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800287c:	f107 0310 	add.w	r3, r7, #16
 8002880:	4618      	mov	r0, r3
 8002882:	f005 f83b 	bl	80078fc <HAL_RCCEx_PeriphCLKConfig>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800288c:	f7ff fa34 	bl	8001cf8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002890:	f004 f83e 	bl	8006910 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002894:	4b24      	ldr	r3, [pc, #144]	; (8002928 <HAL_PCD_MspInit+0xf0>)
 8002896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800289a:	4a23      	ldr	r2, [pc, #140]	; (8002928 <HAL_PCD_MspInit+0xf0>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028a4:	4b20      	ldr	r3, [pc, #128]	; (8002928 <HAL_PCD_MspInit+0xf0>)
 80028a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 80028b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 80028c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028ca:	4619      	mov	r1, r3
 80028cc:	4817      	ldr	r0, [pc, #92]	; (800292c <HAL_PCD_MspInit+0xf4>)
 80028ce:	f003 fa2b 	bl	8005d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 80028d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80028ec:	230a      	movs	r3, #10
 80028ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028f6:	4619      	mov	r1, r3
 80028f8:	480c      	ldr	r0, [pc, #48]	; (800292c <HAL_PCD_MspInit+0xf4>)
 80028fa:	f003 fa15 	bl	8005d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_PCD_MspInit+0xf0>)
 8002900:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002904:	4a08      	ldr	r2, [pc, #32]	; (8002928 <HAL_PCD_MspInit+0xf0>)
 8002906:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800290a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_PCD_MspInit+0xf0>)
 8002910:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800291c:	bf00      	nop
 800291e:	37e8      	adds	r7, #232	; 0xe8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40080000 	.word	0x40080000
 8002928:	58024400 	.word	0x58024400
 800292c:	58020000 	.word	0x58020000

08002930 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002930:	b580      	push	{r7, lr}
 8002932:	b0b8      	sub	sp, #224	; 0xe0
 8002934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002936:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	60da      	str	r2, [r3, #12]
 8002944:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002946:	4b51      	ldr	r3, [pc, #324]	; (8002a8c <HAL_FMC_MspInit+0x15c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	f040 8099 	bne.w	8002a82 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8002950:	4b4e      	ldr	r3, [pc, #312]	; (8002a8c <HAL_FMC_MspInit+0x15c>)
 8002952:	2201      	movs	r2, #1
 8002954:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002956:	f107 0308 	add.w	r3, r7, #8
 800295a:	22c0      	movs	r2, #192	; 0xc0
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f00c f800 	bl	800e964 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8002964:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8002970:	2300      	movs	r3, #0
 8002972:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002974:	f107 0308 	add.w	r3, r7, #8
 8002978:	4618      	mov	r0, r3
 800297a:	f004 ffbf 	bl	80078fc <HAL_RCCEx_PeriphCLKConfig>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8002984:	f7ff f9b8 	bl	8001cf8 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002988:	4b41      	ldr	r3, [pc, #260]	; (8002a90 <HAL_FMC_MspInit+0x160>)
 800298a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800298e:	4a40      	ldr	r2, [pc, #256]	; (8002a90 <HAL_FMC_MspInit+0x160>)
 8002990:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002994:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002998:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <HAL_FMC_MspInit+0x160>)
 800299a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800299e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80029a6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80029aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ba:	2303      	movs	r3, #3
 80029bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029c0:	230c      	movs	r3, #12
 80029c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029c6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029ca:	4619      	mov	r1, r3
 80029cc:	4831      	ldr	r0, [pc, #196]	; (8002a94 <HAL_FMC_MspInit+0x164>)
 80029ce:	f003 f9ab 	bl	8005d28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80029d2:	f248 1333 	movw	r3, #33075	; 0x8133
 80029d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e6:	2303      	movs	r3, #3
 80029e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029ec:	230c      	movs	r3, #12
 80029ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029f6:	4619      	mov	r1, r3
 80029f8:	4827      	ldr	r0, [pc, #156]	; (8002a98 <HAL_FMC_MspInit+0x168>)
 80029fa:	f003 f995 	bl	8005d28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80029fe:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002a02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	2302      	movs	r3, #2
 8002a08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a12:	2303      	movs	r3, #3
 8002a14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a18:	230c      	movs	r3, #12
 8002a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a1e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a22:	4619      	mov	r1, r3
 8002a24:	481d      	ldr	r0, [pc, #116]	; (8002a9c <HAL_FMC_MspInit+0x16c>)
 8002a26:	f003 f97f 	bl	8005d28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8002a2a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002a2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a44:	230c      	movs	r3, #12
 8002a46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a4a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4813      	ldr	r0, [pc, #76]	; (8002aa0 <HAL_FMC_MspInit+0x170>)
 8002a52:	f003 f969 	bl	8005d28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a56:	23e0      	movs	r3, #224	; 0xe0
 8002a58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a6e:	230c      	movs	r3, #12
 8002a70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a78:	4619      	mov	r1, r3
 8002a7a:	480a      	ldr	r0, [pc, #40]	; (8002aa4 <HAL_FMC_MspInit+0x174>)
 8002a7c:	f003 f954 	bl	8005d28 <HAL_GPIO_Init>
 8002a80:	e000      	b.n	8002a84 <HAL_FMC_MspInit+0x154>
    return;
 8002a82:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002a84:	37e0      	adds	r7, #224	; 0xe0
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	24000dbc 	.word	0x24000dbc
 8002a90:	58024400 	.word	0x58024400
 8002a94:	58021000 	.word	0x58021000
 8002a98:	58021800 	.word	0x58021800
 8002a9c:	58020c00 	.word	0x58020c00
 8002aa0:	58021400 	.word	0x58021400
 8002aa4:	58021c00 	.word	0x58021c00

08002aa8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002ab0:	f7ff ff3e 	bl	8002930 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b0ba      	sub	sp, #232	; 0xe8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ac4:	f107 0310 	add.w	r3, r7, #16
 8002ac8:	22c0      	movs	r2, #192	; 0xc0
 8002aca:	2100      	movs	r1, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f00b ff49 	bl	800e964 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a45      	ldr	r2, [pc, #276]	; (8002bec <HAL_SAI_MspInit+0x130>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d13e      	bne.n	8002b5a <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aec:	f107 0310 	add.w	r3, r7, #16
 8002af0:	4618      	mov	r0, r3
 8002af2:	f004 ff03 	bl	80078fc <HAL_RCCEx_PeriphCLKConfig>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8002afc:	f7ff f8fc 	bl	8001cf8 <Error_Handler>
    }

    if (SAI2_client == 0)
 8002b00:	4b3b      	ldr	r3, [pc, #236]	; (8002bf0 <HAL_SAI_MspInit+0x134>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10e      	bne.n	8002b26 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002b08:	4b3a      	ldr	r3, [pc, #232]	; (8002bf4 <HAL_SAI_MspInit+0x138>)
 8002b0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b0e:	4a39      	ldr	r2, [pc, #228]	; (8002bf4 <HAL_SAI_MspInit+0x138>)
 8002b10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b14:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b18:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <HAL_SAI_MspInit+0x138>)
 8002b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002b26:	4b32      	ldr	r3, [pc, #200]	; (8002bf0 <HAL_SAI_MspInit+0x134>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	4a30      	ldr	r2, [pc, #192]	; (8002bf0 <HAL_SAI_MspInit+0x134>)
 8002b2e:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8002b30:	23f0      	movs	r3, #240	; 0xf0
 8002b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b36:	2302      	movs	r3, #2
 8002b38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002b48:	230a      	movs	r3, #10
 8002b4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b4e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b52:	4619      	mov	r1, r3
 8002b54:	4828      	ldr	r0, [pc, #160]	; (8002bf8 <HAL_SAI_MspInit+0x13c>)
 8002b56:	f003 f8e7 	bl	8005d28 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a27      	ldr	r2, [pc, #156]	; (8002bfc <HAL_SAI_MspInit+0x140>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d13f      	bne.n	8002be4 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b74:	f107 0310 	add.w	r3, r7, #16
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f004 febf 	bl	80078fc <HAL_RCCEx_PeriphCLKConfig>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 8002b84:	f7ff f8b8 	bl	8001cf8 <Error_Handler>
    }

      if (SAI2_client == 0)
 8002b88:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <HAL_SAI_MspInit+0x134>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10e      	bne.n	8002bae <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002b90:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <HAL_SAI_MspInit+0x138>)
 8002b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b96:	4a17      	ldr	r2, [pc, #92]	; (8002bf4 <HAL_SAI_MspInit+0x138>)
 8002b98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ba0:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <HAL_SAI_MspInit+0x138>)
 8002ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ba6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <HAL_SAI_MspInit+0x134>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	4a0e      	ldr	r2, [pc, #56]	; (8002bf0 <HAL_SAI_MspInit+0x134>)
 8002bb6:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002bd2:	230a      	movs	r3, #10
 8002bd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bd8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4808      	ldr	r0, [pc, #32]	; (8002c00 <HAL_SAI_MspInit+0x144>)
 8002be0:	f003 f8a2 	bl	8005d28 <HAL_GPIO_Init>

    }
}
 8002be4:	bf00      	nop
 8002be6:	37e8      	adds	r7, #232	; 0xe8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40015c04 	.word	0x40015c04
 8002bf0:	24000dc0 	.word	0x24000dc0
 8002bf4:	58024400 	.word	0x58024400
 8002bf8:	58022000 	.word	0x58022000
 8002bfc:	40015c24 	.word	0x40015c24
 8002c00:	58021800 	.word	0x58021800

08002c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c08:	e7fe      	b.n	8002c08 <NMI_Handler+0x4>

08002c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c0e:	e7fe      	b.n	8002c0e <HardFault_Handler+0x4>

08002c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c14:	e7fe      	b.n	8002c14 <MemManage_Handler+0x4>

08002c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c1a:	e7fe      	b.n	8002c1a <BusFault_Handler+0x4>

08002c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c20:	e7fe      	b.n	8002c20 <UsageFault_Handler+0x4>

08002c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c50:	f000 f966 	bl	8002f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c54:	bf00      	nop
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c5c:	4802      	ldr	r0, [pc, #8]	; (8002c68 <USART3_IRQHandler+0x10>)
 8002c5e:	f008 ff7b 	bl	800bb58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	2400079c 	.word	0x2400079c

08002c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c74:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <_sbrk+0x5c>)
 8002c76:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <_sbrk+0x60>)
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c80:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <_sbrk+0x64>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c88:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <_sbrk+0x64>)
 8002c8a:	4a12      	ldr	r2, [pc, #72]	; (8002cd4 <_sbrk+0x68>)
 8002c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c8e:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <_sbrk+0x64>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4413      	add	r3, r2
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d207      	bcs.n	8002cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c9c:	f00b fe2a 	bl	800e8f4 <__errno>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	220c      	movs	r2, #12
 8002ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8002caa:	e009      	b.n	8002cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cac:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <_sbrk+0x64>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cb2:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <_sbrk+0x64>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	4a05      	ldr	r2, [pc, #20]	; (8002cd0 <_sbrk+0x64>)
 8002cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	24080000 	.word	0x24080000
 8002ccc:	00000400 	.word	0x00000400
 8002cd0:	24000dc4 	.word	0x24000dc4
 8002cd4:	24000de0 	.word	0x24000de0

08002cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002cdc:	4b37      	ldr	r3, [pc, #220]	; (8002dbc <SystemInit+0xe4>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce2:	4a36      	ldr	r2, [pc, #216]	; (8002dbc <SystemInit+0xe4>)
 8002ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002cec:	4b34      	ldr	r3, [pc, #208]	; (8002dc0 <SystemInit+0xe8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	2b06      	cmp	r3, #6
 8002cf6:	d807      	bhi.n	8002d08 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002cf8:	4b31      	ldr	r3, [pc, #196]	; (8002dc0 <SystemInit+0xe8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 030f 	bic.w	r3, r3, #15
 8002d00:	4a2f      	ldr	r2, [pc, #188]	; (8002dc0 <SystemInit+0xe8>)
 8002d02:	f043 0307 	orr.w	r3, r3, #7
 8002d06:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002d08:	4b2e      	ldr	r3, [pc, #184]	; (8002dc4 <SystemInit+0xec>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a2d      	ldr	r2, [pc, #180]	; (8002dc4 <SystemInit+0xec>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d14:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <SystemInit+0xec>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002d1a:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <SystemInit+0xec>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4929      	ldr	r1, [pc, #164]	; (8002dc4 <SystemInit+0xec>)
 8002d20:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <SystemInit+0xf0>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d26:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <SystemInit+0xe8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d32:	4b23      	ldr	r3, [pc, #140]	; (8002dc0 <SystemInit+0xe8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 030f 	bic.w	r3, r3, #15
 8002d3a:	4a21      	ldr	r2, [pc, #132]	; (8002dc0 <SystemInit+0xe8>)
 8002d3c:	f043 0307 	orr.w	r3, r3, #7
 8002d40:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <SystemInit+0xec>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002d48:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <SystemInit+0xec>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <SystemInit+0xec>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002d54:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <SystemInit+0xec>)
 8002d56:	4a1d      	ldr	r2, [pc, #116]	; (8002dcc <SystemInit+0xf4>)
 8002d58:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <SystemInit+0xec>)
 8002d5c:	4a1c      	ldr	r2, [pc, #112]	; (8002dd0 <SystemInit+0xf8>)
 8002d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <SystemInit+0xec>)
 8002d62:	4a1c      	ldr	r2, [pc, #112]	; (8002dd4 <SystemInit+0xfc>)
 8002d64:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <SystemInit+0xec>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002d6c:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <SystemInit+0xec>)
 8002d6e:	4a19      	ldr	r2, [pc, #100]	; (8002dd4 <SystemInit+0xfc>)
 8002d70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002d72:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <SystemInit+0xec>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <SystemInit+0xec>)
 8002d7a:	4a16      	ldr	r2, [pc, #88]	; (8002dd4 <SystemInit+0xfc>)
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002d7e:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <SystemInit+0xec>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <SystemInit+0xec>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a0e      	ldr	r2, [pc, #56]	; (8002dc4 <SystemInit+0xec>)
 8002d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <SystemInit+0xec>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <SystemInit+0x100>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <SystemInit+0x104>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002da2:	d202      	bcs.n	8002daa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002da4:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <SystemInit+0x108>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002daa:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <SystemInit+0x10c>)
 8002dac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002db0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002db2:	bf00      	nop
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000ed00 	.word	0xe000ed00
 8002dc0:	52002000 	.word	0x52002000
 8002dc4:	58024400 	.word	0x58024400
 8002dc8:	eaf6ed7f 	.word	0xeaf6ed7f
 8002dcc:	02020200 	.word	0x02020200
 8002dd0:	01ff0000 	.word	0x01ff0000
 8002dd4:	01010280 	.word	0x01010280
 8002dd8:	5c001000 	.word	0x5c001000
 8002ddc:	ffff0000 	.word	0xffff0000
 8002de0:	51008108 	.word	0x51008108
 8002de4:	52004000 	.word	0x52004000

08002de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002dec:	f7ff ff74 	bl	8002cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002df0:	480c      	ldr	r0, [pc, #48]	; (8002e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002df2:	490d      	ldr	r1, [pc, #52]	; (8002e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002df4:	4a0d      	ldr	r2, [pc, #52]	; (8002e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002df8:	e002      	b.n	8002e00 <LoopCopyDataInit>

08002dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dfe:	3304      	adds	r3, #4

08002e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e04:	d3f9      	bcc.n	8002dfa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e06:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e08:	4c0a      	ldr	r4, [pc, #40]	; (8002e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e0c:	e001      	b.n	8002e12 <LoopFillZerobss>

08002e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e10:	3204      	adds	r2, #4

08002e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e14:	d3fb      	bcc.n	8002e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e16:	f00b fd73 	bl	800e900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e1a:	f7fd fd93 	bl	8000944 <main>
  bx  lr
 8002e1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e20:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002e24:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002e28:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 8002e2c:	0800f400 	.word	0x0800f400
  ldr r2, =_sbss
 8002e30:	2400015c 	.word	0x2400015c
  ldr r4, =_ebss
 8002e34:	24000ddc 	.word	0x24000ddc

08002e38 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e38:	e7fe      	b.n	8002e38 <ADC3_IRQHandler>
	...

08002e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e42:	2003      	movs	r0, #3
 8002e44:	f001 fa44 	bl	80042d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e48:	f004 fb82 	bl	8007550 <HAL_RCC_GetSysClockFreq>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <HAL_Init+0x68>)
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	0a1b      	lsrs	r3, r3, #8
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	4913      	ldr	r1, [pc, #76]	; (8002ea8 <HAL_Init+0x6c>)
 8002e5a:	5ccb      	ldrb	r3, [r1, r3]
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
 8002e64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e66:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <HAL_Init+0x68>)
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ea8 <HAL_Init+0x6c>)
 8002e70:	5cd3      	ldrb	r3, [r2, r3]
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7c:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <HAL_Init+0x70>)
 8002e7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e80:	4a0b      	ldr	r2, [pc, #44]	; (8002eb0 <HAL_Init+0x74>)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e86:	2000      	movs	r0, #0
 8002e88:	f000 f814 	bl	8002eb4 <HAL_InitTick>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e002      	b.n	8002e9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e96:	f7fe ff35 	bl	8001d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	58024400 	.word	0x58024400
 8002ea8:	0800f384 	.word	0x0800f384
 8002eac:	2400002c 	.word	0x2400002c
 8002eb0:	24000028 	.word	0x24000028

08002eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002ebc:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <HAL_InitTick+0x60>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e021      	b.n	8002f0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002ec8:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <HAL_InitTick+0x64>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <HAL_InitTick+0x60>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f001 fa29 	bl	8004336 <HAL_SYSTICK_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e00e      	b.n	8002f0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b0f      	cmp	r3, #15
 8002ef2:	d80a      	bhi.n	8002f0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8002efc:	f001 f9f3 	bl	80042e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f00:	4a06      	ldr	r2, [pc, #24]	; (8002f1c <HAL_InitTick+0x68>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e000      	b.n	8002f0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	24000034 	.word	0x24000034
 8002f18:	24000028 	.word	0x24000028
 8002f1c:	24000030 	.word	0x24000030

08002f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_IncTick+0x20>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_IncTick+0x24>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4413      	add	r3, r2
 8002f30:	4a04      	ldr	r2, [pc, #16]	; (8002f44 <HAL_IncTick+0x24>)
 8002f32:	6013      	str	r3, [r2, #0]
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	24000034 	.word	0x24000034
 8002f44:	24000dc8 	.word	0x24000dc8

08002f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <HAL_GetTick+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	24000dc8 	.word	0x24000dc8

08002f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f68:	f7ff ffee 	bl	8002f48 <HAL_GetTick>
 8002f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d005      	beq.n	8002f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <HAL_Delay+0x44>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4413      	add	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f86:	bf00      	nop
 8002f88:	f7ff ffde 	bl	8002f48 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d8f7      	bhi.n	8002f88 <HAL_Delay+0x28>
  {
  }
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	24000034 	.word	0x24000034

08002fa8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002fac:	4b03      	ldr	r3, [pc, #12]	; (8002fbc <HAL_GetREVID+0x14>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	0c1b      	lsrs	r3, r3, #16
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	5c001000 	.word	0x5c001000

08002fc0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002fd0:	4904      	ldr	r1, [pc, #16]	; (8002fe4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	58000400 	.word	0x58000400

08002fe8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002ff2:	4b07      	ldr	r3, [pc, #28]	; (8003010 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	4904      	ldr	r1, [pc, #16]	; (8003010 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	58000400 	.word	0x58000400

08003014 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	609a      	str	r2, [r3, #8]
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	609a      	str	r2, [r3, #8]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3360      	adds	r3, #96	; 0x60
 800308e:	461a      	mov	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	430b      	orrs	r3, r1
 80030aa:	431a      	orrs	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80030b0:	bf00      	nop
 80030b2:	371c      	adds	r7, #28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	fa01 f303 	lsl.w	r3, r1, r3
 80030dc:	431a      	orrs	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	611a      	str	r2, [r3, #16]
}
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b087      	sub	sp, #28
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3360      	adds	r3, #96	; 0x60
 80030fe:	461a      	mov	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	431a      	orrs	r2, r3
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	601a      	str	r2, [r3, #0]
  }
}
 8003118:	bf00      	nop
 800311a:	371c      	adds	r7, #28
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	3330      	adds	r3, #48	; 0x30
 8003134:	461a      	mov	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	0a1b      	lsrs	r3, r3, #8
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	4413      	add	r3, r2
 8003142:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f003 031f 	and.w	r3, r3, #31
 800314e:	211f      	movs	r1, #31
 8003150:	fa01 f303 	lsl.w	r3, r1, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	401a      	ands	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	0e9b      	lsrs	r3, r3, #26
 800315c:	f003 011f 	and.w	r1, r3, #31
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	fa01 f303 	lsl.w	r3, r1, r3
 800316a:	431a      	orrs	r2, r3
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003170:	bf00      	nop
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	3314      	adds	r3, #20
 800318c:	461a      	mov	r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	0e5b      	lsrs	r3, r3, #25
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	4413      	add	r3, r2
 800319a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	0d1b      	lsrs	r3, r3, #20
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	2107      	movs	r1, #7
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	401a      	ands	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	0d1b      	lsrs	r3, r3, #20
 80031b6:	f003 031f 	and.w	r3, r3, #31
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	fa01 f303 	lsl.w	r3, r1, r3
 80031c0:	431a      	orrs	r2, r3
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80031c6:	bf00      	nop
 80031c8:	371c      	adds	r7, #28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031ec:	43db      	mvns	r3, r3
 80031ee:	401a      	ands	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f003 0318 	and.w	r3, r3, #24
 80031f6:	4908      	ldr	r1, [pc, #32]	; (8003218 <LL_ADC_SetChannelSingleDiff+0x44>)
 80031f8:	40d9      	lsrs	r1, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	400b      	ands	r3, r1
 80031fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003202:	431a      	orrs	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800320a:	bf00      	nop
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	000fffff 	.word	0x000fffff

0800321c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	4b04      	ldr	r3, [pc, #16]	; (800323c <LL_ADC_DisableDeepPowerDown+0x20>)
 800322a:	4013      	ands	r3, r2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6093      	str	r3, [r2, #8]
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	5fffffc0 	.word	0x5fffffc0

08003240 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003254:	d101      	bne.n	800325a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <LL_ADC_EnableInternalRegulator+0x24>)
 8003276:	4013      	ands	r3, r2
 8003278:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	6fffffc0 	.word	0x6fffffc0

08003290 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032a4:	d101      	bne.n	80032aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <LL_ADC_IsEnabled+0x18>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <LL_ADC_IsEnabled+0x1a>
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d101      	bne.n	80032f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b08      	cmp	r3, #8
 8003316:	d101      	bne.n	800331c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b089      	sub	sp, #36	; 0x24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003338:	2300      	movs	r3, #0
 800333a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e18f      	b.n	8003666 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003350:	2b00      	cmp	r3, #0
 8003352:	d109      	bne.n	8003368 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7fe fcef 	bl	8001d38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff ff67 	bl	8003240 <LL_ADC_IsDeepPowerDownEnabled>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d004      	beq.n	8003382 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ff4d 	bl	800321c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff ff82 	bl	8003290 <LL_ADC_IsInternalRegulatorEnabled>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff ff66 	bl	8003268 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800339c:	4b87      	ldr	r3, [pc, #540]	; (80035bc <HAL_ADC_Init+0x290>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	099b      	lsrs	r3, r3, #6
 80033a2:	4a87      	ldr	r2, [pc, #540]	; (80035c0 <HAL_ADC_Init+0x294>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	099b      	lsrs	r3, r3, #6
 80033aa:	3301      	adds	r3, #1
 80033ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033ae:	e002      	b.n	80033b6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f9      	bne.n	80033b0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ff65 	bl	8003290 <LL_ADC_IsInternalRegulatorEnabled>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10d      	bne.n	80033e8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d0:	f043 0210 	orr.w	r2, r3, #16
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033dc:	f043 0201 	orr.w	r2, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff76 	bl	80032de <LL_ADC_REG_IsConversionOngoing>
 80033f2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f040 8129 	bne.w	8003654 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2b00      	cmp	r3, #0
 8003406:	f040 8125 	bne.w	8003654 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003412:	f043 0202 	orr.w	r2, r3, #2
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff ff4a 	bl	80032b8 <LL_ADC_IsEnabled>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d136      	bne.n	8003498 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a65      	ldr	r2, [pc, #404]	; (80035c4 <HAL_ADC_Init+0x298>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d004      	beq.n	800343e <HAL_ADC_Init+0x112>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a63      	ldr	r2, [pc, #396]	; (80035c8 <HAL_ADC_Init+0x29c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d10e      	bne.n	800345c <HAL_ADC_Init+0x130>
 800343e:	4861      	ldr	r0, [pc, #388]	; (80035c4 <HAL_ADC_Init+0x298>)
 8003440:	f7ff ff3a 	bl	80032b8 <LL_ADC_IsEnabled>
 8003444:	4604      	mov	r4, r0
 8003446:	4860      	ldr	r0, [pc, #384]	; (80035c8 <HAL_ADC_Init+0x29c>)
 8003448:	f7ff ff36 	bl	80032b8 <LL_ADC_IsEnabled>
 800344c:	4603      	mov	r3, r0
 800344e:	4323      	orrs	r3, r4
 8003450:	2b00      	cmp	r3, #0
 8003452:	bf0c      	ite	eq
 8003454:	2301      	moveq	r3, #1
 8003456:	2300      	movne	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	e008      	b.n	800346e <HAL_ADC_Init+0x142>
 800345c:	485b      	ldr	r0, [pc, #364]	; (80035cc <HAL_ADC_Init+0x2a0>)
 800345e:	f7ff ff2b 	bl	80032b8 <LL_ADC_IsEnabled>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d012      	beq.n	8003498 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a53      	ldr	r2, [pc, #332]	; (80035c4 <HAL_ADC_Init+0x298>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d004      	beq.n	8003486 <HAL_ADC_Init+0x15a>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a51      	ldr	r2, [pc, #324]	; (80035c8 <HAL_ADC_Init+0x29c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d101      	bne.n	800348a <HAL_ADC_Init+0x15e>
 8003486:	4a52      	ldr	r2, [pc, #328]	; (80035d0 <HAL_ADC_Init+0x2a4>)
 8003488:	e000      	b.n	800348c <HAL_ADC_Init+0x160>
 800348a:	4a52      	ldr	r2, [pc, #328]	; (80035d4 <HAL_ADC_Init+0x2a8>)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	4619      	mov	r1, r3
 8003492:	4610      	mov	r0, r2
 8003494:	f7ff fdbe 	bl	8003014 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003498:	f7ff fd86 	bl	8002fa8 <HAL_GetREVID>
 800349c:	4603      	mov	r3, r0
 800349e:	f241 0203 	movw	r2, #4099	; 0x1003
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d914      	bls.n	80034d0 <HAL_ADC_Init+0x1a4>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b10      	cmp	r3, #16
 80034ac:	d110      	bne.n	80034d0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	7d5b      	ldrb	r3, [r3, #21]
 80034b2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034b8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80034be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	7f1b      	ldrb	r3, [r3, #28]
 80034c4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80034c6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034c8:	f043 030c 	orr.w	r3, r3, #12
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	e00d      	b.n	80034ec <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	7d5b      	ldrb	r3, [r3, #21]
 80034d4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034da:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80034e0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	7f1b      	ldrb	r3, [r3, #28]
 80034e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	7f1b      	ldrb	r3, [r3, #28]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d106      	bne.n	8003502 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	045b      	lsls	r3, r3, #17
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	4b2c      	ldr	r3, [pc, #176]	; (80035d8 <HAL_ADC_Init+0x2ac>)
 8003526:	4013      	ands	r3, r2
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	69b9      	ldr	r1, [r7, #24]
 800352e:	430b      	orrs	r3, r1
 8003530:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fed1 	bl	80032de <LL_ADC_REG_IsConversionOngoing>
 800353c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fede 	bl	8003304 <LL_ADC_INJ_IsConversionOngoing>
 8003548:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d15f      	bne.n	8003610 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d15c      	bne.n	8003610 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	7d1b      	ldrb	r3, [r3, #20]
 800355a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003560:	4313      	orrs	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	4b1c      	ldr	r3, [pc, #112]	; (80035dc <HAL_ADC_Init+0x2b0>)
 800356c:	4013      	ands	r3, r2
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	69b9      	ldr	r1, [r7, #24]
 8003574:	430b      	orrs	r3, r1
 8003576:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800357e:	2b01      	cmp	r3, #1
 8003580:	d130      	bne.n	80035e4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	4b14      	ldr	r3, [pc, #80]	; (80035e0 <HAL_ADC_Init+0x2b4>)
 8003590:	4013      	ands	r3, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003596:	3a01      	subs	r2, #1
 8003598:	0411      	lsls	r1, r2, #16
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800359e:	4311      	orrs	r1, r2
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80035a4:	4311      	orrs	r1, r2
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80035aa:	430a      	orrs	r2, r1
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	611a      	str	r2, [r3, #16]
 80035b8:	e01c      	b.n	80035f4 <HAL_ADC_Init+0x2c8>
 80035ba:	bf00      	nop
 80035bc:	24000028 	.word	0x24000028
 80035c0:	053e2d63 	.word	0x053e2d63
 80035c4:	40022000 	.word	0x40022000
 80035c8:	40022100 	.word	0x40022100
 80035cc:	58026000 	.word	0x58026000
 80035d0:	40022300 	.word	0x40022300
 80035d4:	58026300 	.word	0x58026300
 80035d8:	fff0c003 	.word	0xfff0c003
 80035dc:	ffffbffc 	.word	0xffffbffc
 80035e0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0201 	bic.w	r2, r2, #1
 80035f2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fb80 	bl	8003d10 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d10c      	bne.n	8003632 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	f023 010f 	bic.w	r1, r3, #15
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	1e5a      	subs	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	631a      	str	r2, [r3, #48]	; 0x30
 8003630:	e007      	b.n	8003642 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 020f 	bic.w	r2, r2, #15
 8003640:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003646:	f023 0303 	bic.w	r3, r3, #3
 800364a:	f043 0201 	orr.w	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	655a      	str	r2, [r3, #84]	; 0x54
 8003652:	e007      	b.n	8003664 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003658:	f043 0210 	orr.w	r2, r3, #16
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003664:	7ffb      	ldrb	r3, [r7, #31]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3724      	adds	r7, #36	; 0x24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd90      	pop	{r4, r7, pc}
 800366e:	bf00      	nop

08003670 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b0a1      	sub	sp, #132	; 0x84
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	4a9d      	ldr	r2, [pc, #628]	; (8003900 <HAL_ADC_ConfigChannel+0x290>)
 800368a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_ADC_ConfigChannel+0x2a>
 8003696:	2302      	movs	r3, #2
 8003698:	e321      	b.n	8003cde <HAL_ADC_ConfigChannel+0x66e>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fe19 	bl	80032de <LL_ADC_REG_IsConversionOngoing>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f040 8306 	bne.w	8003cc0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d108      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x62>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	0e9b      	lsrs	r3, r3, #26
 80036c6:	f003 031f 	and.w	r3, r3, #31
 80036ca:	2201      	movs	r2, #1
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	e016      	b.n	8003700 <HAL_ADC_ConfigChannel+0x90>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036e2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80036ea:	2320      	movs	r3, #32
 80036ec:	e003      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80036ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036f0:	fab3 f383 	clz	r3, r3
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	2201      	movs	r2, #1
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	69d1      	ldr	r1, [r2, #28]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6812      	ldr	r2, [r2, #0]
 800370a:	430b      	orrs	r3, r1
 800370c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	6859      	ldr	r1, [r3, #4]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	f7ff fd02 	bl	8003124 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fdda 	bl	80032de <LL_ADC_REG_IsConversionOngoing>
 800372a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff fde7 	bl	8003304 <LL_ADC_INJ_IsConversionOngoing>
 8003736:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003738:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800373a:	2b00      	cmp	r3, #0
 800373c:	f040 80b3 	bne.w	80038a6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003740:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003742:	2b00      	cmp	r3, #0
 8003744:	f040 80af 	bne.w	80038a6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	461a      	mov	r2, r3
 8003756:	f7ff fd11 	bl	800317c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800375a:	4b6a      	ldr	r3, [pc, #424]	; (8003904 <HAL_ADC_ConfigChannel+0x294>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003762:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003766:	d10b      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x110>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	089b      	lsrs	r3, r3, #2
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	e01d      	b.n	80037bc <HAL_ADC_ConfigChannel+0x14c>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f003 0310 	and.w	r3, r3, #16
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10b      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x136>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	089b      	lsrs	r3, r3, #2
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	e00a      	b.n	80037bc <HAL_ADC_ConfigChannel+0x14c>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	089b      	lsrs	r3, r3, #2
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d027      	beq.n	8003816 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	6919      	ldr	r1, [r3, #16]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037d4:	f7ff fc52 	bl	800307c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	6919      	ldr	r1, [r3, #16]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	7e5b      	ldrb	r3, [r3, #25]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d102      	bne.n	80037ee <HAL_ADC_ConfigChannel+0x17e>
 80037e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80037ec:	e000      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x180>
 80037ee:	2300      	movs	r3, #0
 80037f0:	461a      	mov	r2, r3
 80037f2:	f7ff fc7c 	bl	80030ee <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6919      	ldr	r1, [r3, #16]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	7e1b      	ldrb	r3, [r3, #24]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d102      	bne.n	800380c <HAL_ADC_ConfigChannel+0x19c>
 8003806:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800380a:	e000      	b.n	800380e <HAL_ADC_ConfigChannel+0x19e>
 800380c:	2300      	movs	r3, #0
 800380e:	461a      	mov	r2, r3
 8003810:	f7ff fc54 	bl	80030bc <LL_ADC_SetDataRightShift>
 8003814:	e047      	b.n	80038a6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800381c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	069b      	lsls	r3, r3, #26
 8003826:	429a      	cmp	r2, r3
 8003828:	d107      	bne.n	800383a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003838:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003840:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	069b      	lsls	r3, r3, #26
 800384a:	429a      	cmp	r2, r3
 800384c:	d107      	bne.n	800385e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800385c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003864:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	069b      	lsls	r3, r3, #26
 800386e:	429a      	cmp	r2, r3
 8003870:	d107      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003880:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003888:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	069b      	lsls	r3, r3, #26
 8003892:	429a      	cmp	r2, r3
 8003894:	d107      	bne.n	80038a6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038a4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fd04 	bl	80032b8 <LL_ADC_IsEnabled>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f040 820d 	bne.w	8003cd2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	6819      	ldr	r1, [r3, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	461a      	mov	r2, r3
 80038c6:	f7ff fc85 	bl	80031d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	4a0c      	ldr	r2, [pc, #48]	; (8003900 <HAL_ADC_ConfigChannel+0x290>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	f040 8133 	bne.w	8003b3c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d110      	bne.n	8003908 <HAL_ADC_ConfigChannel+0x298>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	0e9b      	lsrs	r3, r3, #26
 80038ec:	3301      	adds	r3, #1
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	2b09      	cmp	r3, #9
 80038f4:	bf94      	ite	ls
 80038f6:	2301      	movls	r3, #1
 80038f8:	2300      	movhi	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	e01e      	b.n	800393c <HAL_ADC_ConfigChannel+0x2cc>
 80038fe:	bf00      	nop
 8003900:	47ff0000 	.word	0x47ff0000
 8003904:	5c001000 	.word	0x5c001000
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003910:	fa93 f3a3 	rbit	r3, r3
 8003914:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003918:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800391a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003920:	2320      	movs	r3, #32
 8003922:	e003      	b.n	800392c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003926:	fab3 f383 	clz	r3, r3
 800392a:	b2db      	uxtb	r3, r3
 800392c:	3301      	adds	r3, #1
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	2b09      	cmp	r3, #9
 8003934:	bf94      	ite	ls
 8003936:	2301      	movls	r3, #1
 8003938:	2300      	movhi	r3, #0
 800393a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800393c:	2b00      	cmp	r3, #0
 800393e:	d079      	beq.n	8003a34 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003948:	2b00      	cmp	r3, #0
 800394a:	d107      	bne.n	800395c <HAL_ADC_ConfigChannel+0x2ec>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	0e9b      	lsrs	r3, r3, #26
 8003952:	3301      	adds	r3, #1
 8003954:	069b      	lsls	r3, r3, #26
 8003956:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800395a:	e015      	b.n	8003988 <HAL_ADC_ConfigChannel+0x318>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003964:	fa93 f3a3 	rbit	r3, r3
 8003968:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800396a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800396c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800396e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003974:	2320      	movs	r3, #32
 8003976:	e003      	b.n	8003980 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800397a:	fab3 f383 	clz	r3, r3
 800397e:	b2db      	uxtb	r3, r3
 8003980:	3301      	adds	r3, #1
 8003982:	069b      	lsls	r3, r3, #26
 8003984:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003990:	2b00      	cmp	r3, #0
 8003992:	d109      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x338>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	0e9b      	lsrs	r3, r3, #26
 800399a:	3301      	adds	r3, #1
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	2101      	movs	r1, #1
 80039a2:	fa01 f303 	lsl.w	r3, r1, r3
 80039a6:	e017      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x368>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b0:	fa93 f3a3 	rbit	r3, r3
 80039b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80039b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80039ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80039c0:	2320      	movs	r3, #32
 80039c2:	e003      	b.n	80039cc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80039c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039c6:	fab3 f383 	clz	r3, r3
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	3301      	adds	r3, #1
 80039ce:	f003 031f 	and.w	r3, r3, #31
 80039d2:	2101      	movs	r1, #1
 80039d4:	fa01 f303 	lsl.w	r3, r1, r3
 80039d8:	ea42 0103 	orr.w	r1, r2, r3
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10a      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x38e>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	0e9b      	lsrs	r3, r3, #26
 80039ee:	3301      	adds	r3, #1
 80039f0:	f003 021f 	and.w	r2, r3, #31
 80039f4:	4613      	mov	r3, r2
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	4413      	add	r3, r2
 80039fa:	051b      	lsls	r3, r3, #20
 80039fc:	e018      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3c0>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a06:	fa93 f3a3 	rbit	r3, r3
 8003a0a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003a16:	2320      	movs	r3, #32
 8003a18:	e003      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1c:	fab3 f383 	clz	r3, r3
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	3301      	adds	r3, #1
 8003a24:	f003 021f 	and.w	r2, r3, #31
 8003a28:	4613      	mov	r3, r2
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	4413      	add	r3, r2
 8003a2e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a30:	430b      	orrs	r3, r1
 8003a32:	e07e      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d107      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x3e0>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	0e9b      	lsrs	r3, r3, #26
 8003a46:	3301      	adds	r3, #1
 8003a48:	069b      	lsls	r3, r3, #26
 8003a4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a4e:	e015      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x40c>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003a68:	2320      	movs	r3, #32
 8003a6a:	e003      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	3301      	adds	r3, #1
 8003a76:	069b      	lsls	r3, r3, #26
 8003a78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d109      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x42c>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	0e9b      	lsrs	r3, r3, #26
 8003a8e:	3301      	adds	r3, #1
 8003a90:	f003 031f 	and.w	r3, r3, #31
 8003a94:	2101      	movs	r1, #1
 8003a96:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9a:	e017      	b.n	8003acc <HAL_ADC_ConfigChannel+0x45c>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	fa93 f3a3 	rbit	r3, r3
 8003aa8:	61bb      	str	r3, [r7, #24]
  return result;
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003ab4:	2320      	movs	r3, #32
 8003ab6:	e003      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	fab3 f383 	clz	r3, r3
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	f003 031f 	and.w	r3, r3, #31
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8003acc:	ea42 0103 	orr.w	r1, r2, r3
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10d      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x488>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	0e9b      	lsrs	r3, r3, #26
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	f003 021f 	and.w	r2, r3, #31
 8003ae8:	4613      	mov	r3, r2
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	4413      	add	r3, r2
 8003aee:	3b1e      	subs	r3, #30
 8003af0:	051b      	lsls	r3, r3, #20
 8003af2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003af6:	e01b      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x4c0>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	fa93 f3a3 	rbit	r3, r3
 8003b04:	60fb      	str	r3, [r7, #12]
  return result;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003b10:	2320      	movs	r3, #32
 8003b12:	e003      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	f003 021f 	and.w	r2, r3, #31
 8003b22:	4613      	mov	r3, r2
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	4413      	add	r3, r2
 8003b28:	3b1e      	subs	r3, #30
 8003b2a:	051b      	lsls	r3, r3, #20
 8003b2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b30:	430b      	orrs	r3, r1
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	6892      	ldr	r2, [r2, #8]
 8003b36:	4619      	mov	r1, r3
 8003b38:	f7ff fb20 	bl	800317c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f280 80c6 	bge.w	8003cd2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a67      	ldr	r2, [pc, #412]	; (8003ce8 <HAL_ADC_ConfigChannel+0x678>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d004      	beq.n	8003b5a <HAL_ADC_ConfigChannel+0x4ea>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a65      	ldr	r2, [pc, #404]	; (8003cec <HAL_ADC_ConfigChannel+0x67c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d101      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x4ee>
 8003b5a:	4b65      	ldr	r3, [pc, #404]	; (8003cf0 <HAL_ADC_ConfigChannel+0x680>)
 8003b5c:	e000      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x4f0>
 8003b5e:	4b65      	ldr	r3, [pc, #404]	; (8003cf4 <HAL_ADC_ConfigChannel+0x684>)
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff fa7d 	bl	8003060 <LL_ADC_GetCommonPathInternalCh>
 8003b66:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a5e      	ldr	r2, [pc, #376]	; (8003ce8 <HAL_ADC_ConfigChannel+0x678>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d004      	beq.n	8003b7c <HAL_ADC_ConfigChannel+0x50c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a5d      	ldr	r2, [pc, #372]	; (8003cec <HAL_ADC_ConfigChannel+0x67c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d10e      	bne.n	8003b9a <HAL_ADC_ConfigChannel+0x52a>
 8003b7c:	485a      	ldr	r0, [pc, #360]	; (8003ce8 <HAL_ADC_ConfigChannel+0x678>)
 8003b7e:	f7ff fb9b 	bl	80032b8 <LL_ADC_IsEnabled>
 8003b82:	4604      	mov	r4, r0
 8003b84:	4859      	ldr	r0, [pc, #356]	; (8003cec <HAL_ADC_ConfigChannel+0x67c>)
 8003b86:	f7ff fb97 	bl	80032b8 <LL_ADC_IsEnabled>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	4323      	orrs	r3, r4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bf0c      	ite	eq
 8003b92:	2301      	moveq	r3, #1
 8003b94:	2300      	movne	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	e008      	b.n	8003bac <HAL_ADC_ConfigChannel+0x53c>
 8003b9a:	4857      	ldr	r0, [pc, #348]	; (8003cf8 <HAL_ADC_ConfigChannel+0x688>)
 8003b9c:	f7ff fb8c 	bl	80032b8 <LL_ADC_IsEnabled>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	bf0c      	ite	eq
 8003ba6:	2301      	moveq	r3, #1
 8003ba8:	2300      	movne	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d07d      	beq.n	8003cac <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a51      	ldr	r2, [pc, #324]	; (8003cfc <HAL_ADC_ConfigChannel+0x68c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d130      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x5ac>
 8003bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d12b      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a4b      	ldr	r2, [pc, #300]	; (8003cf8 <HAL_ADC_ConfigChannel+0x688>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	f040 8081 	bne.w	8003cd2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a44      	ldr	r2, [pc, #272]	; (8003ce8 <HAL_ADC_ConfigChannel+0x678>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d004      	beq.n	8003be4 <HAL_ADC_ConfigChannel+0x574>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a43      	ldr	r2, [pc, #268]	; (8003cec <HAL_ADC_ConfigChannel+0x67c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d101      	bne.n	8003be8 <HAL_ADC_ConfigChannel+0x578>
 8003be4:	4a42      	ldr	r2, [pc, #264]	; (8003cf0 <HAL_ADC_ConfigChannel+0x680>)
 8003be6:	e000      	b.n	8003bea <HAL_ADC_ConfigChannel+0x57a>
 8003be8:	4a42      	ldr	r2, [pc, #264]	; (8003cf4 <HAL_ADC_ConfigChannel+0x684>)
 8003bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	f7ff fa21 	bl	800303a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bf8:	4b41      	ldr	r3, [pc, #260]	; (8003d00 <HAL_ADC_ConfigChannel+0x690>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	099b      	lsrs	r3, r3, #6
 8003bfe:	4a41      	ldr	r2, [pc, #260]	; (8003d04 <HAL_ADC_ConfigChannel+0x694>)
 8003c00:	fba2 2303 	umull	r2, r3, r2, r3
 8003c04:	099b      	lsrs	r3, r3, #6
 8003c06:	3301      	adds	r3, #1
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c0c:	e002      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f9      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c1a:	e05a      	b.n	8003cd2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a39      	ldr	r2, [pc, #228]	; (8003d08 <HAL_ADC_ConfigChannel+0x698>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d11e      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x5f4>
 8003c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d119      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a30      	ldr	r2, [pc, #192]	; (8003cf8 <HAL_ADC_ConfigChannel+0x688>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d14b      	bne.n	8003cd2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a2a      	ldr	r2, [pc, #168]	; (8003ce8 <HAL_ADC_ConfigChannel+0x678>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d004      	beq.n	8003c4e <HAL_ADC_ConfigChannel+0x5de>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a28      	ldr	r2, [pc, #160]	; (8003cec <HAL_ADC_ConfigChannel+0x67c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d101      	bne.n	8003c52 <HAL_ADC_ConfigChannel+0x5e2>
 8003c4e:	4a28      	ldr	r2, [pc, #160]	; (8003cf0 <HAL_ADC_ConfigChannel+0x680>)
 8003c50:	e000      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x5e4>
 8003c52:	4a28      	ldr	r2, [pc, #160]	; (8003cf4 <HAL_ADC_ConfigChannel+0x684>)
 8003c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	f7ff f9ec 	bl	800303a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c62:	e036      	b.n	8003cd2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a28      	ldr	r2, [pc, #160]	; (8003d0c <HAL_ADC_ConfigChannel+0x69c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d131      	bne.n	8003cd2 <HAL_ADC_ConfigChannel+0x662>
 8003c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d12c      	bne.n	8003cd2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a1e      	ldr	r2, [pc, #120]	; (8003cf8 <HAL_ADC_ConfigChannel+0x688>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d127      	bne.n	8003cd2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a18      	ldr	r2, [pc, #96]	; (8003ce8 <HAL_ADC_ConfigChannel+0x678>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d004      	beq.n	8003c96 <HAL_ADC_ConfigChannel+0x626>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a16      	ldr	r2, [pc, #88]	; (8003cec <HAL_ADC_ConfigChannel+0x67c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d101      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x62a>
 8003c96:	4a16      	ldr	r2, [pc, #88]	; (8003cf0 <HAL_ADC_ConfigChannel+0x680>)
 8003c98:	e000      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x62c>
 8003c9a:	4a16      	ldr	r2, [pc, #88]	; (8003cf4 <HAL_ADC_ConfigChannel+0x684>)
 8003c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	f7ff f9c8 	bl	800303a <LL_ADC_SetCommonPathInternalCh>
 8003caa:	e012      	b.n	8003cd2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb0:	f043 0220 	orr.w	r2, r3, #32
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003cbe:	e008      	b.n	8003cd2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc4:	f043 0220 	orr.w	r2, r3, #32
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cda:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3784      	adds	r7, #132	; 0x84
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd90      	pop	{r4, r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40022000 	.word	0x40022000
 8003cec:	40022100 	.word	0x40022100
 8003cf0:	40022300 	.word	0x40022300
 8003cf4:	58026300 	.word	0x58026300
 8003cf8:	58026000 	.word	0x58026000
 8003cfc:	cb840000 	.word	0xcb840000
 8003d00:	24000028 	.word	0x24000028
 8003d04:	053e2d63 	.word	0x053e2d63
 8003d08:	c7520000 	.word	0xc7520000
 8003d0c:	cfb80000 	.word	0xcfb80000

08003d10 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a7a      	ldr	r2, [pc, #488]	; (8003f08 <ADC_ConfigureBoostMode+0x1f8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d004      	beq.n	8003d2c <ADC_ConfigureBoostMode+0x1c>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a79      	ldr	r2, [pc, #484]	; (8003f0c <ADC_ConfigureBoostMode+0x1fc>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d109      	bne.n	8003d40 <ADC_ConfigureBoostMode+0x30>
 8003d2c:	4b78      	ldr	r3, [pc, #480]	; (8003f10 <ADC_ConfigureBoostMode+0x200>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bf14      	ite	ne
 8003d38:	2301      	movne	r3, #1
 8003d3a:	2300      	moveq	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	e008      	b.n	8003d52 <ADC_ConfigureBoostMode+0x42>
 8003d40:	4b74      	ldr	r3, [pc, #464]	; (8003f14 <ADC_ConfigureBoostMode+0x204>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf14      	ite	ne
 8003d4c:	2301      	movne	r3, #1
 8003d4e:	2300      	moveq	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01c      	beq.n	8003d90 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003d56:	f003 fd75 	bl	8007844 <HAL_RCC_GetHCLKFreq>
 8003d5a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d64:	d010      	beq.n	8003d88 <ADC_ConfigureBoostMode+0x78>
 8003d66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d6a:	d873      	bhi.n	8003e54 <ADC_ConfigureBoostMode+0x144>
 8003d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d70:	d002      	beq.n	8003d78 <ADC_ConfigureBoostMode+0x68>
 8003d72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d76:	d16d      	bne.n	8003e54 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	0c1b      	lsrs	r3, r3, #16
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d84:	60fb      	str	r3, [r7, #12]
        break;
 8003d86:	e068      	b.n	8003e5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	089b      	lsrs	r3, r3, #2
 8003d8c:	60fb      	str	r3, [r7, #12]
        break;
 8003d8e:	e064      	b.n	8003e5a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003d90:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003d94:	f04f 0100 	mov.w	r1, #0
 8003d98:	f004 ffba 	bl	8008d10 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d9c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003da6:	d051      	beq.n	8003e4c <ADC_ConfigureBoostMode+0x13c>
 8003da8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003dac:	d854      	bhi.n	8003e58 <ADC_ConfigureBoostMode+0x148>
 8003dae:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003db2:	d047      	beq.n	8003e44 <ADC_ConfigureBoostMode+0x134>
 8003db4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003db8:	d84e      	bhi.n	8003e58 <ADC_ConfigureBoostMode+0x148>
 8003dba:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003dbe:	d03d      	beq.n	8003e3c <ADC_ConfigureBoostMode+0x12c>
 8003dc0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003dc4:	d848      	bhi.n	8003e58 <ADC_ConfigureBoostMode+0x148>
 8003dc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dca:	d033      	beq.n	8003e34 <ADC_ConfigureBoostMode+0x124>
 8003dcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dd0:	d842      	bhi.n	8003e58 <ADC_ConfigureBoostMode+0x148>
 8003dd2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003dd6:	d029      	beq.n	8003e2c <ADC_ConfigureBoostMode+0x11c>
 8003dd8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003ddc:	d83c      	bhi.n	8003e58 <ADC_ConfigureBoostMode+0x148>
 8003dde:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003de2:	d01a      	beq.n	8003e1a <ADC_ConfigureBoostMode+0x10a>
 8003de4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003de8:	d836      	bhi.n	8003e58 <ADC_ConfigureBoostMode+0x148>
 8003dea:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003dee:	d014      	beq.n	8003e1a <ADC_ConfigureBoostMode+0x10a>
 8003df0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003df4:	d830      	bhi.n	8003e58 <ADC_ConfigureBoostMode+0x148>
 8003df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dfa:	d00e      	beq.n	8003e1a <ADC_ConfigureBoostMode+0x10a>
 8003dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e00:	d82a      	bhi.n	8003e58 <ADC_ConfigureBoostMode+0x148>
 8003e02:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e06:	d008      	beq.n	8003e1a <ADC_ConfigureBoostMode+0x10a>
 8003e08:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e0c:	d824      	bhi.n	8003e58 <ADC_ConfigureBoostMode+0x148>
 8003e0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e12:	d002      	beq.n	8003e1a <ADC_ConfigureBoostMode+0x10a>
 8003e14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e18:	d11e      	bne.n	8003e58 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	0c9b      	lsrs	r3, r3, #18
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e28:	60fb      	str	r3, [r7, #12]
        break;
 8003e2a:	e016      	b.n	8003e5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	091b      	lsrs	r3, r3, #4
 8003e30:	60fb      	str	r3, [r7, #12]
        break;
 8003e32:	e012      	b.n	8003e5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	60fb      	str	r3, [r7, #12]
        break;
 8003e3a:	e00e      	b.n	8003e5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	099b      	lsrs	r3, r3, #6
 8003e40:	60fb      	str	r3, [r7, #12]
        break;
 8003e42:	e00a      	b.n	8003e5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	09db      	lsrs	r3, r3, #7
 8003e48:	60fb      	str	r3, [r7, #12]
        break;
 8003e4a:	e006      	b.n	8003e5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	0a1b      	lsrs	r3, r3, #8
 8003e50:	60fb      	str	r3, [r7, #12]
        break;
 8003e52:	e002      	b.n	8003e5a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003e54:	bf00      	nop
 8003e56:	e000      	b.n	8003e5a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003e58:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003e5a:	f7ff f8a5 	bl	8002fa8 <HAL_GetREVID>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d815      	bhi.n	8003e94 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4a2b      	ldr	r2, [pc, #172]	; (8003f18 <ADC_ConfigureBoostMode+0x208>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d908      	bls.n	8003e82 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e7e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e80:	e03e      	b.n	8003f00 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e90:	609a      	str	r2, [r3, #8]
}
 8003e92:	e035      	b.n	8003f00 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4a1f      	ldr	r2, [pc, #124]	; (8003f1c <ADC_ConfigureBoostMode+0x20c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d808      	bhi.n	8003eb4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003eb0:	609a      	str	r2, [r3, #8]
}
 8003eb2:	e025      	b.n	8003f00 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4a1a      	ldr	r2, [pc, #104]	; (8003f20 <ADC_ConfigureBoostMode+0x210>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d80a      	bhi.n	8003ed2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ece:	609a      	str	r2, [r3, #8]
}
 8003ed0:	e016      	b.n	8003f00 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4a13      	ldr	r2, [pc, #76]	; (8003f24 <ADC_ConfigureBoostMode+0x214>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d80a      	bhi.n	8003ef0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eec:	609a      	str	r2, [r3, #8]
}
 8003eee:	e007      	b.n	8003f00 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003efe:	609a      	str	r2, [r3, #8]
}
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40022000 	.word	0x40022000
 8003f0c:	40022100 	.word	0x40022100
 8003f10:	40022300 	.word	0x40022300
 8003f14:	58026300 	.word	0x58026300
 8003f18:	01312d00 	.word	0x01312d00
 8003f1c:	005f5e10 	.word	0x005f5e10
 8003f20:	00bebc20 	.word	0x00bebc20
 8003f24:	017d7840 	.word	0x017d7840

08003f28 <LL_ADC_IsEnabled>:
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <LL_ADC_IsEnabled+0x18>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <LL_ADC_IsEnabled+0x1a>
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <LL_ADC_REG_IsConversionOngoing>:
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d101      	bne.n	8003f66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f74:	b590      	push	{r4, r7, lr}
 8003f76:	b09f      	sub	sp, #124	; 0x7c
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e0be      	b.n	8004110 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a5c      	ldr	r2, [pc, #368]	; (8004118 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d102      	bne.n	8003fb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003fac:	4b5b      	ldr	r3, [pc, #364]	; (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fae:	60bb      	str	r3, [r7, #8]
 8003fb0:	e001      	b.n	8003fb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10b      	bne.n	8003fd4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc0:	f043 0220 	orr.w	r2, r3, #32
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e09d      	b.n	8004110 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff ffb9 	bl	8003f4e <LL_ADC_REG_IsConversionOngoing>
 8003fdc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff ffb3 	bl	8003f4e <LL_ADC_REG_IsConversionOngoing>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d17f      	bne.n	80040ee <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d17c      	bne.n	80040ee <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a47      	ldr	r2, [pc, #284]	; (8004118 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d004      	beq.n	8004008 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a46      	ldr	r2, [pc, #280]	; (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d101      	bne.n	800400c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004008:	4b45      	ldr	r3, [pc, #276]	; (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800400a:	e000      	b.n	800400e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800400c:	4b45      	ldr	r3, [pc, #276]	; (8004124 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800400e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d039      	beq.n	800408c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	431a      	orrs	r2, r3
 8004026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004028:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a3a      	ldr	r2, [pc, #232]	; (8004118 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d004      	beq.n	800403e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a38      	ldr	r2, [pc, #224]	; (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d10e      	bne.n	800405c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800403e:	4836      	ldr	r0, [pc, #216]	; (8004118 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004040:	f7ff ff72 	bl	8003f28 <LL_ADC_IsEnabled>
 8004044:	4604      	mov	r4, r0
 8004046:	4835      	ldr	r0, [pc, #212]	; (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004048:	f7ff ff6e 	bl	8003f28 <LL_ADC_IsEnabled>
 800404c:	4603      	mov	r3, r0
 800404e:	4323      	orrs	r3, r4
 8004050:	2b00      	cmp	r3, #0
 8004052:	bf0c      	ite	eq
 8004054:	2301      	moveq	r3, #1
 8004056:	2300      	movne	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	e008      	b.n	800406e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800405c:	4832      	ldr	r0, [pc, #200]	; (8004128 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800405e:	f7ff ff63 	bl	8003f28 <LL_ADC_IsEnabled>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf0c      	ite	eq
 8004068:	2301      	moveq	r3, #1
 800406a:	2300      	movne	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d047      	beq.n	8004102 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	4b2d      	ldr	r3, [pc, #180]	; (800412c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004078:	4013      	ands	r3, r2
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	6811      	ldr	r1, [r2, #0]
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	6892      	ldr	r2, [r2, #8]
 8004082:	430a      	orrs	r2, r1
 8004084:	431a      	orrs	r2, r3
 8004086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004088:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800408a:	e03a      	b.n	8004102 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800408c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004096:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1e      	ldr	r2, [pc, #120]	; (8004118 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d004      	beq.n	80040ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1d      	ldr	r2, [pc, #116]	; (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d10e      	bne.n	80040ca <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80040ac:	481a      	ldr	r0, [pc, #104]	; (8004118 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040ae:	f7ff ff3b 	bl	8003f28 <LL_ADC_IsEnabled>
 80040b2:	4604      	mov	r4, r0
 80040b4:	4819      	ldr	r0, [pc, #100]	; (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040b6:	f7ff ff37 	bl	8003f28 <LL_ADC_IsEnabled>
 80040ba:	4603      	mov	r3, r0
 80040bc:	4323      	orrs	r3, r4
 80040be:	2b00      	cmp	r3, #0
 80040c0:	bf0c      	ite	eq
 80040c2:	2301      	moveq	r3, #1
 80040c4:	2300      	movne	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	e008      	b.n	80040dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80040ca:	4817      	ldr	r0, [pc, #92]	; (8004128 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80040cc:	f7ff ff2c 	bl	8003f28 <LL_ADC_IsEnabled>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	bf0c      	ite	eq
 80040d6:	2301      	moveq	r3, #1
 80040d8:	2300      	movne	r3, #0
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d010      	beq.n	8004102 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80040e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	4b11      	ldr	r3, [pc, #68]	; (800412c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040ea:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040ec:	e009      	b.n	8004102 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f2:	f043 0220 	orr.w	r2, r3, #32
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004100:	e000      	b.n	8004104 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004102:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800410c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004110:	4618      	mov	r0, r3
 8004112:	377c      	adds	r7, #124	; 0x7c
 8004114:	46bd      	mov	sp, r7
 8004116:	bd90      	pop	{r4, r7, pc}
 8004118:	40022000 	.word	0x40022000
 800411c:	40022100 	.word	0x40022100
 8004120:	40022300 	.word	0x40022300
 8004124:	58026300 	.word	0x58026300
 8004128:	58026000 	.word	0x58026000
 800412c:	fffff0e0 	.word	0xfffff0e0

08004130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <__NVIC_SetPriorityGrouping+0x40>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800414c:	4013      	ands	r3, r2
 800414e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <__NVIC_SetPriorityGrouping+0x44>)
 800415a:	4313      	orrs	r3, r2
 800415c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800415e:	4a04      	ldr	r2, [pc, #16]	; (8004170 <__NVIC_SetPriorityGrouping+0x40>)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	60d3      	str	r3, [r2, #12]
}
 8004164:	bf00      	nop
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	e000ed00 	.word	0xe000ed00
 8004174:	05fa0000 	.word	0x05fa0000

08004178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800417c:	4b04      	ldr	r3, [pc, #16]	; (8004190 <__NVIC_GetPriorityGrouping+0x18>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	0a1b      	lsrs	r3, r3, #8
 8004182:	f003 0307 	and.w	r3, r3, #7
}
 8004186:	4618      	mov	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	e000ed00 	.word	0xe000ed00

08004194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800419e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	db0b      	blt.n	80041be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	f003 021f 	and.w	r2, r3, #31
 80041ac:	4907      	ldr	r1, [pc, #28]	; (80041cc <__NVIC_EnableIRQ+0x38>)
 80041ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	2001      	movs	r0, #1
 80041b6:	fa00 f202 	lsl.w	r2, r0, r2
 80041ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	e000e100 	.word	0xe000e100

080041d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	6039      	str	r1, [r7, #0]
 80041da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	db0a      	blt.n	80041fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	490c      	ldr	r1, [pc, #48]	; (800421c <__NVIC_SetPriority+0x4c>)
 80041ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041ee:	0112      	lsls	r2, r2, #4
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	440b      	add	r3, r1
 80041f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041f8:	e00a      	b.n	8004210 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	4908      	ldr	r1, [pc, #32]	; (8004220 <__NVIC_SetPriority+0x50>)
 8004200:	88fb      	ldrh	r3, [r7, #6]
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	3b04      	subs	r3, #4
 8004208:	0112      	lsls	r2, r2, #4
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	440b      	add	r3, r1
 800420e:	761a      	strb	r2, [r3, #24]
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	e000e100 	.word	0xe000e100
 8004220:	e000ed00 	.word	0xe000ed00

08004224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004224:	b480      	push	{r7}
 8004226:	b089      	sub	sp, #36	; 0x24
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f1c3 0307 	rsb	r3, r3, #7
 800423e:	2b04      	cmp	r3, #4
 8004240:	bf28      	it	cs
 8004242:	2304      	movcs	r3, #4
 8004244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	3304      	adds	r3, #4
 800424a:	2b06      	cmp	r3, #6
 800424c:	d902      	bls.n	8004254 <NVIC_EncodePriority+0x30>
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3b03      	subs	r3, #3
 8004252:	e000      	b.n	8004256 <NVIC_EncodePriority+0x32>
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004258:	f04f 32ff 	mov.w	r2, #4294967295
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43da      	mvns	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	401a      	ands	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800426c:	f04f 31ff 	mov.w	r1, #4294967295
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	fa01 f303 	lsl.w	r3, r1, r3
 8004276:	43d9      	mvns	r1, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800427c:	4313      	orrs	r3, r2
         );
}
 800427e:	4618      	mov	r0, r3
 8004280:	3724      	adds	r7, #36	; 0x24
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3b01      	subs	r3, #1
 8004298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800429c:	d301      	bcc.n	80042a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800429e:	2301      	movs	r3, #1
 80042a0:	e00f      	b.n	80042c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042a2:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <SysTick_Config+0x40>)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042aa:	210f      	movs	r1, #15
 80042ac:	f04f 30ff 	mov.w	r0, #4294967295
 80042b0:	f7ff ff8e 	bl	80041d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <SysTick_Config+0x40>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042ba:	4b04      	ldr	r3, [pc, #16]	; (80042cc <SysTick_Config+0x40>)
 80042bc:	2207      	movs	r2, #7
 80042be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	e000e010 	.word	0xe000e010

080042d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff ff29 	bl	8004130 <__NVIC_SetPriorityGrouping>
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b086      	sub	sp, #24
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	4603      	mov	r3, r0
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042f4:	f7ff ff40 	bl	8004178 <__NVIC_GetPriorityGrouping>
 80042f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	6978      	ldr	r0, [r7, #20]
 8004300:	f7ff ff90 	bl	8004224 <NVIC_EncodePriority>
 8004304:	4602      	mov	r2, r0
 8004306:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800430a:	4611      	mov	r1, r2
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff ff5f 	bl	80041d0 <__NVIC_SetPriority>
}
 8004312:	bf00      	nop
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b082      	sub	sp, #8
 800431e:	af00      	add	r7, sp, #0
 8004320:	4603      	mov	r3, r0
 8004322:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff ff33 	bl	8004194 <__NVIC_EnableIRQ>
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff ffa4 	bl	800428c <SysTick_Config>
 8004344:	4603      	mov	r3, r0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004358:	f7fe fdf6 	bl	8002f48 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e2dc      	b.n	8004922 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d008      	beq.n	8004386 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2280      	movs	r2, #128	; 0x80
 8004378:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e2cd      	b.n	8004922 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a76      	ldr	r2, [pc, #472]	; (8004564 <HAL_DMA_Abort+0x214>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d04a      	beq.n	8004426 <HAL_DMA_Abort+0xd6>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a74      	ldr	r2, [pc, #464]	; (8004568 <HAL_DMA_Abort+0x218>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d045      	beq.n	8004426 <HAL_DMA_Abort+0xd6>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a73      	ldr	r2, [pc, #460]	; (800456c <HAL_DMA_Abort+0x21c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d040      	beq.n	8004426 <HAL_DMA_Abort+0xd6>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a71      	ldr	r2, [pc, #452]	; (8004570 <HAL_DMA_Abort+0x220>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d03b      	beq.n	8004426 <HAL_DMA_Abort+0xd6>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a70      	ldr	r2, [pc, #448]	; (8004574 <HAL_DMA_Abort+0x224>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d036      	beq.n	8004426 <HAL_DMA_Abort+0xd6>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a6e      	ldr	r2, [pc, #440]	; (8004578 <HAL_DMA_Abort+0x228>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d031      	beq.n	8004426 <HAL_DMA_Abort+0xd6>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a6d      	ldr	r2, [pc, #436]	; (800457c <HAL_DMA_Abort+0x22c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d02c      	beq.n	8004426 <HAL_DMA_Abort+0xd6>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a6b      	ldr	r2, [pc, #428]	; (8004580 <HAL_DMA_Abort+0x230>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d027      	beq.n	8004426 <HAL_DMA_Abort+0xd6>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a6a      	ldr	r2, [pc, #424]	; (8004584 <HAL_DMA_Abort+0x234>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d022      	beq.n	8004426 <HAL_DMA_Abort+0xd6>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a68      	ldr	r2, [pc, #416]	; (8004588 <HAL_DMA_Abort+0x238>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d01d      	beq.n	8004426 <HAL_DMA_Abort+0xd6>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a67      	ldr	r2, [pc, #412]	; (800458c <HAL_DMA_Abort+0x23c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d018      	beq.n	8004426 <HAL_DMA_Abort+0xd6>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a65      	ldr	r2, [pc, #404]	; (8004590 <HAL_DMA_Abort+0x240>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d013      	beq.n	8004426 <HAL_DMA_Abort+0xd6>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a64      	ldr	r2, [pc, #400]	; (8004594 <HAL_DMA_Abort+0x244>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00e      	beq.n	8004426 <HAL_DMA_Abort+0xd6>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a62      	ldr	r2, [pc, #392]	; (8004598 <HAL_DMA_Abort+0x248>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d009      	beq.n	8004426 <HAL_DMA_Abort+0xd6>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a61      	ldr	r2, [pc, #388]	; (800459c <HAL_DMA_Abort+0x24c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d004      	beq.n	8004426 <HAL_DMA_Abort+0xd6>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a5f      	ldr	r2, [pc, #380]	; (80045a0 <HAL_DMA_Abort+0x250>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d101      	bne.n	800442a <HAL_DMA_Abort+0xda>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <HAL_DMA_Abort+0xdc>
 800442a:	2300      	movs	r3, #0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d013      	beq.n	8004458 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 021e 	bic.w	r2, r2, #30
 800443e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695a      	ldr	r2, [r3, #20]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800444e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	e00a      	b.n	800446e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 020e 	bic.w	r2, r2, #14
 8004466:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a3c      	ldr	r2, [pc, #240]	; (8004564 <HAL_DMA_Abort+0x214>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d072      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a3a      	ldr	r2, [pc, #232]	; (8004568 <HAL_DMA_Abort+0x218>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d06d      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a39      	ldr	r2, [pc, #228]	; (800456c <HAL_DMA_Abort+0x21c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d068      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a37      	ldr	r2, [pc, #220]	; (8004570 <HAL_DMA_Abort+0x220>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d063      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a36      	ldr	r2, [pc, #216]	; (8004574 <HAL_DMA_Abort+0x224>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d05e      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a34      	ldr	r2, [pc, #208]	; (8004578 <HAL_DMA_Abort+0x228>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d059      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a33      	ldr	r2, [pc, #204]	; (800457c <HAL_DMA_Abort+0x22c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d054      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a31      	ldr	r2, [pc, #196]	; (8004580 <HAL_DMA_Abort+0x230>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d04f      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a30      	ldr	r2, [pc, #192]	; (8004584 <HAL_DMA_Abort+0x234>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d04a      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a2e      	ldr	r2, [pc, #184]	; (8004588 <HAL_DMA_Abort+0x238>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d045      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a2d      	ldr	r2, [pc, #180]	; (800458c <HAL_DMA_Abort+0x23c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d040      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a2b      	ldr	r2, [pc, #172]	; (8004590 <HAL_DMA_Abort+0x240>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d03b      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a2a      	ldr	r2, [pc, #168]	; (8004594 <HAL_DMA_Abort+0x244>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d036      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a28      	ldr	r2, [pc, #160]	; (8004598 <HAL_DMA_Abort+0x248>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d031      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a27      	ldr	r2, [pc, #156]	; (800459c <HAL_DMA_Abort+0x24c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d02c      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a25      	ldr	r2, [pc, #148]	; (80045a0 <HAL_DMA_Abort+0x250>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d027      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a24      	ldr	r2, [pc, #144]	; (80045a4 <HAL_DMA_Abort+0x254>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d022      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a22      	ldr	r2, [pc, #136]	; (80045a8 <HAL_DMA_Abort+0x258>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01d      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a21      	ldr	r2, [pc, #132]	; (80045ac <HAL_DMA_Abort+0x25c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d018      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a1f      	ldr	r2, [pc, #124]	; (80045b0 <HAL_DMA_Abort+0x260>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1e      	ldr	r2, [pc, #120]	; (80045b4 <HAL_DMA_Abort+0x264>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00e      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a1c      	ldr	r2, [pc, #112]	; (80045b8 <HAL_DMA_Abort+0x268>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d009      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a1b      	ldr	r2, [pc, #108]	; (80045bc <HAL_DMA_Abort+0x26c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d004      	beq.n	800455e <HAL_DMA_Abort+0x20e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a19      	ldr	r2, [pc, #100]	; (80045c0 <HAL_DMA_Abort+0x270>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d132      	bne.n	80045c4 <HAL_DMA_Abort+0x274>
 800455e:	2301      	movs	r3, #1
 8004560:	e031      	b.n	80045c6 <HAL_DMA_Abort+0x276>
 8004562:	bf00      	nop
 8004564:	40020010 	.word	0x40020010
 8004568:	40020028 	.word	0x40020028
 800456c:	40020040 	.word	0x40020040
 8004570:	40020058 	.word	0x40020058
 8004574:	40020070 	.word	0x40020070
 8004578:	40020088 	.word	0x40020088
 800457c:	400200a0 	.word	0x400200a0
 8004580:	400200b8 	.word	0x400200b8
 8004584:	40020410 	.word	0x40020410
 8004588:	40020428 	.word	0x40020428
 800458c:	40020440 	.word	0x40020440
 8004590:	40020458 	.word	0x40020458
 8004594:	40020470 	.word	0x40020470
 8004598:	40020488 	.word	0x40020488
 800459c:	400204a0 	.word	0x400204a0
 80045a0:	400204b8 	.word	0x400204b8
 80045a4:	58025408 	.word	0x58025408
 80045a8:	5802541c 	.word	0x5802541c
 80045ac:	58025430 	.word	0x58025430
 80045b0:	58025444 	.word	0x58025444
 80045b4:	58025458 	.word	0x58025458
 80045b8:	5802546c 	.word	0x5802546c
 80045bc:	58025480 	.word	0x58025480
 80045c0:	58025494 	.word	0x58025494
 80045c4:	2300      	movs	r3, #0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a6d      	ldr	r2, [pc, #436]	; (8004794 <HAL_DMA_Abort+0x444>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d04a      	beq.n	800467a <HAL_DMA_Abort+0x32a>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a6b      	ldr	r2, [pc, #428]	; (8004798 <HAL_DMA_Abort+0x448>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d045      	beq.n	800467a <HAL_DMA_Abort+0x32a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a6a      	ldr	r2, [pc, #424]	; (800479c <HAL_DMA_Abort+0x44c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d040      	beq.n	800467a <HAL_DMA_Abort+0x32a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a68      	ldr	r2, [pc, #416]	; (80047a0 <HAL_DMA_Abort+0x450>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d03b      	beq.n	800467a <HAL_DMA_Abort+0x32a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a67      	ldr	r2, [pc, #412]	; (80047a4 <HAL_DMA_Abort+0x454>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d036      	beq.n	800467a <HAL_DMA_Abort+0x32a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a65      	ldr	r2, [pc, #404]	; (80047a8 <HAL_DMA_Abort+0x458>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d031      	beq.n	800467a <HAL_DMA_Abort+0x32a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a64      	ldr	r2, [pc, #400]	; (80047ac <HAL_DMA_Abort+0x45c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d02c      	beq.n	800467a <HAL_DMA_Abort+0x32a>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a62      	ldr	r2, [pc, #392]	; (80047b0 <HAL_DMA_Abort+0x460>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d027      	beq.n	800467a <HAL_DMA_Abort+0x32a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a61      	ldr	r2, [pc, #388]	; (80047b4 <HAL_DMA_Abort+0x464>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d022      	beq.n	800467a <HAL_DMA_Abort+0x32a>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a5f      	ldr	r2, [pc, #380]	; (80047b8 <HAL_DMA_Abort+0x468>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d01d      	beq.n	800467a <HAL_DMA_Abort+0x32a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a5e      	ldr	r2, [pc, #376]	; (80047bc <HAL_DMA_Abort+0x46c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d018      	beq.n	800467a <HAL_DMA_Abort+0x32a>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a5c      	ldr	r2, [pc, #368]	; (80047c0 <HAL_DMA_Abort+0x470>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d013      	beq.n	800467a <HAL_DMA_Abort+0x32a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a5b      	ldr	r2, [pc, #364]	; (80047c4 <HAL_DMA_Abort+0x474>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00e      	beq.n	800467a <HAL_DMA_Abort+0x32a>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a59      	ldr	r2, [pc, #356]	; (80047c8 <HAL_DMA_Abort+0x478>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d009      	beq.n	800467a <HAL_DMA_Abort+0x32a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a58      	ldr	r2, [pc, #352]	; (80047cc <HAL_DMA_Abort+0x47c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d004      	beq.n	800467a <HAL_DMA_Abort+0x32a>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a56      	ldr	r2, [pc, #344]	; (80047d0 <HAL_DMA_Abort+0x480>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d108      	bne.n	800468c <HAL_DMA_Abort+0x33c>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0201 	bic.w	r2, r2, #1
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	e007      	b.n	800469c <HAL_DMA_Abort+0x34c>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0201 	bic.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800469c:	e013      	b.n	80046c6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800469e:	f7fe fc53 	bl	8002f48 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b05      	cmp	r3, #5
 80046aa:	d90c      	bls.n	80046c6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2220      	movs	r2, #32
 80046b0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2203      	movs	r2, #3
 80046b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e12d      	b.n	8004922 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1e5      	bne.n	800469e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a2f      	ldr	r2, [pc, #188]	; (8004794 <HAL_DMA_Abort+0x444>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d04a      	beq.n	8004772 <HAL_DMA_Abort+0x422>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a2d      	ldr	r2, [pc, #180]	; (8004798 <HAL_DMA_Abort+0x448>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d045      	beq.n	8004772 <HAL_DMA_Abort+0x422>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a2c      	ldr	r2, [pc, #176]	; (800479c <HAL_DMA_Abort+0x44c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d040      	beq.n	8004772 <HAL_DMA_Abort+0x422>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a2a      	ldr	r2, [pc, #168]	; (80047a0 <HAL_DMA_Abort+0x450>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d03b      	beq.n	8004772 <HAL_DMA_Abort+0x422>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a29      	ldr	r2, [pc, #164]	; (80047a4 <HAL_DMA_Abort+0x454>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d036      	beq.n	8004772 <HAL_DMA_Abort+0x422>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a27      	ldr	r2, [pc, #156]	; (80047a8 <HAL_DMA_Abort+0x458>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d031      	beq.n	8004772 <HAL_DMA_Abort+0x422>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a26      	ldr	r2, [pc, #152]	; (80047ac <HAL_DMA_Abort+0x45c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d02c      	beq.n	8004772 <HAL_DMA_Abort+0x422>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a24      	ldr	r2, [pc, #144]	; (80047b0 <HAL_DMA_Abort+0x460>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d027      	beq.n	8004772 <HAL_DMA_Abort+0x422>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a23      	ldr	r2, [pc, #140]	; (80047b4 <HAL_DMA_Abort+0x464>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d022      	beq.n	8004772 <HAL_DMA_Abort+0x422>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a21      	ldr	r2, [pc, #132]	; (80047b8 <HAL_DMA_Abort+0x468>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d01d      	beq.n	8004772 <HAL_DMA_Abort+0x422>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a20      	ldr	r2, [pc, #128]	; (80047bc <HAL_DMA_Abort+0x46c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d018      	beq.n	8004772 <HAL_DMA_Abort+0x422>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a1e      	ldr	r2, [pc, #120]	; (80047c0 <HAL_DMA_Abort+0x470>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d013      	beq.n	8004772 <HAL_DMA_Abort+0x422>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1d      	ldr	r2, [pc, #116]	; (80047c4 <HAL_DMA_Abort+0x474>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d00e      	beq.n	8004772 <HAL_DMA_Abort+0x422>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1b      	ldr	r2, [pc, #108]	; (80047c8 <HAL_DMA_Abort+0x478>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d009      	beq.n	8004772 <HAL_DMA_Abort+0x422>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1a      	ldr	r2, [pc, #104]	; (80047cc <HAL_DMA_Abort+0x47c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d004      	beq.n	8004772 <HAL_DMA_Abort+0x422>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a18      	ldr	r2, [pc, #96]	; (80047d0 <HAL_DMA_Abort+0x480>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d101      	bne.n	8004776 <HAL_DMA_Abort+0x426>
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <HAL_DMA_Abort+0x428>
 8004776:	2300      	movs	r3, #0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d02b      	beq.n	80047d4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004780:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004786:	f003 031f 	and.w	r3, r3, #31
 800478a:	223f      	movs	r2, #63	; 0x3f
 800478c:	409a      	lsls	r2, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	609a      	str	r2, [r3, #8]
 8004792:	e02a      	b.n	80047ea <HAL_DMA_Abort+0x49a>
 8004794:	40020010 	.word	0x40020010
 8004798:	40020028 	.word	0x40020028
 800479c:	40020040 	.word	0x40020040
 80047a0:	40020058 	.word	0x40020058
 80047a4:	40020070 	.word	0x40020070
 80047a8:	40020088 	.word	0x40020088
 80047ac:	400200a0 	.word	0x400200a0
 80047b0:	400200b8 	.word	0x400200b8
 80047b4:	40020410 	.word	0x40020410
 80047b8:	40020428 	.word	0x40020428
 80047bc:	40020440 	.word	0x40020440
 80047c0:	40020458 	.word	0x40020458
 80047c4:	40020470 	.word	0x40020470
 80047c8:	40020488 	.word	0x40020488
 80047cc:	400204a0 	.word	0x400204a0
 80047d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047de:	f003 031f 	and.w	r3, r3, #31
 80047e2:	2201      	movs	r2, #1
 80047e4:	409a      	lsls	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a4f      	ldr	r2, [pc, #316]	; (800492c <HAL_DMA_Abort+0x5dc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d072      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a4d      	ldr	r2, [pc, #308]	; (8004930 <HAL_DMA_Abort+0x5e0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d06d      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a4c      	ldr	r2, [pc, #304]	; (8004934 <HAL_DMA_Abort+0x5e4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d068      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a4a      	ldr	r2, [pc, #296]	; (8004938 <HAL_DMA_Abort+0x5e8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d063      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a49      	ldr	r2, [pc, #292]	; (800493c <HAL_DMA_Abort+0x5ec>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d05e      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a47      	ldr	r2, [pc, #284]	; (8004940 <HAL_DMA_Abort+0x5f0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d059      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a46      	ldr	r2, [pc, #280]	; (8004944 <HAL_DMA_Abort+0x5f4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d054      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a44      	ldr	r2, [pc, #272]	; (8004948 <HAL_DMA_Abort+0x5f8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d04f      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a43      	ldr	r2, [pc, #268]	; (800494c <HAL_DMA_Abort+0x5fc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d04a      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a41      	ldr	r2, [pc, #260]	; (8004950 <HAL_DMA_Abort+0x600>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d045      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a40      	ldr	r2, [pc, #256]	; (8004954 <HAL_DMA_Abort+0x604>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d040      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a3e      	ldr	r2, [pc, #248]	; (8004958 <HAL_DMA_Abort+0x608>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d03b      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a3d      	ldr	r2, [pc, #244]	; (800495c <HAL_DMA_Abort+0x60c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d036      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a3b      	ldr	r2, [pc, #236]	; (8004960 <HAL_DMA_Abort+0x610>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d031      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a3a      	ldr	r2, [pc, #232]	; (8004964 <HAL_DMA_Abort+0x614>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d02c      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a38      	ldr	r2, [pc, #224]	; (8004968 <HAL_DMA_Abort+0x618>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d027      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a37      	ldr	r2, [pc, #220]	; (800496c <HAL_DMA_Abort+0x61c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d022      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a35      	ldr	r2, [pc, #212]	; (8004970 <HAL_DMA_Abort+0x620>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d01d      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a34      	ldr	r2, [pc, #208]	; (8004974 <HAL_DMA_Abort+0x624>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d018      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a32      	ldr	r2, [pc, #200]	; (8004978 <HAL_DMA_Abort+0x628>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d013      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a31      	ldr	r2, [pc, #196]	; (800497c <HAL_DMA_Abort+0x62c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00e      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a2f      	ldr	r2, [pc, #188]	; (8004980 <HAL_DMA_Abort+0x630>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d009      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a2e      	ldr	r2, [pc, #184]	; (8004984 <HAL_DMA_Abort+0x634>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d004      	beq.n	80048da <HAL_DMA_Abort+0x58a>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a2c      	ldr	r2, [pc, #176]	; (8004988 <HAL_DMA_Abort+0x638>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d101      	bne.n	80048de <HAL_DMA_Abort+0x58e>
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <HAL_DMA_Abort+0x590>
 80048de:	2300      	movs	r3, #0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d015      	beq.n	8004910 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80048ec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00c      	beq.n	8004910 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004904:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800490e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40020010 	.word	0x40020010
 8004930:	40020028 	.word	0x40020028
 8004934:	40020040 	.word	0x40020040
 8004938:	40020058 	.word	0x40020058
 800493c:	40020070 	.word	0x40020070
 8004940:	40020088 	.word	0x40020088
 8004944:	400200a0 	.word	0x400200a0
 8004948:	400200b8 	.word	0x400200b8
 800494c:	40020410 	.word	0x40020410
 8004950:	40020428 	.word	0x40020428
 8004954:	40020440 	.word	0x40020440
 8004958:	40020458 	.word	0x40020458
 800495c:	40020470 	.word	0x40020470
 8004960:	40020488 	.word	0x40020488
 8004964:	400204a0 	.word	0x400204a0
 8004968:	400204b8 	.word	0x400204b8
 800496c:	58025408 	.word	0x58025408
 8004970:	5802541c 	.word	0x5802541c
 8004974:	58025430 	.word	0x58025430
 8004978:	58025444 	.word	0x58025444
 800497c:	58025458 	.word	0x58025458
 8004980:	5802546c 	.word	0x5802546c
 8004984:	58025480 	.word	0x58025480
 8004988:	58025494 	.word	0x58025494

0800498c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e237      	b.n	8004e0e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d004      	beq.n	80049b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2280      	movs	r2, #128	; 0x80
 80049ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e22c      	b.n	8004e0e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a5c      	ldr	r2, [pc, #368]	; (8004b2c <HAL_DMA_Abort_IT+0x1a0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d04a      	beq.n	8004a54 <HAL_DMA_Abort_IT+0xc8>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a5b      	ldr	r2, [pc, #364]	; (8004b30 <HAL_DMA_Abort_IT+0x1a4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d045      	beq.n	8004a54 <HAL_DMA_Abort_IT+0xc8>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a59      	ldr	r2, [pc, #356]	; (8004b34 <HAL_DMA_Abort_IT+0x1a8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d040      	beq.n	8004a54 <HAL_DMA_Abort_IT+0xc8>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a58      	ldr	r2, [pc, #352]	; (8004b38 <HAL_DMA_Abort_IT+0x1ac>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d03b      	beq.n	8004a54 <HAL_DMA_Abort_IT+0xc8>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a56      	ldr	r2, [pc, #344]	; (8004b3c <HAL_DMA_Abort_IT+0x1b0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d036      	beq.n	8004a54 <HAL_DMA_Abort_IT+0xc8>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a55      	ldr	r2, [pc, #340]	; (8004b40 <HAL_DMA_Abort_IT+0x1b4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d031      	beq.n	8004a54 <HAL_DMA_Abort_IT+0xc8>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a53      	ldr	r2, [pc, #332]	; (8004b44 <HAL_DMA_Abort_IT+0x1b8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d02c      	beq.n	8004a54 <HAL_DMA_Abort_IT+0xc8>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a52      	ldr	r2, [pc, #328]	; (8004b48 <HAL_DMA_Abort_IT+0x1bc>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d027      	beq.n	8004a54 <HAL_DMA_Abort_IT+0xc8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a50      	ldr	r2, [pc, #320]	; (8004b4c <HAL_DMA_Abort_IT+0x1c0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d022      	beq.n	8004a54 <HAL_DMA_Abort_IT+0xc8>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a4f      	ldr	r2, [pc, #316]	; (8004b50 <HAL_DMA_Abort_IT+0x1c4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d01d      	beq.n	8004a54 <HAL_DMA_Abort_IT+0xc8>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a4d      	ldr	r2, [pc, #308]	; (8004b54 <HAL_DMA_Abort_IT+0x1c8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d018      	beq.n	8004a54 <HAL_DMA_Abort_IT+0xc8>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a4c      	ldr	r2, [pc, #304]	; (8004b58 <HAL_DMA_Abort_IT+0x1cc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d013      	beq.n	8004a54 <HAL_DMA_Abort_IT+0xc8>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a4a      	ldr	r2, [pc, #296]	; (8004b5c <HAL_DMA_Abort_IT+0x1d0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00e      	beq.n	8004a54 <HAL_DMA_Abort_IT+0xc8>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a49      	ldr	r2, [pc, #292]	; (8004b60 <HAL_DMA_Abort_IT+0x1d4>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d009      	beq.n	8004a54 <HAL_DMA_Abort_IT+0xc8>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a47      	ldr	r2, [pc, #284]	; (8004b64 <HAL_DMA_Abort_IT+0x1d8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d004      	beq.n	8004a54 <HAL_DMA_Abort_IT+0xc8>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a46      	ldr	r2, [pc, #280]	; (8004b68 <HAL_DMA_Abort_IT+0x1dc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d101      	bne.n	8004a58 <HAL_DMA_Abort_IT+0xcc>
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <HAL_DMA_Abort_IT+0xce>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 8086 	beq.w	8004b6c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2204      	movs	r2, #4
 8004a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a2f      	ldr	r2, [pc, #188]	; (8004b2c <HAL_DMA_Abort_IT+0x1a0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d04a      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x17c>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a2e      	ldr	r2, [pc, #184]	; (8004b30 <HAL_DMA_Abort_IT+0x1a4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d045      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x17c>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a2c      	ldr	r2, [pc, #176]	; (8004b34 <HAL_DMA_Abort_IT+0x1a8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d040      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x17c>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a2b      	ldr	r2, [pc, #172]	; (8004b38 <HAL_DMA_Abort_IT+0x1ac>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d03b      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x17c>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a29      	ldr	r2, [pc, #164]	; (8004b3c <HAL_DMA_Abort_IT+0x1b0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d036      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x17c>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a28      	ldr	r2, [pc, #160]	; (8004b40 <HAL_DMA_Abort_IT+0x1b4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d031      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x17c>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a26      	ldr	r2, [pc, #152]	; (8004b44 <HAL_DMA_Abort_IT+0x1b8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d02c      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x17c>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a25      	ldr	r2, [pc, #148]	; (8004b48 <HAL_DMA_Abort_IT+0x1bc>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d027      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x17c>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a23      	ldr	r2, [pc, #140]	; (8004b4c <HAL_DMA_Abort_IT+0x1c0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d022      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x17c>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a22      	ldr	r2, [pc, #136]	; (8004b50 <HAL_DMA_Abort_IT+0x1c4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d01d      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x17c>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a20      	ldr	r2, [pc, #128]	; (8004b54 <HAL_DMA_Abort_IT+0x1c8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d018      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x17c>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1f      	ldr	r2, [pc, #124]	; (8004b58 <HAL_DMA_Abort_IT+0x1cc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d013      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x17c>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a1d      	ldr	r2, [pc, #116]	; (8004b5c <HAL_DMA_Abort_IT+0x1d0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00e      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x17c>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a1c      	ldr	r2, [pc, #112]	; (8004b60 <HAL_DMA_Abort_IT+0x1d4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d009      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x17c>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a1a      	ldr	r2, [pc, #104]	; (8004b64 <HAL_DMA_Abort_IT+0x1d8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d004      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x17c>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a19      	ldr	r2, [pc, #100]	; (8004b68 <HAL_DMA_Abort_IT+0x1dc>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d108      	bne.n	8004b1a <HAL_DMA_Abort_IT+0x18e>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0201 	bic.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	e178      	b.n	8004e0c <HAL_DMA_Abort_IT+0x480>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	e16f      	b.n	8004e0c <HAL_DMA_Abort_IT+0x480>
 8004b2c:	40020010 	.word	0x40020010
 8004b30:	40020028 	.word	0x40020028
 8004b34:	40020040 	.word	0x40020040
 8004b38:	40020058 	.word	0x40020058
 8004b3c:	40020070 	.word	0x40020070
 8004b40:	40020088 	.word	0x40020088
 8004b44:	400200a0 	.word	0x400200a0
 8004b48:	400200b8 	.word	0x400200b8
 8004b4c:	40020410 	.word	0x40020410
 8004b50:	40020428 	.word	0x40020428
 8004b54:	40020440 	.word	0x40020440
 8004b58:	40020458 	.word	0x40020458
 8004b5c:	40020470 	.word	0x40020470
 8004b60:	40020488 	.word	0x40020488
 8004b64:	400204a0 	.word	0x400204a0
 8004b68:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 020e 	bic.w	r2, r2, #14
 8004b7a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a6c      	ldr	r2, [pc, #432]	; (8004d34 <HAL_DMA_Abort_IT+0x3a8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d04a      	beq.n	8004c1c <HAL_DMA_Abort_IT+0x290>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a6b      	ldr	r2, [pc, #428]	; (8004d38 <HAL_DMA_Abort_IT+0x3ac>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d045      	beq.n	8004c1c <HAL_DMA_Abort_IT+0x290>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a69      	ldr	r2, [pc, #420]	; (8004d3c <HAL_DMA_Abort_IT+0x3b0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d040      	beq.n	8004c1c <HAL_DMA_Abort_IT+0x290>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a68      	ldr	r2, [pc, #416]	; (8004d40 <HAL_DMA_Abort_IT+0x3b4>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d03b      	beq.n	8004c1c <HAL_DMA_Abort_IT+0x290>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a66      	ldr	r2, [pc, #408]	; (8004d44 <HAL_DMA_Abort_IT+0x3b8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d036      	beq.n	8004c1c <HAL_DMA_Abort_IT+0x290>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a65      	ldr	r2, [pc, #404]	; (8004d48 <HAL_DMA_Abort_IT+0x3bc>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d031      	beq.n	8004c1c <HAL_DMA_Abort_IT+0x290>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a63      	ldr	r2, [pc, #396]	; (8004d4c <HAL_DMA_Abort_IT+0x3c0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d02c      	beq.n	8004c1c <HAL_DMA_Abort_IT+0x290>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a62      	ldr	r2, [pc, #392]	; (8004d50 <HAL_DMA_Abort_IT+0x3c4>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d027      	beq.n	8004c1c <HAL_DMA_Abort_IT+0x290>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a60      	ldr	r2, [pc, #384]	; (8004d54 <HAL_DMA_Abort_IT+0x3c8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d022      	beq.n	8004c1c <HAL_DMA_Abort_IT+0x290>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a5f      	ldr	r2, [pc, #380]	; (8004d58 <HAL_DMA_Abort_IT+0x3cc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d01d      	beq.n	8004c1c <HAL_DMA_Abort_IT+0x290>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a5d      	ldr	r2, [pc, #372]	; (8004d5c <HAL_DMA_Abort_IT+0x3d0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d018      	beq.n	8004c1c <HAL_DMA_Abort_IT+0x290>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a5c      	ldr	r2, [pc, #368]	; (8004d60 <HAL_DMA_Abort_IT+0x3d4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d013      	beq.n	8004c1c <HAL_DMA_Abort_IT+0x290>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a5a      	ldr	r2, [pc, #360]	; (8004d64 <HAL_DMA_Abort_IT+0x3d8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00e      	beq.n	8004c1c <HAL_DMA_Abort_IT+0x290>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a59      	ldr	r2, [pc, #356]	; (8004d68 <HAL_DMA_Abort_IT+0x3dc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d009      	beq.n	8004c1c <HAL_DMA_Abort_IT+0x290>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a57      	ldr	r2, [pc, #348]	; (8004d6c <HAL_DMA_Abort_IT+0x3e0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d004      	beq.n	8004c1c <HAL_DMA_Abort_IT+0x290>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a56      	ldr	r2, [pc, #344]	; (8004d70 <HAL_DMA_Abort_IT+0x3e4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d108      	bne.n	8004c2e <HAL_DMA_Abort_IT+0x2a2>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0201 	bic.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	e007      	b.n	8004c3e <HAL_DMA_Abort_IT+0x2b2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0201 	bic.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a3c      	ldr	r2, [pc, #240]	; (8004d34 <HAL_DMA_Abort_IT+0x3a8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d072      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a3a      	ldr	r2, [pc, #232]	; (8004d38 <HAL_DMA_Abort_IT+0x3ac>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d06d      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a39      	ldr	r2, [pc, #228]	; (8004d3c <HAL_DMA_Abort_IT+0x3b0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d068      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a37      	ldr	r2, [pc, #220]	; (8004d40 <HAL_DMA_Abort_IT+0x3b4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d063      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a36      	ldr	r2, [pc, #216]	; (8004d44 <HAL_DMA_Abort_IT+0x3b8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d05e      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a34      	ldr	r2, [pc, #208]	; (8004d48 <HAL_DMA_Abort_IT+0x3bc>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d059      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a33      	ldr	r2, [pc, #204]	; (8004d4c <HAL_DMA_Abort_IT+0x3c0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d054      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a31      	ldr	r2, [pc, #196]	; (8004d50 <HAL_DMA_Abort_IT+0x3c4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d04f      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a30      	ldr	r2, [pc, #192]	; (8004d54 <HAL_DMA_Abort_IT+0x3c8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d04a      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a2e      	ldr	r2, [pc, #184]	; (8004d58 <HAL_DMA_Abort_IT+0x3cc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d045      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a2d      	ldr	r2, [pc, #180]	; (8004d5c <HAL_DMA_Abort_IT+0x3d0>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d040      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a2b      	ldr	r2, [pc, #172]	; (8004d60 <HAL_DMA_Abort_IT+0x3d4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d03b      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a2a      	ldr	r2, [pc, #168]	; (8004d64 <HAL_DMA_Abort_IT+0x3d8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d036      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a28      	ldr	r2, [pc, #160]	; (8004d68 <HAL_DMA_Abort_IT+0x3dc>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d031      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a27      	ldr	r2, [pc, #156]	; (8004d6c <HAL_DMA_Abort_IT+0x3e0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d02c      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a25      	ldr	r2, [pc, #148]	; (8004d70 <HAL_DMA_Abort_IT+0x3e4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d027      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a24      	ldr	r2, [pc, #144]	; (8004d74 <HAL_DMA_Abort_IT+0x3e8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d022      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a22      	ldr	r2, [pc, #136]	; (8004d78 <HAL_DMA_Abort_IT+0x3ec>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d01d      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a21      	ldr	r2, [pc, #132]	; (8004d7c <HAL_DMA_Abort_IT+0x3f0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d018      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1f      	ldr	r2, [pc, #124]	; (8004d80 <HAL_DMA_Abort_IT+0x3f4>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a1e      	ldr	r2, [pc, #120]	; (8004d84 <HAL_DMA_Abort_IT+0x3f8>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00e      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a1c      	ldr	r2, [pc, #112]	; (8004d88 <HAL_DMA_Abort_IT+0x3fc>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d009      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1b      	ldr	r2, [pc, #108]	; (8004d8c <HAL_DMA_Abort_IT+0x400>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d004      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x3a2>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a19      	ldr	r2, [pc, #100]	; (8004d90 <HAL_DMA_Abort_IT+0x404>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d132      	bne.n	8004d94 <HAL_DMA_Abort_IT+0x408>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e031      	b.n	8004d96 <HAL_DMA_Abort_IT+0x40a>
 8004d32:	bf00      	nop
 8004d34:	40020010 	.word	0x40020010
 8004d38:	40020028 	.word	0x40020028
 8004d3c:	40020040 	.word	0x40020040
 8004d40:	40020058 	.word	0x40020058
 8004d44:	40020070 	.word	0x40020070
 8004d48:	40020088 	.word	0x40020088
 8004d4c:	400200a0 	.word	0x400200a0
 8004d50:	400200b8 	.word	0x400200b8
 8004d54:	40020410 	.word	0x40020410
 8004d58:	40020428 	.word	0x40020428
 8004d5c:	40020440 	.word	0x40020440
 8004d60:	40020458 	.word	0x40020458
 8004d64:	40020470 	.word	0x40020470
 8004d68:	40020488 	.word	0x40020488
 8004d6c:	400204a0 	.word	0x400204a0
 8004d70:	400204b8 	.word	0x400204b8
 8004d74:	58025408 	.word	0x58025408
 8004d78:	5802541c 	.word	0x5802541c
 8004d7c:	58025430 	.word	0x58025430
 8004d80:	58025444 	.word	0x58025444
 8004d84:	58025458 	.word	0x58025458
 8004d88:	5802546c 	.word	0x5802546c
 8004d8c:	58025480 	.word	0x58025480
 8004d90:	58025494 	.word	0x58025494
 8004d94:	2300      	movs	r3, #0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d028      	beq.n	8004dec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004da8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db4:	f003 031f 	and.w	r3, r3, #31
 8004db8:	2201      	movs	r2, #1
 8004dba:	409a      	lsls	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004dc8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00c      	beq.n	8004dec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004de0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004dea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop

08004e18 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e0cf      	b.n	8004fca <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d106      	bne.n	8004e42 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2223      	movs	r2, #35	; 0x23
 8004e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7fd f87d 	bl	8001f3c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e42:	4b64      	ldr	r3, [pc, #400]	; (8004fd4 <HAL_ETH_Init+0x1bc>)
 8004e44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e48:	4a62      	ldr	r2, [pc, #392]	; (8004fd4 <HAL_ETH_Init+0x1bc>)
 8004e4a:	f043 0302 	orr.w	r3, r3, #2
 8004e4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e52:	4b60      	ldr	r3, [pc, #384]	; (8004fd4 <HAL_ETH_Init+0x1bc>)
 8004e54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	60bb      	str	r3, [r7, #8]
 8004e5e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	7a1b      	ldrb	r3, [r3, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d103      	bne.n	8004e70 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004e68:	2000      	movs	r0, #0
 8004e6a:	f7fe f8a9 	bl	8002fc0 <HAL_SYSCFG_ETHInterfaceSelect>
 8004e6e:	e003      	b.n	8004e78 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004e70:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004e74:	f7fe f8a4 	bl	8002fc0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004e78:	4b57      	ldr	r3, [pc, #348]	; (8004fd8 <HAL_ETH_Init+0x1c0>)
 8004e7a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6812      	ldr	r2, [r2, #0]
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e94:	f7fe f858 	bl	8002f48 <HAL_GetTick>
 8004e98:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004e9a:	e011      	b.n	8004ec0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004e9c:	f7fe f854 	bl	8002f48 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004eaa:	d909      	bls.n	8004ec0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2204      	movs	r2, #4
 8004eb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	22e0      	movs	r2, #224	; 0xe0
 8004eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e084      	b.n	8004fca <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e4      	bne.n	8004e9c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f886 	bl	8004fe4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004ed8:	f002 fcb4 	bl	8007844 <HAL_RCC_GetHCLKFreq>
 8004edc:	4603      	mov	r3, r0
 8004ede:	4a3f      	ldr	r2, [pc, #252]	; (8004fdc <HAL_ETH_Init+0x1c4>)
 8004ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee4:	0c9a      	lsrs	r2, r3, #18
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3a01      	subs	r2, #1
 8004eec:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fa71 	bl	80053d8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004efe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004f02:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6812      	ldr	r2, [r2, #0]
 8004f0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f12:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d009      	beq.n	8004f36 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	22e0      	movs	r2, #224	; 0xe0
 8004f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e049      	b.n	8004fca <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f3e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004f42:	4b27      	ldr	r3, [pc, #156]	; (8004fe0 <HAL_ETH_Init+0x1c8>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6952      	ldr	r2, [r2, #20]
 8004f4a:	0051      	lsls	r1, r2, #1
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6812      	ldr	r2, [r2, #0]
 8004f50:	430b      	orrs	r3, r1
 8004f52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f56:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fad9 	bl	8005512 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 fb1f 	bl	80055a4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	3305      	adds	r3, #5
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	021a      	lsls	r2, r3, #8
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	3304      	adds	r3, #4
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	3303      	adds	r3, #3
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	061a      	lsls	r2, r3, #24
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	3302      	adds	r3, #2
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	041b      	lsls	r3, r3, #16
 8004f98:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004fa4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004fb2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004fb4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2210      	movs	r2, #16
 8004fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	58024400 	.word	0x58024400
 8004fd8:	58000400 	.word	0x58000400
 8004fdc:	431bde83 	.word	0x431bde83
 8004fe0:	ffff8001 	.word	0xffff8001

08004fe4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004ffe:	f002 fc21 	bl	8007844 <HAL_RCC_GetHCLKFreq>
 8005002:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	4a1e      	ldr	r2, [pc, #120]	; (8005080 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d908      	bls.n	800501e <HAL_ETH_SetMDIOClockRange+0x3a>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	4a1d      	ldr	r2, [pc, #116]	; (8005084 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d804      	bhi.n	800501e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	e027      	b.n	800506e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	4a18      	ldr	r2, [pc, #96]	; (8005084 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d908      	bls.n	8005038 <HAL_ETH_SetMDIOClockRange+0x54>
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	4a17      	ldr	r2, [pc, #92]	; (8005088 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d204      	bcs.n	8005038 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	e01a      	b.n	800506e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4a13      	ldr	r2, [pc, #76]	; (8005088 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d303      	bcc.n	8005048 <HAL_ETH_SetMDIOClockRange+0x64>
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4a12      	ldr	r2, [pc, #72]	; (800508c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d911      	bls.n	800506c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4a10      	ldr	r2, [pc, #64]	; (800508c <HAL_ETH_SetMDIOClockRange+0xa8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d908      	bls.n	8005062 <HAL_ETH_SetMDIOClockRange+0x7e>
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4a0f      	ldr	r2, [pc, #60]	; (8005090 <HAL_ETH_SetMDIOClockRange+0xac>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d804      	bhi.n	8005062 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	e005      	b.n	800506e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	e000      	b.n	800506e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800506c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005078:	bf00      	nop
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	01312cff 	.word	0x01312cff
 8005084:	02160ebf 	.word	0x02160ebf
 8005088:	03938700 	.word	0x03938700
 800508c:	05f5e0ff 	.word	0x05f5e0ff
 8005090:	08f0d17f 	.word	0x08f0d17f

08005094 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80050a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	791b      	ldrb	r3, [r3, #4]
 80050ac:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80050ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	7b1b      	ldrb	r3, [r3, #12]
 80050b4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80050b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	7b5b      	ldrb	r3, [r3, #13]
 80050bc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80050be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	7b9b      	ldrb	r3, [r3, #14]
 80050c4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80050c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	7bdb      	ldrb	r3, [r3, #15]
 80050cc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80050ce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	7c12      	ldrb	r2, [r2, #16]
 80050d4:	2a00      	cmp	r2, #0
 80050d6:	d102      	bne.n	80050de <ETH_SetMACConfig+0x4a>
 80050d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80050dc:	e000      	b.n	80050e0 <ETH_SetMACConfig+0x4c>
 80050de:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80050e0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	7c52      	ldrb	r2, [r2, #17]
 80050e6:	2a00      	cmp	r2, #0
 80050e8:	d102      	bne.n	80050f0 <ETH_SetMACConfig+0x5c>
 80050ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050ee:	e000      	b.n	80050f2 <ETH_SetMACConfig+0x5e>
 80050f0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80050f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	7c9b      	ldrb	r3, [r3, #18]
 80050f8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80050fa:	431a      	orrs	r2, r3
               macconf->Speed |
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005100:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005106:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	7f1b      	ldrb	r3, [r3, #28]
 800510c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800510e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	7f5b      	ldrb	r3, [r3, #29]
 8005114:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005116:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	7f92      	ldrb	r2, [r2, #30]
 800511c:	2a00      	cmp	r2, #0
 800511e:	d102      	bne.n	8005126 <ETH_SetMACConfig+0x92>
 8005120:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005124:	e000      	b.n	8005128 <ETH_SetMACConfig+0x94>
 8005126:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005128:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	7fdb      	ldrb	r3, [r3, #31]
 800512e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005130:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005138:	2a00      	cmp	r2, #0
 800513a:	d102      	bne.n	8005142 <ETH_SetMACConfig+0xae>
 800513c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005140:	e000      	b.n	8005144 <ETH_SetMACConfig+0xb0>
 8005142:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005144:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800514a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005152:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005154:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	4b56      	ldr	r3, [pc, #344]	; (80052c0 <ETH_SetMACConfig+0x22c>)
 8005166:	4013      	ands	r3, r2
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	68f9      	ldr	r1, [r7, #12]
 800516e:	430b      	orrs	r3, r1
 8005170:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005176:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800517e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005180:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005188:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800518a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005192:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005194:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800519c:	2a00      	cmp	r2, #0
 800519e:	d102      	bne.n	80051a6 <ETH_SetMACConfig+0x112>
 80051a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80051a4:	e000      	b.n	80051a8 <ETH_SetMACConfig+0x114>
 80051a6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80051a8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	4b42      	ldr	r3, [pc, #264]	; (80052c4 <ETH_SetMACConfig+0x230>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6812      	ldr	r2, [r2, #0]
 80051c0:	68f9      	ldr	r1, [r7, #12]
 80051c2:	430b      	orrs	r3, r1
 80051c4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051cc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	4b3a      	ldr	r3, [pc, #232]	; (80052c8 <ETH_SetMACConfig+0x234>)
 80051de:	4013      	ands	r3, r2
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6812      	ldr	r2, [r2, #0]
 80051e4:	68f9      	ldr	r1, [r7, #12]
 80051e6:	430b      	orrs	r3, r1
 80051e8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80051f0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80051f6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80051fe:	2a00      	cmp	r2, #0
 8005200:	d101      	bne.n	8005206 <ETH_SetMACConfig+0x172>
 8005202:	2280      	movs	r2, #128	; 0x80
 8005204:	e000      	b.n	8005208 <ETH_SetMACConfig+0x174>
 8005206:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005208:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005210:	4313      	orrs	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800521a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800521e:	4013      	ands	r3, r2
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6812      	ldr	r2, [r2, #0]
 8005224:	68f9      	ldr	r1, [r7, #12]
 8005226:	430b      	orrs	r3, r1
 8005228:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005230:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005238:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005246:	f023 0103 	bic.w	r1, r3, #3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	430a      	orrs	r2, r1
 8005252:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800525e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800527a:	2a00      	cmp	r2, #0
 800527c:	d101      	bne.n	8005282 <ETH_SetMACConfig+0x1ee>
 800527e:	2240      	movs	r2, #64	; 0x40
 8005280:	e000      	b.n	8005284 <ETH_SetMACConfig+0x1f0>
 8005282:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005284:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800528c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800528e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005296:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80052a4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80052b4:	bf00      	nop
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	00048083 	.word	0x00048083
 80052c4:	c0f88000 	.word	0xc0f88000
 80052c8:	fffffef0 	.word	0xfffffef0

080052cc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	4b38      	ldr	r3, [pc, #224]	; (80053c4 <ETH_SetDMAConfig+0xf8>)
 80052e2:	4013      	ands	r3, r2
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	6811      	ldr	r1, [r2, #0]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	430b      	orrs	r3, r1
 80052ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052f2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	791b      	ldrb	r3, [r3, #4]
 80052f8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80052fe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	7b1b      	ldrb	r3, [r3, #12]
 8005304:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	4b2c      	ldr	r3, [pc, #176]	; (80053c8 <ETH_SetDMAConfig+0xfc>)
 8005316:	4013      	ands	r3, r2
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6812      	ldr	r2, [r2, #0]
 800531c:	68f9      	ldr	r1, [r7, #12]
 800531e:	430b      	orrs	r3, r1
 8005320:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005324:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	7b5b      	ldrb	r3, [r3, #13]
 800532a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800533c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005340:	4b22      	ldr	r3, [pc, #136]	; (80053cc <ETH_SetDMAConfig+0x100>)
 8005342:	4013      	ands	r3, r2
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	68f9      	ldr	r1, [r7, #12]
 800534a:	430b      	orrs	r3, r1
 800534c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005350:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	7d1b      	ldrb	r3, [r3, #20]
 800535c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800535e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	7f5b      	ldrb	r3, [r3, #29]
 8005364:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005372:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005376:	4b16      	ldr	r3, [pc, #88]	; (80053d0 <ETH_SetDMAConfig+0x104>)
 8005378:	4013      	ands	r3, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6812      	ldr	r2, [r2, #0]
 800537e:	68f9      	ldr	r1, [r7, #12]
 8005380:	430b      	orrs	r3, r1
 8005382:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005386:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	7f1b      	ldrb	r3, [r3, #28]
 800538e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80053a4:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <ETH_SetDMAConfig+0x108>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6812      	ldr	r2, [r2, #0]
 80053ac:	68f9      	ldr	r1, [r7, #12]
 80053ae:	430b      	orrs	r3, r1
 80053b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053b4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80053b8:	bf00      	nop
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	ffff87fd 	.word	0xffff87fd
 80053c8:	ffff2ffe 	.word	0xffff2ffe
 80053cc:	fffec000 	.word	0xfffec000
 80053d0:	ffc0efef 	.word	0xffc0efef
 80053d4:	7fc0ffff 	.word	0x7fc0ffff

080053d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b0a4      	sub	sp, #144	; 0x90
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80053e0:	2301      	movs	r3, #1
 80053e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80053e6:	2300      	movs	r3, #0
 80053e8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80053ea:	2300      	movs	r3, #0
 80053ec:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80053f0:	2300      	movs	r3, #0
 80053f2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80053f6:	2301      	movs	r3, #1
 80053f8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80053fc:	2301      	movs	r3, #1
 80053fe:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005402:	2301      	movs	r3, #1
 8005404:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005408:	2300      	movs	r3, #0
 800540a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800540e:	2301      	movs	r3, #1
 8005410:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005418:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800541a:	2300      	movs	r3, #0
 800541c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005420:	2300      	movs	r3, #0
 8005422:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005424:	2300      	movs	r3, #0
 8005426:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800542a:	2300      	movs	r3, #0
 800542c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005430:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005434:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005436:	2300      	movs	r3, #0
 8005438:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800543c:	2300      	movs	r3, #0
 800543e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005440:	2301      	movs	r3, #1
 8005442:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005446:	2300      	movs	r3, #0
 8005448:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800544c:	2300      	movs	r3, #0
 800544e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005452:	2300      	movs	r3, #0
 8005454:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005456:	2300      	movs	r3, #0
 8005458:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800545a:	2300      	movs	r3, #0
 800545c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800545e:	2300      	movs	r3, #0
 8005460:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005464:	2300      	movs	r3, #0
 8005466:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800546a:	2301      	movs	r3, #1
 800546c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005470:	2320      	movs	r3, #32
 8005472:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005476:	2301      	movs	r3, #1
 8005478:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800547c:	2300      	movs	r3, #0
 800547e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005482:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005486:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005488:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800548c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800548e:	2300      	movs	r3, #0
 8005490:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005494:	2302      	movs	r3, #2
 8005496:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800549a:	2300      	movs	r3, #0
 800549c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80054a0:	2300      	movs	r3, #0
 80054a2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80054a6:	2300      	movs	r3, #0
 80054a8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80054b2:	2300      	movs	r3, #0
 80054b4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80054b6:	2301      	movs	r3, #1
 80054b8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80054bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054c0:	4619      	mov	r1, r3
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7ff fde6 	bl	8005094 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80054c8:	2301      	movs	r3, #1
 80054ca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80054cc:	2301      	movs	r3, #1
 80054ce:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80054d0:	2300      	movs	r3, #0
 80054d2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80054d4:	2300      	movs	r3, #0
 80054d6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80054da:	2300      	movs	r3, #0
 80054dc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80054de:	2300      	movs	r3, #0
 80054e0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80054e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80054e6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80054e8:	2300      	movs	r3, #0
 80054ea:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80054ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80054f0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80054f2:	2300      	movs	r3, #0
 80054f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80054f8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80054fe:	f107 0308 	add.w	r3, r7, #8
 8005502:	4619      	mov	r1, r3
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7ff fee1 	bl	80052cc <ETH_SetDMAConfig>
}
 800550a:	bf00      	nop
 800550c:	3790      	adds	r7, #144	; 0x90
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005512:	b480      	push	{r7}
 8005514:	b085      	sub	sp, #20
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	e01d      	b.n	800555c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68d9      	ldr	r1, [r3, #12]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4613      	mov	r3, r2
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	4413      	add	r3, r2
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	440b      	add	r3, r1
 8005530:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2200      	movs	r2, #0
 800553c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2200      	movs	r2, #0
 8005542:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2200      	movs	r2, #0
 8005548:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800554a:	68b9      	ldr	r1, [r7, #8]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	3206      	adds	r2, #6
 8005552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3301      	adds	r3, #1
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b03      	cmp	r3, #3
 8005560:	d9de      	bls.n	8005520 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005570:	461a      	mov	r2, r3
 8005572:	2303      	movs	r3, #3
 8005574:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005584:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005594:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005598:	bf00      	nop
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80055ac:	2300      	movs	r3, #0
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	e023      	b.n	80055fa <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6919      	ldr	r1, [r3, #16]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4613      	mov	r3, r2
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	4413      	add	r3, r2
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	440b      	add	r3, r1
 80055c2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2200      	movs	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2200      	movs	r2, #0
 80055ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2200      	movs	r2, #0
 80055d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2200      	movs	r2, #0
 80055da:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2200      	movs	r2, #0
 80055e0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2200      	movs	r2, #0
 80055e6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	3212      	adds	r2, #18
 80055f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	3301      	adds	r3, #1
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	d9d8      	bls.n	80055b2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005626:	461a      	mov	r2, r3
 8005628:	2303      	movs	r3, #3
 800562a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691a      	ldr	r2, [r3, #16]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800563a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800564e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005652:	bf00      	nop
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
	...

08005660 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b098      	sub	sp, #96	; 0x60
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005668:	4a84      	ldr	r2, [pc, #528]	; (800587c <HAL_FDCAN_Init+0x21c>)
 800566a:	f107 030c 	add.w	r3, r7, #12
 800566e:	4611      	mov	r1, r2
 8005670:	224c      	movs	r2, #76	; 0x4c
 8005672:	4618      	mov	r0, r3
 8005674:	f009 f968 	bl	800e948 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e1c6      	b.n	8005a10 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a7e      	ldr	r2, [pc, #504]	; (8005880 <HAL_FDCAN_Init+0x220>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d106      	bne.n	800569a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005694:	461a      	mov	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d106      	bne.n	80056b4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fc fd74 	bl	800219c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0210 	bic.w	r2, r2, #16
 80056c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056c4:	f7fd fc40 	bl	8002f48 <HAL_GetTick>
 80056c8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80056ca:	e014      	b.n	80056f6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80056cc:	f7fd fc3c 	bl	8002f48 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b0a      	cmp	r3, #10
 80056d8:	d90d      	bls.n	80056f6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056e0:	f043 0201 	orr.w	r2, r3, #1
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2203      	movs	r2, #3
 80056ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e18c      	b.n	8005a10 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b08      	cmp	r3, #8
 8005702:	d0e3      	beq.n	80056cc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005714:	f7fd fc18 	bl	8002f48 <HAL_GetTick>
 8005718:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800571a:	e014      	b.n	8005746 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800571c:	f7fd fc14 	bl	8002f48 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b0a      	cmp	r3, #10
 8005728:	d90d      	bls.n	8005746 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005730:	f043 0201 	orr.w	r2, r3, #1
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2203      	movs	r2, #3
 800573e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e164      	b.n	8005a10 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0e3      	beq.n	800571c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699a      	ldr	r2, [r3, #24]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0202 	orr.w	r2, r2, #2
 8005762:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	7c1b      	ldrb	r3, [r3, #16]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d108      	bne.n	800577e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800577a:	619a      	str	r2, [r3, #24]
 800577c:	e007      	b.n	800578e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	699a      	ldr	r2, [r3, #24]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800578c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	7c5b      	ldrb	r3, [r3, #17]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d108      	bne.n	80057a8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699a      	ldr	r2, [r3, #24]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057a4:	619a      	str	r2, [r3, #24]
 80057a6:	e007      	b.n	80057b8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699a      	ldr	r2, [r3, #24]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057b6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	7c9b      	ldrb	r3, [r3, #18]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d108      	bne.n	80057d2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057ce:	619a      	str	r2, [r3, #24]
 80057d0:	e007      	b.n	80057e2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699a      	ldr	r2, [r3, #24]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057e0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005806:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691a      	ldr	r2, [r3, #16]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0210 	bic.w	r2, r2, #16
 8005816:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d108      	bne.n	8005832 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0204 	orr.w	r2, r2, #4
 800582e:	619a      	str	r2, [r3, #24]
 8005830:	e030      	b.n	8005894 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d02c      	beq.n	8005894 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d020      	beq.n	8005884 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	699a      	ldr	r2, [r3, #24]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005850:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f042 0210 	orr.w	r2, r2, #16
 8005860:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	2b03      	cmp	r3, #3
 8005868:	d114      	bne.n	8005894 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	699a      	ldr	r2, [r3, #24]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f042 0220 	orr.w	r2, r2, #32
 8005878:	619a      	str	r2, [r3, #24]
 800587a:	e00b      	b.n	8005894 <HAL_FDCAN_Init+0x234>
 800587c:	0800f338 	.word	0x0800f338
 8005880:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699a      	ldr	r2, [r3, #24]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0220 	orr.w	r2, r2, #32
 8005892:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	3b01      	subs	r3, #1
 800589a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80058a4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80058ac:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80058bc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80058be:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058c8:	d115      	bne.n	80058f6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ce:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	3b01      	subs	r3, #1
 80058d6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80058d8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058de:	3b01      	subs	r3, #1
 80058e0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80058e2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	3b01      	subs	r3, #1
 80058ec:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80058f2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80058f4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800591c:	4413      	add	r3, r2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d011      	beq.n	8005946 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800592a:	f023 0107 	bic.w	r1, r3, #7
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	3360      	adds	r3, #96	; 0x60
 8005936:	443b      	add	r3, r7
 8005938:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d011      	beq.n	8005972 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005956:	f023 0107 	bic.w	r1, r3, #7
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	3360      	adds	r3, #96	; 0x60
 8005962:	443b      	add	r3, r7
 8005964:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005976:	2b00      	cmp	r3, #0
 8005978:	d012      	beq.n	80059a0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005982:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	3360      	adds	r3, #96	; 0x60
 800598e:	443b      	add	r3, r7
 8005990:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005994:	011a      	lsls	r2, r3, #4
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d012      	beq.n	80059ce <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80059b0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	3360      	adds	r3, #96	; 0x60
 80059bc:	443b      	add	r3, r7
 80059be:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80059c2:	021a      	lsls	r2, r3, #8
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a11      	ldr	r2, [pc, #68]	; (8005a18 <HAL_FDCAN_Init+0x3b8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d107      	bne.n	80059e8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f022 0203 	bic.w	r2, r2, #3
 80059e6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f80b 	bl	8005a1c <FDCAN_CalcultateRamBlockAddresses>
 8005a06:	4603      	mov	r3, r0
 8005a08:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005a0c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3760      	adds	r7, #96	; 0x60
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	4000a000 	.word	0x4000a000

08005a1c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a28:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005a32:	4ba7      	ldr	r3, [pc, #668]	; (8005cd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	0091      	lsls	r1, r2, #2
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6812      	ldr	r2, [r2, #0]
 8005a3e:	430b      	orrs	r3, r1
 8005a40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a4c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	041a      	lsls	r2, r3, #16
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	4413      	add	r3, r2
 8005a68:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a72:	4b97      	ldr	r3, [pc, #604]	; (8005cd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	0091      	lsls	r1, r2, #2
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6812      	ldr	r2, [r2, #0]
 8005a7e:	430b      	orrs	r3, r1
 8005a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a94:	041a      	lsls	r2, r3, #16
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005ab4:	4b86      	ldr	r3, [pc, #536]	; (8005cd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	0091      	lsls	r1, r2, #2
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6812      	ldr	r2, [r2, #0]
 8005ac0:	430b      	orrs	r3, r1
 8005ac2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ace:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	041a      	lsls	r2, r3, #16
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005aea:	fb02 f303 	mul.w	r3, r2, r3
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	4413      	add	r3, r2
 8005af2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005afc:	4b74      	ldr	r3, [pc, #464]	; (8005cd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005afe:	4013      	ands	r3, r2
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	0091      	lsls	r1, r2, #2
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	6812      	ldr	r2, [r2, #0]
 8005b08:	430b      	orrs	r3, r1
 8005b0a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b16:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b1e:	041a      	lsls	r2, r3, #16
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005b32:	fb02 f303 	mul.w	r3, r2, r3
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	4413      	add	r3, r2
 8005b3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005b44:	4b62      	ldr	r3, [pc, #392]	; (8005cd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	0091      	lsls	r1, r2, #2
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6812      	ldr	r2, [r2, #0]
 8005b50:	430b      	orrs	r3, r1
 8005b52:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005b5e:	fb02 f303 	mul.w	r3, r2, r3
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	4413      	add	r3, r2
 8005b66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005b70:	4b57      	ldr	r3, [pc, #348]	; (8005cd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	0091      	lsls	r1, r2, #2
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6812      	ldr	r2, [r2, #0]
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b8a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b92:	041a      	lsls	r2, r3, #16
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005bb2:	4b47      	ldr	r3, [pc, #284]	; (8005cd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	0091      	lsls	r1, r2, #2
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6812      	ldr	r2, [r2, #0]
 8005bbe:	430b      	orrs	r3, r1
 8005bc0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005bcc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd4:	041a      	lsls	r2, r3, #16
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005be8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bf0:	061a      	lsls	r2, r3, #24
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c00:	4b34      	ldr	r3, [pc, #208]	; (8005cd4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005c02:	4413      	add	r3, r2
 8005c04:	009a      	lsls	r2, r3, #2
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	441a      	add	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	441a      	add	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	6879      	ldr	r1, [r7, #4]
 8005c34:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005c36:	fb01 f303 	mul.w	r3, r1, r3
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	441a      	add	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005c4e:	fb01 f303 	mul.w	r3, r1, r3
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	441a      	add	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c62:	6879      	ldr	r1, [r7, #4]
 8005c64:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005c66:	fb01 f303 	mul.w	r3, r1, r3
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	441a      	add	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	441a      	add	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005c96:	fb01 f303 	mul.w	r3, r1, r3
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	441a      	add	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005cb2:	fb01 f303 	mul.w	r3, r1, r3
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	441a      	add	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc6:	4a04      	ldr	r2, [pc, #16]	; (8005cd8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d915      	bls.n	8005cf8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005ccc:	e006      	b.n	8005cdc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005cce:	bf00      	nop
 8005cd0:	ffff0003 	.word	0xffff0003
 8005cd4:	10002b00 	.word	0x10002b00
 8005cd8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ce2:	f043 0220 	orr.w	r2, r3, #32
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2203      	movs	r2, #3
 8005cf0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e010      	b.n	8005d1a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	e005      	b.n	8005d0c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d3f3      	bcc.n	8005d00 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop

08005d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b089      	sub	sp, #36	; 0x24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005d36:	4b89      	ldr	r3, [pc, #548]	; (8005f5c <HAL_GPIO_Init+0x234>)
 8005d38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d3a:	e194      	b.n	8006066 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	2101      	movs	r1, #1
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	fa01 f303 	lsl.w	r3, r1, r3
 8005d48:	4013      	ands	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 8186 	beq.w	8006060 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f003 0303 	and.w	r3, r3, #3
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d005      	beq.n	8005d6c <HAL_GPIO_Init+0x44>
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f003 0303 	and.w	r3, r3, #3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d130      	bne.n	8005dce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	2203      	movs	r2, #3
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	43db      	mvns	r3, r3
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	4013      	ands	r3, r2
 8005d82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005da2:	2201      	movs	r2, #1
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43db      	mvns	r3, r3
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	4013      	ands	r3, r2
 8005db0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	091b      	lsrs	r3, r3, #4
 8005db8:	f003 0201 	and.w	r2, r3, #1
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d017      	beq.n	8005e0a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	2203      	movs	r2, #3
 8005de6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dea:	43db      	mvns	r3, r3
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	4013      	ands	r3, r2
 8005df0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	689a      	ldr	r2, [r3, #8]
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d123      	bne.n	8005e5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	08da      	lsrs	r2, r3, #3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3208      	adds	r2, #8
 8005e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	220f      	movs	r2, #15
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	43db      	mvns	r3, r3
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	4013      	ands	r3, r2
 8005e38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	08da      	lsrs	r2, r3, #3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3208      	adds	r2, #8
 8005e58:	69b9      	ldr	r1, [r7, #24]
 8005e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	2203      	movs	r2, #3
 8005e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6e:	43db      	mvns	r3, r3
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	4013      	ands	r3, r2
 8005e74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f003 0203 	and.w	r2, r3, #3
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	fa02 f303 	lsl.w	r3, r2, r3
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 80e0 	beq.w	8006060 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ea0:	4b2f      	ldr	r3, [pc, #188]	; (8005f60 <HAL_GPIO_Init+0x238>)
 8005ea2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ea6:	4a2e      	ldr	r2, [pc, #184]	; (8005f60 <HAL_GPIO_Init+0x238>)
 8005ea8:	f043 0302 	orr.w	r3, r3, #2
 8005eac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005eb0:	4b2b      	ldr	r3, [pc, #172]	; (8005f60 <HAL_GPIO_Init+0x238>)
 8005eb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ebe:	4a29      	ldr	r2, [pc, #164]	; (8005f64 <HAL_GPIO_Init+0x23c>)
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	089b      	lsrs	r3, r3, #2
 8005ec4:	3302      	adds	r3, #2
 8005ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	220f      	movs	r2, #15
 8005ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eda:	43db      	mvns	r3, r3
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a20      	ldr	r2, [pc, #128]	; (8005f68 <HAL_GPIO_Init+0x240>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d052      	beq.n	8005f90 <HAL_GPIO_Init+0x268>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a1f      	ldr	r2, [pc, #124]	; (8005f6c <HAL_GPIO_Init+0x244>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d031      	beq.n	8005f56 <HAL_GPIO_Init+0x22e>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a1e      	ldr	r2, [pc, #120]	; (8005f70 <HAL_GPIO_Init+0x248>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d02b      	beq.n	8005f52 <HAL_GPIO_Init+0x22a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a1d      	ldr	r2, [pc, #116]	; (8005f74 <HAL_GPIO_Init+0x24c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d025      	beq.n	8005f4e <HAL_GPIO_Init+0x226>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a1c      	ldr	r2, [pc, #112]	; (8005f78 <HAL_GPIO_Init+0x250>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d01f      	beq.n	8005f4a <HAL_GPIO_Init+0x222>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a1b      	ldr	r2, [pc, #108]	; (8005f7c <HAL_GPIO_Init+0x254>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d019      	beq.n	8005f46 <HAL_GPIO_Init+0x21e>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a1a      	ldr	r2, [pc, #104]	; (8005f80 <HAL_GPIO_Init+0x258>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d013      	beq.n	8005f42 <HAL_GPIO_Init+0x21a>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a19      	ldr	r2, [pc, #100]	; (8005f84 <HAL_GPIO_Init+0x25c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00d      	beq.n	8005f3e <HAL_GPIO_Init+0x216>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a18      	ldr	r2, [pc, #96]	; (8005f88 <HAL_GPIO_Init+0x260>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d007      	beq.n	8005f3a <HAL_GPIO_Init+0x212>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a17      	ldr	r2, [pc, #92]	; (8005f8c <HAL_GPIO_Init+0x264>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d101      	bne.n	8005f36 <HAL_GPIO_Init+0x20e>
 8005f32:	2309      	movs	r3, #9
 8005f34:	e02d      	b.n	8005f92 <HAL_GPIO_Init+0x26a>
 8005f36:	230a      	movs	r3, #10
 8005f38:	e02b      	b.n	8005f92 <HAL_GPIO_Init+0x26a>
 8005f3a:	2308      	movs	r3, #8
 8005f3c:	e029      	b.n	8005f92 <HAL_GPIO_Init+0x26a>
 8005f3e:	2307      	movs	r3, #7
 8005f40:	e027      	b.n	8005f92 <HAL_GPIO_Init+0x26a>
 8005f42:	2306      	movs	r3, #6
 8005f44:	e025      	b.n	8005f92 <HAL_GPIO_Init+0x26a>
 8005f46:	2305      	movs	r3, #5
 8005f48:	e023      	b.n	8005f92 <HAL_GPIO_Init+0x26a>
 8005f4a:	2304      	movs	r3, #4
 8005f4c:	e021      	b.n	8005f92 <HAL_GPIO_Init+0x26a>
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e01f      	b.n	8005f92 <HAL_GPIO_Init+0x26a>
 8005f52:	2302      	movs	r3, #2
 8005f54:	e01d      	b.n	8005f92 <HAL_GPIO_Init+0x26a>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e01b      	b.n	8005f92 <HAL_GPIO_Init+0x26a>
 8005f5a:	bf00      	nop
 8005f5c:	58000080 	.word	0x58000080
 8005f60:	58024400 	.word	0x58024400
 8005f64:	58000400 	.word	0x58000400
 8005f68:	58020000 	.word	0x58020000
 8005f6c:	58020400 	.word	0x58020400
 8005f70:	58020800 	.word	0x58020800
 8005f74:	58020c00 	.word	0x58020c00
 8005f78:	58021000 	.word	0x58021000
 8005f7c:	58021400 	.word	0x58021400
 8005f80:	58021800 	.word	0x58021800
 8005f84:	58021c00 	.word	0x58021c00
 8005f88:	58022000 	.word	0x58022000
 8005f8c:	58022400 	.word	0x58022400
 8005f90:	2300      	movs	r3, #0
 8005f92:	69fa      	ldr	r2, [r7, #28]
 8005f94:	f002 0203 	and.w	r2, r2, #3
 8005f98:	0092      	lsls	r2, r2, #2
 8005f9a:	4093      	lsls	r3, r2
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fa2:	4938      	ldr	r1, [pc, #224]	; (8006084 <HAL_GPIO_Init+0x35c>)
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	089b      	lsrs	r3, r3, #2
 8005fa8:	3302      	adds	r3, #2
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	43db      	mvns	r3, r3
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	4013      	ands	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	43db      	mvns	r3, r3
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	4013      	ands	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	4313      	orrs	r3, r2
 800602e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	43db      	mvns	r3, r3
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	4013      	ands	r3, r2
 8006044:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	4313      	orrs	r3, r2
 8006058:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	3301      	adds	r3, #1
 8006064:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	fa22 f303 	lsr.w	r3, r2, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	f47f ae63 	bne.w	8005d3c <HAL_GPIO_Init+0x14>
  }
}
 8006076:	bf00      	nop
 8006078:	bf00      	nop
 800607a:	3724      	adds	r7, #36	; 0x24
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	58000400 	.word	0x58000400

08006088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	807b      	strh	r3, [r7, #2]
 8006094:	4613      	mov	r3, r2
 8006096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006098:	787b      	ldrb	r3, [r7, #1]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800609e:	887a      	ldrh	r2, [r7, #2]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80060a4:	e003      	b.n	80060ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80060a6:	887b      	ldrh	r3, [r7, #2]
 80060a8:	041a      	lsls	r2, r3, #16
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	619a      	str	r2, [r3, #24]
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
	...

080060bc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e0bf      	b.n	800624e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d106      	bne.n	80060e8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fc f92a 	bl	800233c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699a      	ldr	r2, [r3, #24]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80060fe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6999      	ldr	r1, [r3, #24]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006114:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6899      	ldr	r1, [r3, #8]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	4b4a      	ldr	r3, [pc, #296]	; (8006258 <HAL_LTDC_Init+0x19c>)
 8006130:	400b      	ands	r3, r1
 8006132:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	041b      	lsls	r3, r3, #16
 800613a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6899      	ldr	r1, [r3, #8]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	431a      	orrs	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68d9      	ldr	r1, [r3, #12]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	4b3e      	ldr	r3, [pc, #248]	; (8006258 <HAL_LTDC_Init+0x19c>)
 800615e:	400b      	ands	r3, r1
 8006160:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	041b      	lsls	r3, r3, #16
 8006168:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68d9      	ldr	r1, [r3, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a1a      	ldr	r2, [r3, #32]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6919      	ldr	r1, [r3, #16]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	4b33      	ldr	r3, [pc, #204]	; (8006258 <HAL_LTDC_Init+0x19c>)
 800618c:	400b      	ands	r3, r1
 800618e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	041b      	lsls	r3, r3, #16
 8006196:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6919      	ldr	r1, [r3, #16]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6959      	ldr	r1, [r3, #20]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	4b27      	ldr	r3, [pc, #156]	; (8006258 <HAL_LTDC_Init+0x19c>)
 80061ba:	400b      	ands	r3, r1
 80061bc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c2:	041b      	lsls	r3, r3, #16
 80061c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6959      	ldr	r1, [r3, #20]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061e2:	021b      	lsls	r3, r3, #8
 80061e4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80061ec:	041b      	lsls	r3, r3, #16
 80061ee:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80061fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4313      	orrs	r3, r2
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006212:	431a      	orrs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	430a      	orrs	r2, r1
 800621a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0206 	orr.w	r2, r2, #6
 800622a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0201 	orr.w	r2, r2, #1
 800623a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	f000f800 	.word	0xf000f800

0800625c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800625c:	b5b0      	push	{r4, r5, r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800626e:	2b01      	cmp	r3, #1
 8006270:	d101      	bne.n	8006276 <HAL_LTDC_ConfigLayer+0x1a>
 8006272:	2302      	movs	r3, #2
 8006274:	e02c      	b.n	80062d0 <HAL_LTDC_ConfigLayer+0x74>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2202      	movs	r2, #2
 8006282:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2134      	movs	r1, #52	; 0x34
 800628c:	fb01 f303 	mul.w	r3, r1, r3
 8006290:	4413      	add	r3, r2
 8006292:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	4614      	mov	r4, r2
 800629a:	461d      	mov	r5, r3
 800629c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800629e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	68b9      	ldr	r1, [r7, #8]
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 f811 	bl	80062d8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2201      	movs	r2, #1
 80062bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bdb0      	pop	{r4, r5, r7, pc}

080062d8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80062d8:	b480      	push	{r7}
 80062da:	b089      	sub	sp, #36	; 0x24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	0c1b      	lsrs	r3, r3, #16
 80062f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062f4:	4413      	add	r3, r2
 80062f6:	041b      	lsls	r3, r3, #16
 80062f8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	01db      	lsls	r3, r3, #7
 8006304:	4413      	add	r3, r2
 8006306:	3384      	adds	r3, #132	; 0x84
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	6812      	ldr	r2, [r2, #0]
 800630e:	4611      	mov	r1, r2
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	01d2      	lsls	r2, r2, #7
 8006314:	440a      	add	r2, r1
 8006316:	3284      	adds	r2, #132	; 0x84
 8006318:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800631c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	0c1b      	lsrs	r3, r3, #16
 800632a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800632e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006330:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4619      	mov	r1, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	01db      	lsls	r3, r3, #7
 800633c:	440b      	add	r3, r1
 800633e:	3384      	adds	r3, #132	; 0x84
 8006340:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006346:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006356:	4413      	add	r3, r2
 8006358:	041b      	lsls	r3, r3, #16
 800635a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	461a      	mov	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	01db      	lsls	r3, r3, #7
 8006366:	4413      	add	r3, r2
 8006368:	3384      	adds	r3, #132	; 0x84
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	6812      	ldr	r2, [r2, #0]
 8006370:	4611      	mov	r1, r2
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	01d2      	lsls	r2, r2, #7
 8006376:	440a      	add	r2, r1
 8006378:	3284      	adds	r2, #132	; 0x84
 800637a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800637e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800638e:	4413      	add	r3, r2
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4619      	mov	r1, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	01db      	lsls	r3, r3, #7
 800639c:	440b      	add	r3, r1
 800639e:	3384      	adds	r3, #132	; 0x84
 80063a0:	4619      	mov	r1, r3
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	461a      	mov	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	01db      	lsls	r3, r3, #7
 80063b2:	4413      	add	r3, r2
 80063b4:	3384      	adds	r3, #132	; 0x84
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	6812      	ldr	r2, [r2, #0]
 80063bc:	4611      	mov	r1, r2
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	01d2      	lsls	r2, r2, #7
 80063c2:	440a      	add	r2, r1
 80063c4:	3284      	adds	r2, #132	; 0x84
 80063c6:	f023 0307 	bic.w	r3, r3, #7
 80063ca:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	01db      	lsls	r3, r3, #7
 80063d6:	4413      	add	r3, r2
 80063d8:	3384      	adds	r3, #132	; 0x84
 80063da:	461a      	mov	r2, r3
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80063e8:	021b      	lsls	r3, r3, #8
 80063ea:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80063f2:	041b      	lsls	r3, r3, #16
 80063f4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	061b      	lsls	r3, r3, #24
 80063fc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	01db      	lsls	r3, r3, #7
 8006408:	4413      	add	r3, r2
 800640a:	3384      	adds	r3, #132	; 0x84
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	461a      	mov	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	01db      	lsls	r3, r3, #7
 8006418:	4413      	add	r3, r2
 800641a:	3384      	adds	r3, #132	; 0x84
 800641c:	461a      	mov	r2, r3
 800641e:	2300      	movs	r3, #0
 8006420:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006428:	461a      	mov	r2, r3
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	431a      	orrs	r2, r3
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	431a      	orrs	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4619      	mov	r1, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	01db      	lsls	r3, r3, #7
 800643c:	440b      	add	r3, r1
 800643e:	3384      	adds	r3, #132	; 0x84
 8006440:	4619      	mov	r1, r3
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	4313      	orrs	r3, r2
 8006446:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	461a      	mov	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	01db      	lsls	r3, r3, #7
 8006452:	4413      	add	r3, r2
 8006454:	3384      	adds	r3, #132	; 0x84
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	6812      	ldr	r2, [r2, #0]
 800645c:	4611      	mov	r1, r2
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	01d2      	lsls	r2, r2, #7
 8006462:	440a      	add	r2, r1
 8006464:	3284      	adds	r2, #132	; 0x84
 8006466:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800646a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	461a      	mov	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	01db      	lsls	r3, r3, #7
 8006476:	4413      	add	r3, r2
 8006478:	3384      	adds	r3, #132	; 0x84
 800647a:	461a      	mov	r2, r3
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	01db      	lsls	r3, r3, #7
 800648c:	4413      	add	r3, r2
 800648e:	3384      	adds	r3, #132	; 0x84
 8006490:	69da      	ldr	r2, [r3, #28]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4619      	mov	r1, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	01db      	lsls	r3, r3, #7
 800649c:	440b      	add	r3, r1
 800649e:	3384      	adds	r3, #132	; 0x84
 80064a0:	4619      	mov	r1, r3
 80064a2:	4b58      	ldr	r3, [pc, #352]	; (8006604 <LTDC_SetConfig+0x32c>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	69da      	ldr	r2, [r3, #28]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	68f9      	ldr	r1, [r7, #12]
 80064b2:	6809      	ldr	r1, [r1, #0]
 80064b4:	4608      	mov	r0, r1
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	01c9      	lsls	r1, r1, #7
 80064ba:	4401      	add	r1, r0
 80064bc:	3184      	adds	r1, #132	; 0x84
 80064be:	4313      	orrs	r3, r2
 80064c0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	461a      	mov	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	01db      	lsls	r3, r3, #7
 80064cc:	4413      	add	r3, r2
 80064ce:	3384      	adds	r3, #132	; 0x84
 80064d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	01db      	lsls	r3, r3, #7
 80064dc:	4413      	add	r3, r2
 80064de:	3384      	adds	r3, #132	; 0x84
 80064e0:	461a      	mov	r2, r3
 80064e2:	2300      	movs	r3, #0
 80064e4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	461a      	mov	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	01db      	lsls	r3, r3, #7
 80064f0:	4413      	add	r3, r2
 80064f2:	3384      	adds	r3, #132	; 0x84
 80064f4:	461a      	mov	r2, r3
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d102      	bne.n	800650a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006504:	2304      	movs	r3, #4
 8006506:	61fb      	str	r3, [r7, #28]
 8006508:	e01b      	b.n	8006542 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d102      	bne.n	8006518 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006512:	2303      	movs	r3, #3
 8006514:	61fb      	str	r3, [r7, #28]
 8006516:	e014      	b.n	8006542 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	2b04      	cmp	r3, #4
 800651e:	d00b      	beq.n	8006538 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006524:	2b02      	cmp	r3, #2
 8006526:	d007      	beq.n	8006538 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800652c:	2b03      	cmp	r3, #3
 800652e:	d003      	beq.n	8006538 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006534:	2b07      	cmp	r3, #7
 8006536:	d102      	bne.n	800653e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006538:	2302      	movs	r3, #2
 800653a:	61fb      	str	r3, [r7, #28]
 800653c:	e001      	b.n	8006542 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800653e:	2301      	movs	r3, #1
 8006540:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	01db      	lsls	r3, r3, #7
 800654c:	4413      	add	r3, r2
 800654e:	3384      	adds	r3, #132	; 0x84
 8006550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	6812      	ldr	r2, [r2, #0]
 8006556:	4611      	mov	r1, r2
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	01d2      	lsls	r2, r2, #7
 800655c:	440a      	add	r2, r1
 800655e:	3284      	adds	r2, #132	; 0x84
 8006560:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006564:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	69fa      	ldr	r2, [r7, #28]
 800656c:	fb02 f303 	mul.w	r3, r2, r3
 8006570:	041a      	lsls	r2, r3, #16
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	6859      	ldr	r1, [r3, #4]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	1acb      	subs	r3, r1, r3
 800657c:	69f9      	ldr	r1, [r7, #28]
 800657e:	fb01 f303 	mul.w	r3, r1, r3
 8006582:	3307      	adds	r3, #7
 8006584:	68f9      	ldr	r1, [r7, #12]
 8006586:	6809      	ldr	r1, [r1, #0]
 8006588:	4608      	mov	r0, r1
 800658a:	6879      	ldr	r1, [r7, #4]
 800658c:	01c9      	lsls	r1, r1, #7
 800658e:	4401      	add	r1, r0
 8006590:	3184      	adds	r1, #132	; 0x84
 8006592:	4313      	orrs	r3, r2
 8006594:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	01db      	lsls	r3, r3, #7
 80065a0:	4413      	add	r3, r2
 80065a2:	3384      	adds	r3, #132	; 0x84
 80065a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4619      	mov	r1, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	01db      	lsls	r3, r3, #7
 80065b0:	440b      	add	r3, r1
 80065b2:	3384      	adds	r3, #132	; 0x84
 80065b4:	4619      	mov	r1, r3
 80065b6:	4b14      	ldr	r3, [pc, #80]	; (8006608 <LTDC_SetConfig+0x330>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	461a      	mov	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	01db      	lsls	r3, r3, #7
 80065c6:	4413      	add	r3, r2
 80065c8:	3384      	adds	r3, #132	; 0x84
 80065ca:	461a      	mov	r2, r3
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	01db      	lsls	r3, r3, #7
 80065dc:	4413      	add	r3, r2
 80065de:	3384      	adds	r3, #132	; 0x84
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	6812      	ldr	r2, [r2, #0]
 80065e6:	4611      	mov	r1, r2
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	01d2      	lsls	r2, r2, #7
 80065ec:	440a      	add	r2, r1
 80065ee:	3284      	adds	r2, #132	; 0x84
 80065f0:	f043 0301 	orr.w	r3, r3, #1
 80065f4:	6013      	str	r3, [r2, #0]
}
 80065f6:	bf00      	nop
 80065f8:	3724      	adds	r7, #36	; 0x24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	fffff8f8 	.word	0xfffff8f8
 8006608:	fffff800 	.word	0xfffff800

0800660c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800660c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800660e:	b08f      	sub	sp, #60	; 0x3c
 8006610:	af0a      	add	r7, sp, #40	; 0x28
 8006612:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e116      	b.n	800684c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	d106      	bne.n	800663e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7fc f8fd 	bl	8002838 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2203      	movs	r2, #3
 8006642:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664e:	2b00      	cmp	r3, #0
 8006650:	d102      	bne.n	8006658 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4618      	mov	r0, r3
 800665e:	f007 fead 	bl	800e3bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	603b      	str	r3, [r7, #0]
 8006668:	687e      	ldr	r6, [r7, #4]
 800666a:	466d      	mov	r5, sp
 800666c:	f106 0410 	add.w	r4, r6, #16
 8006670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006678:	e894 0003 	ldmia.w	r4, {r0, r1}
 800667c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006680:	1d33      	adds	r3, r6, #4
 8006682:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006684:	6838      	ldr	r0, [r7, #0]
 8006686:	f007 fe2b 	bl	800e2e0 <USB_CoreInit>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d005      	beq.n	800669c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e0d7      	b.n	800684c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2100      	movs	r1, #0
 80066a2:	4618      	mov	r0, r3
 80066a4:	f007 fe9b 	bl	800e3de <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066a8:	2300      	movs	r3, #0
 80066aa:	73fb      	strb	r3, [r7, #15]
 80066ac:	e04a      	b.n	8006744 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80066ae:	7bfa      	ldrb	r2, [r7, #15]
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	4613      	mov	r3, r2
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	440b      	add	r3, r1
 80066bc:	333d      	adds	r3, #61	; 0x3d
 80066be:	2201      	movs	r2, #1
 80066c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80066c2:	7bfa      	ldrb	r2, [r7, #15]
 80066c4:	6879      	ldr	r1, [r7, #4]
 80066c6:	4613      	mov	r3, r2
 80066c8:	00db      	lsls	r3, r3, #3
 80066ca:	4413      	add	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	440b      	add	r3, r1
 80066d0:	333c      	adds	r3, #60	; 0x3c
 80066d2:	7bfa      	ldrb	r2, [r7, #15]
 80066d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80066d6:	7bfa      	ldrb	r2, [r7, #15]
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	b298      	uxth	r0, r3
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	4613      	mov	r3, r2
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	4413      	add	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	440b      	add	r3, r1
 80066e8:	3356      	adds	r3, #86	; 0x56
 80066ea:	4602      	mov	r2, r0
 80066ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80066ee:	7bfa      	ldrb	r2, [r7, #15]
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	4613      	mov	r3, r2
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	4413      	add	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	440b      	add	r3, r1
 80066fc:	3340      	adds	r3, #64	; 0x40
 80066fe:	2200      	movs	r2, #0
 8006700:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006702:	7bfa      	ldrb	r2, [r7, #15]
 8006704:	6879      	ldr	r1, [r7, #4]
 8006706:	4613      	mov	r3, r2
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	4413      	add	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	440b      	add	r3, r1
 8006710:	3344      	adds	r3, #68	; 0x44
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006716:	7bfa      	ldrb	r2, [r7, #15]
 8006718:	6879      	ldr	r1, [r7, #4]
 800671a:	4613      	mov	r3, r2
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	440b      	add	r3, r1
 8006724:	3348      	adds	r3, #72	; 0x48
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800672a:	7bfa      	ldrb	r2, [r7, #15]
 800672c:	6879      	ldr	r1, [r7, #4]
 800672e:	4613      	mov	r3, r2
 8006730:	00db      	lsls	r3, r3, #3
 8006732:	4413      	add	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	440b      	add	r3, r1
 8006738:	334c      	adds	r3, #76	; 0x4c
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800673e:	7bfb      	ldrb	r3, [r7, #15]
 8006740:	3301      	adds	r3, #1
 8006742:	73fb      	strb	r3, [r7, #15]
 8006744:	7bfa      	ldrb	r2, [r7, #15]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	429a      	cmp	r2, r3
 800674c:	d3af      	bcc.n	80066ae <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800674e:	2300      	movs	r3, #0
 8006750:	73fb      	strb	r3, [r7, #15]
 8006752:	e044      	b.n	80067de <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006754:	7bfa      	ldrb	r2, [r7, #15]
 8006756:	6879      	ldr	r1, [r7, #4]
 8006758:	4613      	mov	r3, r2
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	4413      	add	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	440b      	add	r3, r1
 8006762:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006766:	2200      	movs	r2, #0
 8006768:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800676a:	7bfa      	ldrb	r2, [r7, #15]
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	4613      	mov	r3, r2
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800677c:	7bfa      	ldrb	r2, [r7, #15]
 800677e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006780:	7bfa      	ldrb	r2, [r7, #15]
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	4613      	mov	r3, r2
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	4413      	add	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	440b      	add	r3, r1
 800678e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006792:	2200      	movs	r2, #0
 8006794:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006796:	7bfa      	ldrb	r2, [r7, #15]
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	4613      	mov	r3, r2
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	4413      	add	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	440b      	add	r3, r1
 80067a4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80067ac:	7bfa      	ldrb	r2, [r7, #15]
 80067ae:	6879      	ldr	r1, [r7, #4]
 80067b0:	4613      	mov	r3, r2
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	4413      	add	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	440b      	add	r3, r1
 80067ba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80067c2:	7bfa      	ldrb	r2, [r7, #15]
 80067c4:	6879      	ldr	r1, [r7, #4]
 80067c6:	4613      	mov	r3, r2
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	4413      	add	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	440b      	add	r3, r1
 80067d0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
 80067da:	3301      	adds	r3, #1
 80067dc:	73fb      	strb	r3, [r7, #15]
 80067de:	7bfa      	ldrb	r2, [r7, #15]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d3b5      	bcc.n	8006754 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	603b      	str	r3, [r7, #0]
 80067ee:	687e      	ldr	r6, [r7, #4]
 80067f0:	466d      	mov	r5, sp
 80067f2:	f106 0410 	add.w	r4, r6, #16
 80067f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006802:	e885 0003 	stmia.w	r5, {r0, r1}
 8006806:	1d33      	adds	r3, r6, #4
 8006808:	cb0e      	ldmia	r3, {r1, r2, r3}
 800680a:	6838      	ldr	r0, [r7, #0]
 800680c:	f007 fe34 	bl	800e478 <USB_DevInit>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d005      	beq.n	8006822 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2202      	movs	r2, #2
 800681a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e014      	b.n	800684c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	2b01      	cmp	r3, #1
 8006838:	d102      	bne.n	8006840 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f80a 	bl	8006854 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4618      	mov	r0, r3
 8006846:	f007 fff2 	bl	800e82e <USB_DevDisconnect>

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006854 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006882:	4b05      	ldr	r3, [pc, #20]	; (8006898 <HAL_PCDEx_ActivateLPM+0x44>)
 8006884:	4313      	orrs	r3, r2
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	10000003 	.word	0x10000003

0800689c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80068a4:	4b19      	ldr	r3, [pc, #100]	; (800690c <HAL_PWREx_ConfigSupply+0x70>)
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f003 0304 	and.w	r3, r3, #4
 80068ac:	2b04      	cmp	r3, #4
 80068ae:	d00a      	beq.n	80068c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80068b0:	4b16      	ldr	r3, [pc, #88]	; (800690c <HAL_PWREx_ConfigSupply+0x70>)
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f003 0307 	and.w	r3, r3, #7
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d001      	beq.n	80068c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e01f      	b.n	8006902 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e01d      	b.n	8006902 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80068c6:	4b11      	ldr	r3, [pc, #68]	; (800690c <HAL_PWREx_ConfigSupply+0x70>)
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f023 0207 	bic.w	r2, r3, #7
 80068ce:	490f      	ldr	r1, [pc, #60]	; (800690c <HAL_PWREx_ConfigSupply+0x70>)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80068d6:	f7fc fb37 	bl	8002f48 <HAL_GetTick>
 80068da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068dc:	e009      	b.n	80068f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80068de:	f7fc fb33 	bl	8002f48 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068ec:	d901      	bls.n	80068f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e007      	b.n	8006902 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068f2:	4b06      	ldr	r3, [pc, #24]	; (800690c <HAL_PWREx_ConfigSupply+0x70>)
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068fe:	d1ee      	bne.n	80068de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	58024800 	.word	0x58024800

08006910 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006914:	4b05      	ldr	r3, [pc, #20]	; (800692c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	4a04      	ldr	r2, [pc, #16]	; (800692c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800691a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800691e:	60d3      	str	r3, [r2, #12]
}
 8006920:	bf00      	nop
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	58024800 	.word	0x58024800

08006930 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b08c      	sub	sp, #48	; 0x30
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d102      	bne.n	8006944 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	f000 bc48 	b.w	80071d4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 8088 	beq.w	8006a62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006952:	4b99      	ldr	r3, [pc, #612]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800695a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800695c:	4b96      	ldr	r3, [pc, #600]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 800695e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006960:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006964:	2b10      	cmp	r3, #16
 8006966:	d007      	beq.n	8006978 <HAL_RCC_OscConfig+0x48>
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	2b18      	cmp	r3, #24
 800696c:	d111      	bne.n	8006992 <HAL_RCC_OscConfig+0x62>
 800696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006970:	f003 0303 	and.w	r3, r3, #3
 8006974:	2b02      	cmp	r3, #2
 8006976:	d10c      	bne.n	8006992 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006978:	4b8f      	ldr	r3, [pc, #572]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d06d      	beq.n	8006a60 <HAL_RCC_OscConfig+0x130>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d169      	bne.n	8006a60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	f000 bc21 	b.w	80071d4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800699a:	d106      	bne.n	80069aa <HAL_RCC_OscConfig+0x7a>
 800699c:	4b86      	ldr	r3, [pc, #536]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a85      	ldr	r2, [pc, #532]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 80069a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a6:	6013      	str	r3, [r2, #0]
 80069a8:	e02e      	b.n	8006a08 <HAL_RCC_OscConfig+0xd8>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10c      	bne.n	80069cc <HAL_RCC_OscConfig+0x9c>
 80069b2:	4b81      	ldr	r3, [pc, #516]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a80      	ldr	r2, [pc, #512]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 80069b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	4b7e      	ldr	r3, [pc, #504]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a7d      	ldr	r2, [pc, #500]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 80069c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	e01d      	b.n	8006a08 <HAL_RCC_OscConfig+0xd8>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069d4:	d10c      	bne.n	80069f0 <HAL_RCC_OscConfig+0xc0>
 80069d6:	4b78      	ldr	r3, [pc, #480]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a77      	ldr	r2, [pc, #476]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 80069dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	4b75      	ldr	r3, [pc, #468]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a74      	ldr	r2, [pc, #464]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 80069e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	e00b      	b.n	8006a08 <HAL_RCC_OscConfig+0xd8>
 80069f0:	4b71      	ldr	r3, [pc, #452]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a70      	ldr	r2, [pc, #448]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 80069f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	4b6e      	ldr	r3, [pc, #440]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a6d      	ldr	r2, [pc, #436]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d013      	beq.n	8006a38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a10:	f7fc fa9a 	bl	8002f48 <HAL_GetTick>
 8006a14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a18:	f7fc fa96 	bl	8002f48 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b64      	cmp	r3, #100	; 0x64
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e3d4      	b.n	80071d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a2a:	4b63      	ldr	r3, [pc, #396]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0f0      	beq.n	8006a18 <HAL_RCC_OscConfig+0xe8>
 8006a36:	e014      	b.n	8006a62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a38:	f7fc fa86 	bl	8002f48 <HAL_GetTick>
 8006a3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a40:	f7fc fa82 	bl	8002f48 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b64      	cmp	r3, #100	; 0x64
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e3c0      	b.n	80071d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a52:	4b59      	ldr	r3, [pc, #356]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f0      	bne.n	8006a40 <HAL_RCC_OscConfig+0x110>
 8006a5e:	e000      	b.n	8006a62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f000 80ca 	beq.w	8006c04 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a70:	4b51      	ldr	r3, [pc, #324]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a78:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a7a:	4b4f      	ldr	r3, [pc, #316]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d007      	beq.n	8006a96 <HAL_RCC_OscConfig+0x166>
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	2b18      	cmp	r3, #24
 8006a8a:	d156      	bne.n	8006b3a <HAL_RCC_OscConfig+0x20a>
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	f003 0303 	and.w	r3, r3, #3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d151      	bne.n	8006b3a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a96:	4b48      	ldr	r3, [pc, #288]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d005      	beq.n	8006aae <HAL_RCC_OscConfig+0x17e>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e392      	b.n	80071d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006aae:	4b42      	ldr	r3, [pc, #264]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f023 0219 	bic.w	r2, r3, #25
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	493f      	ldr	r1, [pc, #252]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac0:	f7fc fa42 	bl	8002f48 <HAL_GetTick>
 8006ac4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ac6:	e008      	b.n	8006ada <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ac8:	f7fc fa3e 	bl	8002f48 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e37c      	b.n	80071d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ada:	4b37      	ldr	r3, [pc, #220]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0304 	and.w	r3, r3, #4
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d0f0      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ae6:	f7fc fa5f 	bl	8002fa8 <HAL_GetREVID>
 8006aea:	4603      	mov	r3, r0
 8006aec:	f241 0203 	movw	r2, #4099	; 0x1003
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d817      	bhi.n	8006b24 <HAL_RCC_OscConfig+0x1f4>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	2b40      	cmp	r3, #64	; 0x40
 8006afa:	d108      	bne.n	8006b0e <HAL_RCC_OscConfig+0x1de>
 8006afc:	4b2e      	ldr	r3, [pc, #184]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006b04:	4a2c      	ldr	r2, [pc, #176]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b0a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b0c:	e07a      	b.n	8006c04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b0e:	4b2a      	ldr	r3, [pc, #168]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	031b      	lsls	r3, r3, #12
 8006b1c:	4926      	ldr	r1, [pc, #152]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b22:	e06f      	b.n	8006c04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b24:	4b24      	ldr	r3, [pc, #144]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	061b      	lsls	r3, r3, #24
 8006b32:	4921      	ldr	r1, [pc, #132]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b38:	e064      	b.n	8006c04 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d047      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b42:	4b1d      	ldr	r3, [pc, #116]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f023 0219 	bic.w	r2, r3, #25
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	491a      	ldr	r1, [pc, #104]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b54:	f7fc f9f8 	bl	8002f48 <HAL_GetTick>
 8006b58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b5a:	e008      	b.n	8006b6e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b5c:	f7fc f9f4 	bl	8002f48 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e332      	b.n	80071d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b6e:	4b12      	ldr	r3, [pc, #72]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0304 	and.w	r3, r3, #4
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0f0      	beq.n	8006b5c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b7a:	f7fc fa15 	bl	8002fa8 <HAL_GetREVID>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d819      	bhi.n	8006bbc <HAL_RCC_OscConfig+0x28c>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	2b40      	cmp	r3, #64	; 0x40
 8006b8e:	d108      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x272>
 8006b90:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006b98:	4a07      	ldr	r2, [pc, #28]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b9e:	6053      	str	r3, [r2, #4]
 8006ba0:	e030      	b.n	8006c04 <HAL_RCC_OscConfig+0x2d4>
 8006ba2:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	031b      	lsls	r3, r3, #12
 8006bb0:	4901      	ldr	r1, [pc, #4]	; (8006bb8 <HAL_RCC_OscConfig+0x288>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	604b      	str	r3, [r1, #4]
 8006bb6:	e025      	b.n	8006c04 <HAL_RCC_OscConfig+0x2d4>
 8006bb8:	58024400 	.word	0x58024400
 8006bbc:	4b9a      	ldr	r3, [pc, #616]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	061b      	lsls	r3, r3, #24
 8006bca:	4997      	ldr	r1, [pc, #604]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	604b      	str	r3, [r1, #4]
 8006bd0:	e018      	b.n	8006c04 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bd2:	4b95      	ldr	r3, [pc, #596]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a94      	ldr	r2, [pc, #592]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
 8006bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bde:	f7fc f9b3 	bl	8002f48 <HAL_GetTick>
 8006be2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006be4:	e008      	b.n	8006bf8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006be6:	f7fc f9af 	bl	8002f48 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e2ed      	b.n	80071d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006bf8:	4b8b      	ldr	r3, [pc, #556]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1f0      	bne.n	8006be6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0310 	and.w	r3, r3, #16
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f000 80a9 	beq.w	8006d64 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c12:	4b85      	ldr	r3, [pc, #532]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c1a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c1c:	4b82      	ldr	r3, [pc, #520]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c20:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d007      	beq.n	8006c38 <HAL_RCC_OscConfig+0x308>
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	2b18      	cmp	r3, #24
 8006c2c:	d13a      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x374>
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f003 0303 	and.w	r3, r3, #3
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d135      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c38:	4b7b      	ldr	r3, [pc, #492]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <HAL_RCC_OscConfig+0x320>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	2b80      	cmp	r3, #128	; 0x80
 8006c4a:	d001      	beq.n	8006c50 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e2c1      	b.n	80071d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c50:	f7fc f9aa 	bl	8002fa8 <HAL_GetREVID>
 8006c54:	4603      	mov	r3, r0
 8006c56:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d817      	bhi.n	8006c8e <HAL_RCC_OscConfig+0x35e>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	d108      	bne.n	8006c78 <HAL_RCC_OscConfig+0x348>
 8006c66:	4b70      	ldr	r3, [pc, #448]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006c6e:	4a6e      	ldr	r2, [pc, #440]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006c70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c74:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c76:	e075      	b.n	8006d64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c78:	4b6b      	ldr	r3, [pc, #428]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	069b      	lsls	r3, r3, #26
 8006c86:	4968      	ldr	r1, [pc, #416]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c8c:	e06a      	b.n	8006d64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c8e:	4b66      	ldr	r3, [pc, #408]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	061b      	lsls	r3, r3, #24
 8006c9c:	4962      	ldr	r1, [pc, #392]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ca2:	e05f      	b.n	8006d64 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d042      	beq.n	8006d32 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006cac:	4b5e      	ldr	r3, [pc, #376]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a5d      	ldr	r2, [pc, #372]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb8:	f7fc f946 	bl	8002f48 <HAL_GetTick>
 8006cbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006cc0:	f7fc f942 	bl	8002f48 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e280      	b.n	80071d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006cd2:	4b55      	ldr	r3, [pc, #340]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0f0      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cde:	f7fc f963 	bl	8002fa8 <HAL_GetREVID>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d817      	bhi.n	8006d1c <HAL_RCC_OscConfig+0x3ec>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	2b20      	cmp	r3, #32
 8006cf2:	d108      	bne.n	8006d06 <HAL_RCC_OscConfig+0x3d6>
 8006cf4:	4b4c      	ldr	r3, [pc, #304]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006cfc:	4a4a      	ldr	r2, [pc, #296]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006cfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d02:	6053      	str	r3, [r2, #4]
 8006d04:	e02e      	b.n	8006d64 <HAL_RCC_OscConfig+0x434>
 8006d06:	4b48      	ldr	r3, [pc, #288]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	069b      	lsls	r3, r3, #26
 8006d14:	4944      	ldr	r1, [pc, #272]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	604b      	str	r3, [r1, #4]
 8006d1a:	e023      	b.n	8006d64 <HAL_RCC_OscConfig+0x434>
 8006d1c:	4b42      	ldr	r3, [pc, #264]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	061b      	lsls	r3, r3, #24
 8006d2a:	493f      	ldr	r1, [pc, #252]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	60cb      	str	r3, [r1, #12]
 8006d30:	e018      	b.n	8006d64 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006d32:	4b3d      	ldr	r3, [pc, #244]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a3c      	ldr	r2, [pc, #240]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d3e:	f7fc f903 	bl	8002f48 <HAL_GetTick>
 8006d42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d44:	e008      	b.n	8006d58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006d46:	f7fc f8ff 	bl	8002f48 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d901      	bls.n	8006d58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e23d      	b.n	80071d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d58:	4b33      	ldr	r3, [pc, #204]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1f0      	bne.n	8006d46 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0308 	and.w	r3, r3, #8
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d036      	beq.n	8006dde <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d019      	beq.n	8006dac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d78:	4b2b      	ldr	r3, [pc, #172]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d7c:	4a2a      	ldr	r2, [pc, #168]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006d7e:	f043 0301 	orr.w	r3, r3, #1
 8006d82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d84:	f7fc f8e0 	bl	8002f48 <HAL_GetTick>
 8006d88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d8a:	e008      	b.n	8006d9e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d8c:	f7fc f8dc 	bl	8002f48 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e21a      	b.n	80071d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d9e:	4b22      	ldr	r3, [pc, #136]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0f0      	beq.n	8006d8c <HAL_RCC_OscConfig+0x45c>
 8006daa:	e018      	b.n	8006dde <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dac:	4b1e      	ldr	r3, [pc, #120]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db0:	4a1d      	ldr	r2, [pc, #116]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006db2:	f023 0301 	bic.w	r3, r3, #1
 8006db6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db8:	f7fc f8c6 	bl	8002f48 <HAL_GetTick>
 8006dbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006dbe:	e008      	b.n	8006dd2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dc0:	f7fc f8c2 	bl	8002f48 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e200      	b.n	80071d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006dd2:	4b15      	ldr	r3, [pc, #84]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1f0      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0320 	and.w	r3, r3, #32
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d039      	beq.n	8006e5e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d01c      	beq.n	8006e2c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006df2:	4b0d      	ldr	r3, [pc, #52]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a0c      	ldr	r2, [pc, #48]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006df8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006dfc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006dfe:	f7fc f8a3 	bl	8002f48 <HAL_GetTick>
 8006e02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e04:	e008      	b.n	8006e18 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e06:	f7fc f89f 	bl	8002f48 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d901      	bls.n	8006e18 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e1dd      	b.n	80071d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e18:	4b03      	ldr	r3, [pc, #12]	; (8006e28 <HAL_RCC_OscConfig+0x4f8>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0f0      	beq.n	8006e06 <HAL_RCC_OscConfig+0x4d6>
 8006e24:	e01b      	b.n	8006e5e <HAL_RCC_OscConfig+0x52e>
 8006e26:	bf00      	nop
 8006e28:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e2c:	4b9b      	ldr	r3, [pc, #620]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a9a      	ldr	r2, [pc, #616]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006e32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006e38:	f7fc f886 	bl	8002f48 <HAL_GetTick>
 8006e3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e3e:	e008      	b.n	8006e52 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e40:	f7fc f882 	bl	8002f48 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e1c0      	b.n	80071d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e52:	4b92      	ldr	r3, [pc, #584]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1f0      	bne.n	8006e40 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0304 	and.w	r3, r3, #4
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 8081 	beq.w	8006f6e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e6c:	4b8c      	ldr	r3, [pc, #560]	; (80070a0 <HAL_RCC_OscConfig+0x770>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a8b      	ldr	r2, [pc, #556]	; (80070a0 <HAL_RCC_OscConfig+0x770>)
 8006e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e78:	f7fc f866 	bl	8002f48 <HAL_GetTick>
 8006e7c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e7e:	e008      	b.n	8006e92 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e80:	f7fc f862 	bl	8002f48 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	2b64      	cmp	r3, #100	; 0x64
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e1a0      	b.n	80071d4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e92:	4b83      	ldr	r3, [pc, #524]	; (80070a0 <HAL_RCC_OscConfig+0x770>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0f0      	beq.n	8006e80 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d106      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x584>
 8006ea6:	4b7d      	ldr	r3, [pc, #500]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eaa:	4a7c      	ldr	r2, [pc, #496]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006eac:	f043 0301 	orr.w	r3, r3, #1
 8006eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8006eb2:	e02d      	b.n	8006f10 <HAL_RCC_OscConfig+0x5e0>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10c      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x5a6>
 8006ebc:	4b77      	ldr	r3, [pc, #476]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec0:	4a76      	ldr	r2, [pc, #472]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006ec2:	f023 0301 	bic.w	r3, r3, #1
 8006ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ec8:	4b74      	ldr	r3, [pc, #464]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ecc:	4a73      	ldr	r2, [pc, #460]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006ece:	f023 0304 	bic.w	r3, r3, #4
 8006ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ed4:	e01c      	b.n	8006f10 <HAL_RCC_OscConfig+0x5e0>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	2b05      	cmp	r3, #5
 8006edc:	d10c      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x5c8>
 8006ede:	4b6f      	ldr	r3, [pc, #444]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee2:	4a6e      	ldr	r2, [pc, #440]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006ee4:	f043 0304 	orr.w	r3, r3, #4
 8006ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8006eea:	4b6c      	ldr	r3, [pc, #432]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eee:	4a6b      	ldr	r2, [pc, #428]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006ef0:	f043 0301 	orr.w	r3, r3, #1
 8006ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ef6:	e00b      	b.n	8006f10 <HAL_RCC_OscConfig+0x5e0>
 8006ef8:	4b68      	ldr	r3, [pc, #416]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efc:	4a67      	ldr	r2, [pc, #412]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006efe:	f023 0301 	bic.w	r3, r3, #1
 8006f02:	6713      	str	r3, [r2, #112]	; 0x70
 8006f04:	4b65      	ldr	r3, [pc, #404]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f08:	4a64      	ldr	r2, [pc, #400]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006f0a:	f023 0304 	bic.w	r3, r3, #4
 8006f0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d015      	beq.n	8006f44 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f18:	f7fc f816 	bl	8002f48 <HAL_GetTick>
 8006f1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f1e:	e00a      	b.n	8006f36 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f20:	f7fc f812 	bl	8002f48 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e14e      	b.n	80071d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f36:	4b59      	ldr	r3, [pc, #356]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0ee      	beq.n	8006f20 <HAL_RCC_OscConfig+0x5f0>
 8006f42:	e014      	b.n	8006f6e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f44:	f7fc f800 	bl	8002f48 <HAL_GetTick>
 8006f48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f4a:	e00a      	b.n	8006f62 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f4c:	f7fb fffc 	bl	8002f48 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e138      	b.n	80071d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f62:	4b4e      	ldr	r3, [pc, #312]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1ee      	bne.n	8006f4c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 812d 	beq.w	80071d2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006f78:	4b48      	ldr	r3, [pc, #288]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f80:	2b18      	cmp	r3, #24
 8006f82:	f000 80bd 	beq.w	8007100 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	f040 809e 	bne.w	80070cc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f90:	4b42      	ldr	r3, [pc, #264]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a41      	ldr	r2, [pc, #260]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f9c:	f7fb ffd4 	bl	8002f48 <HAL_GetTick>
 8006fa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fa4:	f7fb ffd0 	bl	8002f48 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e10e      	b.n	80071d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fb6:	4b39      	ldr	r3, [pc, #228]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1f0      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006fc2:	4b36      	ldr	r3, [pc, #216]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fc6:	4b37      	ldr	r3, [pc, #220]	; (80070a4 <HAL_RCC_OscConfig+0x774>)
 8006fc8:	4013      	ands	r3, r2
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006fd2:	0112      	lsls	r2, r2, #4
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	4931      	ldr	r1, [pc, #196]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	628b      	str	r3, [r1, #40]	; 0x28
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fea:	3b01      	subs	r3, #1
 8006fec:	025b      	lsls	r3, r3, #9
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	431a      	orrs	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	041b      	lsls	r3, r3, #16
 8006ffa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ffe:	431a      	orrs	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007004:	3b01      	subs	r3, #1
 8007006:	061b      	lsls	r3, r3, #24
 8007008:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800700c:	4923      	ldr	r1, [pc, #140]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 800700e:	4313      	orrs	r3, r2
 8007010:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007012:	4b22      	ldr	r3, [pc, #136]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8007014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007016:	4a21      	ldr	r2, [pc, #132]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8007018:	f023 0301 	bic.w	r3, r3, #1
 800701c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800701e:	4b1f      	ldr	r3, [pc, #124]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8007020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007022:	4b21      	ldr	r3, [pc, #132]	; (80070a8 <HAL_RCC_OscConfig+0x778>)
 8007024:	4013      	ands	r3, r2
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800702a:	00d2      	lsls	r2, r2, #3
 800702c:	491b      	ldr	r1, [pc, #108]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 800702e:	4313      	orrs	r3, r2
 8007030:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007032:	4b1a      	ldr	r3, [pc, #104]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8007034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007036:	f023 020c 	bic.w	r2, r3, #12
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	4917      	ldr	r1, [pc, #92]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8007040:	4313      	orrs	r3, r2
 8007042:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007044:	4b15      	ldr	r3, [pc, #84]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	f023 0202 	bic.w	r2, r3, #2
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007050:	4912      	ldr	r1, [pc, #72]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8007052:	4313      	orrs	r3, r2
 8007054:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007056:	4b11      	ldr	r3, [pc, #68]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8007058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705a:	4a10      	ldr	r2, [pc, #64]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 800705c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007060:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007062:	4b0e      	ldr	r3, [pc, #56]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8007064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007066:	4a0d      	ldr	r2, [pc, #52]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8007068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800706c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800706e:	4b0b      	ldr	r3, [pc, #44]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	4a0a      	ldr	r2, [pc, #40]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8007074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007078:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800707a:	4b08      	ldr	r3, [pc, #32]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	4a07      	ldr	r2, [pc, #28]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8007080:	f043 0301 	orr.w	r3, r3, #1
 8007084:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007086:	4b05      	ldr	r3, [pc, #20]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a04      	ldr	r2, [pc, #16]	; (800709c <HAL_RCC_OscConfig+0x76c>)
 800708c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007092:	f7fb ff59 	bl	8002f48 <HAL_GetTick>
 8007096:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007098:	e011      	b.n	80070be <HAL_RCC_OscConfig+0x78e>
 800709a:	bf00      	nop
 800709c:	58024400 	.word	0x58024400
 80070a0:	58024800 	.word	0x58024800
 80070a4:	fffffc0c 	.word	0xfffffc0c
 80070a8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ac:	f7fb ff4c 	bl	8002f48 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d901      	bls.n	80070be <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e08a      	b.n	80071d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070be:	4b47      	ldr	r3, [pc, #284]	; (80071dc <HAL_RCC_OscConfig+0x8ac>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d0f0      	beq.n	80070ac <HAL_RCC_OscConfig+0x77c>
 80070ca:	e082      	b.n	80071d2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070cc:	4b43      	ldr	r3, [pc, #268]	; (80071dc <HAL_RCC_OscConfig+0x8ac>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a42      	ldr	r2, [pc, #264]	; (80071dc <HAL_RCC_OscConfig+0x8ac>)
 80070d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d8:	f7fb ff36 	bl	8002f48 <HAL_GetTick>
 80070dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070de:	e008      	b.n	80070f2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070e0:	f7fb ff32 	bl	8002f48 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d901      	bls.n	80070f2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e070      	b.n	80071d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070f2:	4b3a      	ldr	r3, [pc, #232]	; (80071dc <HAL_RCC_OscConfig+0x8ac>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1f0      	bne.n	80070e0 <HAL_RCC_OscConfig+0x7b0>
 80070fe:	e068      	b.n	80071d2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007100:	4b36      	ldr	r3, [pc, #216]	; (80071dc <HAL_RCC_OscConfig+0x8ac>)
 8007102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007104:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007106:	4b35      	ldr	r3, [pc, #212]	; (80071dc <HAL_RCC_OscConfig+0x8ac>)
 8007108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	2b01      	cmp	r3, #1
 8007112:	d031      	beq.n	8007178 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f003 0203 	and.w	r2, r3, #3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800711e:	429a      	cmp	r2, r3
 8007120:	d12a      	bne.n	8007178 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	091b      	lsrs	r3, r3, #4
 8007126:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800712e:	429a      	cmp	r2, r3
 8007130:	d122      	bne.n	8007178 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800713e:	429a      	cmp	r2, r3
 8007140:	d11a      	bne.n	8007178 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	0a5b      	lsrs	r3, r3, #9
 8007146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007150:	429a      	cmp	r2, r3
 8007152:	d111      	bne.n	8007178 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	0c1b      	lsrs	r3, r3, #16
 8007158:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007160:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007162:	429a      	cmp	r2, r3
 8007164:	d108      	bne.n	8007178 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	0e1b      	lsrs	r3, r3, #24
 800716a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007172:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007174:	429a      	cmp	r2, r3
 8007176:	d001      	beq.n	800717c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e02b      	b.n	80071d4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800717c:	4b17      	ldr	r3, [pc, #92]	; (80071dc <HAL_RCC_OscConfig+0x8ac>)
 800717e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007180:	08db      	lsrs	r3, r3, #3
 8007182:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007186:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	429a      	cmp	r2, r3
 8007190:	d01f      	beq.n	80071d2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007192:	4b12      	ldr	r3, [pc, #72]	; (80071dc <HAL_RCC_OscConfig+0x8ac>)
 8007194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007196:	4a11      	ldr	r2, [pc, #68]	; (80071dc <HAL_RCC_OscConfig+0x8ac>)
 8007198:	f023 0301 	bic.w	r3, r3, #1
 800719c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800719e:	f7fb fed3 	bl	8002f48 <HAL_GetTick>
 80071a2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80071a4:	bf00      	nop
 80071a6:	f7fb fecf 	bl	8002f48 <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d0f9      	beq.n	80071a6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80071b2:	4b0a      	ldr	r3, [pc, #40]	; (80071dc <HAL_RCC_OscConfig+0x8ac>)
 80071b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071b6:	4b0a      	ldr	r3, [pc, #40]	; (80071e0 <HAL_RCC_OscConfig+0x8b0>)
 80071b8:	4013      	ands	r3, r2
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80071be:	00d2      	lsls	r2, r2, #3
 80071c0:	4906      	ldr	r1, [pc, #24]	; (80071dc <HAL_RCC_OscConfig+0x8ac>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80071c6:	4b05      	ldr	r3, [pc, #20]	; (80071dc <HAL_RCC_OscConfig+0x8ac>)
 80071c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ca:	4a04      	ldr	r2, [pc, #16]	; (80071dc <HAL_RCC_OscConfig+0x8ac>)
 80071cc:	f043 0301 	orr.w	r3, r3, #1
 80071d0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3730      	adds	r7, #48	; 0x30
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	58024400 	.word	0x58024400
 80071e0:	ffff0007 	.word	0xffff0007

080071e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e19c      	b.n	8007532 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071f8:	4b8a      	ldr	r3, [pc, #552]	; (8007424 <HAL_RCC_ClockConfig+0x240>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 030f 	and.w	r3, r3, #15
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	429a      	cmp	r2, r3
 8007204:	d910      	bls.n	8007228 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007206:	4b87      	ldr	r3, [pc, #540]	; (8007424 <HAL_RCC_ClockConfig+0x240>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f023 020f 	bic.w	r2, r3, #15
 800720e:	4985      	ldr	r1, [pc, #532]	; (8007424 <HAL_RCC_ClockConfig+0x240>)
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	4313      	orrs	r3, r2
 8007214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007216:	4b83      	ldr	r3, [pc, #524]	; (8007424 <HAL_RCC_ClockConfig+0x240>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	429a      	cmp	r2, r3
 8007222:	d001      	beq.n	8007228 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e184      	b.n	8007532 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0304 	and.w	r3, r3, #4
 8007230:	2b00      	cmp	r3, #0
 8007232:	d010      	beq.n	8007256 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	691a      	ldr	r2, [r3, #16]
 8007238:	4b7b      	ldr	r3, [pc, #492]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007240:	429a      	cmp	r2, r3
 8007242:	d908      	bls.n	8007256 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007244:	4b78      	ldr	r3, [pc, #480]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	4975      	ldr	r1, [pc, #468]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 8007252:	4313      	orrs	r3, r2
 8007254:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0308 	and.w	r3, r3, #8
 800725e:	2b00      	cmp	r3, #0
 8007260:	d010      	beq.n	8007284 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	695a      	ldr	r2, [r3, #20]
 8007266:	4b70      	ldr	r3, [pc, #448]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800726e:	429a      	cmp	r2, r3
 8007270:	d908      	bls.n	8007284 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007272:	4b6d      	ldr	r3, [pc, #436]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	496a      	ldr	r1, [pc, #424]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 8007280:	4313      	orrs	r3, r2
 8007282:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0310 	and.w	r3, r3, #16
 800728c:	2b00      	cmp	r3, #0
 800728e:	d010      	beq.n	80072b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	699a      	ldr	r2, [r3, #24]
 8007294:	4b64      	ldr	r3, [pc, #400]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800729c:	429a      	cmp	r2, r3
 800729e:	d908      	bls.n	80072b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80072a0:	4b61      	ldr	r3, [pc, #388]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 80072a2:	69db      	ldr	r3, [r3, #28]
 80072a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	495e      	ldr	r1, [pc, #376]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0320 	and.w	r3, r3, #32
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d010      	beq.n	80072e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69da      	ldr	r2, [r3, #28]
 80072c2:	4b59      	ldr	r3, [pc, #356]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d908      	bls.n	80072e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80072ce:	4b56      	ldr	r3, [pc, #344]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	4953      	ldr	r1, [pc, #332]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d010      	beq.n	800730e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	4b4d      	ldr	r3, [pc, #308]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	f003 030f 	and.w	r3, r3, #15
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d908      	bls.n	800730e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072fc:	4b4a      	ldr	r3, [pc, #296]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	f023 020f 	bic.w	r2, r3, #15
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	4947      	ldr	r1, [pc, #284]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 800730a:	4313      	orrs	r3, r2
 800730c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b00      	cmp	r3, #0
 8007318:	d055      	beq.n	80073c6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800731a:	4b43      	ldr	r3, [pc, #268]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	4940      	ldr	r1, [pc, #256]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 8007328:	4313      	orrs	r3, r2
 800732a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	2b02      	cmp	r3, #2
 8007332:	d107      	bne.n	8007344 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007334:	4b3c      	ldr	r3, [pc, #240]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d121      	bne.n	8007384 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e0f6      	b.n	8007532 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	2b03      	cmp	r3, #3
 800734a:	d107      	bne.n	800735c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800734c:	4b36      	ldr	r3, [pc, #216]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d115      	bne.n	8007384 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e0ea      	b.n	8007532 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d107      	bne.n	8007374 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007364:	4b30      	ldr	r3, [pc, #192]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736c:	2b00      	cmp	r3, #0
 800736e:	d109      	bne.n	8007384 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e0de      	b.n	8007532 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007374:	4b2c      	ldr	r3, [pc, #176]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e0d6      	b.n	8007532 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007384:	4b28      	ldr	r3, [pc, #160]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	f023 0207 	bic.w	r2, r3, #7
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	4925      	ldr	r1, [pc, #148]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 8007392:	4313      	orrs	r3, r2
 8007394:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007396:	f7fb fdd7 	bl	8002f48 <HAL_GetTick>
 800739a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800739c:	e00a      	b.n	80073b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800739e:	f7fb fdd3 	bl	8002f48 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d901      	bls.n	80073b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e0be      	b.n	8007532 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073b4:	4b1c      	ldr	r3, [pc, #112]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d1eb      	bne.n	800739e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d010      	beq.n	80073f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	4b14      	ldr	r3, [pc, #80]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	f003 030f 	and.w	r3, r3, #15
 80073de:	429a      	cmp	r2, r3
 80073e0:	d208      	bcs.n	80073f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073e2:	4b11      	ldr	r3, [pc, #68]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	f023 020f 	bic.w	r2, r3, #15
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	490e      	ldr	r1, [pc, #56]	; (8007428 <HAL_RCC_ClockConfig+0x244>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073f4:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <HAL_RCC_ClockConfig+0x240>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 030f 	and.w	r3, r3, #15
 80073fc:	683a      	ldr	r2, [r7, #0]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d214      	bcs.n	800742c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007402:	4b08      	ldr	r3, [pc, #32]	; (8007424 <HAL_RCC_ClockConfig+0x240>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f023 020f 	bic.w	r2, r3, #15
 800740a:	4906      	ldr	r1, [pc, #24]	; (8007424 <HAL_RCC_ClockConfig+0x240>)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	4313      	orrs	r3, r2
 8007410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007412:	4b04      	ldr	r3, [pc, #16]	; (8007424 <HAL_RCC_ClockConfig+0x240>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 030f 	and.w	r3, r3, #15
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	429a      	cmp	r2, r3
 800741e:	d005      	beq.n	800742c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e086      	b.n	8007532 <HAL_RCC_ClockConfig+0x34e>
 8007424:	52002000 	.word	0x52002000
 8007428:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0304 	and.w	r3, r3, #4
 8007434:	2b00      	cmp	r3, #0
 8007436:	d010      	beq.n	800745a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	691a      	ldr	r2, [r3, #16]
 800743c:	4b3f      	ldr	r3, [pc, #252]	; (800753c <HAL_RCC_ClockConfig+0x358>)
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007444:	429a      	cmp	r2, r3
 8007446:	d208      	bcs.n	800745a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007448:	4b3c      	ldr	r3, [pc, #240]	; (800753c <HAL_RCC_ClockConfig+0x358>)
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	4939      	ldr	r1, [pc, #228]	; (800753c <HAL_RCC_ClockConfig+0x358>)
 8007456:	4313      	orrs	r3, r2
 8007458:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0308 	and.w	r3, r3, #8
 8007462:	2b00      	cmp	r3, #0
 8007464:	d010      	beq.n	8007488 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	695a      	ldr	r2, [r3, #20]
 800746a:	4b34      	ldr	r3, [pc, #208]	; (800753c <HAL_RCC_ClockConfig+0x358>)
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007472:	429a      	cmp	r2, r3
 8007474:	d208      	bcs.n	8007488 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007476:	4b31      	ldr	r3, [pc, #196]	; (800753c <HAL_RCC_ClockConfig+0x358>)
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	492e      	ldr	r1, [pc, #184]	; (800753c <HAL_RCC_ClockConfig+0x358>)
 8007484:	4313      	orrs	r3, r2
 8007486:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0310 	and.w	r3, r3, #16
 8007490:	2b00      	cmp	r3, #0
 8007492:	d010      	beq.n	80074b6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	699a      	ldr	r2, [r3, #24]
 8007498:	4b28      	ldr	r3, [pc, #160]	; (800753c <HAL_RCC_ClockConfig+0x358>)
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d208      	bcs.n	80074b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80074a4:	4b25      	ldr	r3, [pc, #148]	; (800753c <HAL_RCC_ClockConfig+0x358>)
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	4922      	ldr	r1, [pc, #136]	; (800753c <HAL_RCC_ClockConfig+0x358>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0320 	and.w	r3, r3, #32
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d010      	beq.n	80074e4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	69da      	ldr	r2, [r3, #28]
 80074c6:	4b1d      	ldr	r3, [pc, #116]	; (800753c <HAL_RCC_ClockConfig+0x358>)
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d208      	bcs.n	80074e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80074d2:	4b1a      	ldr	r3, [pc, #104]	; (800753c <HAL_RCC_ClockConfig+0x358>)
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	4917      	ldr	r1, [pc, #92]	; (800753c <HAL_RCC_ClockConfig+0x358>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80074e4:	f000 f834 	bl	8007550 <HAL_RCC_GetSysClockFreq>
 80074e8:	4602      	mov	r2, r0
 80074ea:	4b14      	ldr	r3, [pc, #80]	; (800753c <HAL_RCC_ClockConfig+0x358>)
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	0a1b      	lsrs	r3, r3, #8
 80074f0:	f003 030f 	and.w	r3, r3, #15
 80074f4:	4912      	ldr	r1, [pc, #72]	; (8007540 <HAL_RCC_ClockConfig+0x35c>)
 80074f6:	5ccb      	ldrb	r3, [r1, r3]
 80074f8:	f003 031f 	and.w	r3, r3, #31
 80074fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007500:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007502:	4b0e      	ldr	r3, [pc, #56]	; (800753c <HAL_RCC_ClockConfig+0x358>)
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	f003 030f 	and.w	r3, r3, #15
 800750a:	4a0d      	ldr	r2, [pc, #52]	; (8007540 <HAL_RCC_ClockConfig+0x35c>)
 800750c:	5cd3      	ldrb	r3, [r2, r3]
 800750e:	f003 031f 	and.w	r3, r3, #31
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	fa22 f303 	lsr.w	r3, r2, r3
 8007518:	4a0a      	ldr	r2, [pc, #40]	; (8007544 <HAL_RCC_ClockConfig+0x360>)
 800751a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800751c:	4a0a      	ldr	r2, [pc, #40]	; (8007548 <HAL_RCC_ClockConfig+0x364>)
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007522:	4b0a      	ldr	r3, [pc, #40]	; (800754c <HAL_RCC_ClockConfig+0x368>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4618      	mov	r0, r3
 8007528:	f7fb fcc4 	bl	8002eb4 <HAL_InitTick>
 800752c:	4603      	mov	r3, r0
 800752e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007530:	7bfb      	ldrb	r3, [r7, #15]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3718      	adds	r7, #24
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	58024400 	.word	0x58024400
 8007540:	0800f384 	.word	0x0800f384
 8007544:	2400002c 	.word	0x2400002c
 8007548:	24000028 	.word	0x24000028
 800754c:	24000030 	.word	0x24000030

08007550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007550:	b480      	push	{r7}
 8007552:	b089      	sub	sp, #36	; 0x24
 8007554:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007556:	4bb3      	ldr	r3, [pc, #716]	; (8007824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800755e:	2b18      	cmp	r3, #24
 8007560:	f200 8155 	bhi.w	800780e <HAL_RCC_GetSysClockFreq+0x2be>
 8007564:	a201      	add	r2, pc, #4	; (adr r2, 800756c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756a:	bf00      	nop
 800756c:	080075d1 	.word	0x080075d1
 8007570:	0800780f 	.word	0x0800780f
 8007574:	0800780f 	.word	0x0800780f
 8007578:	0800780f 	.word	0x0800780f
 800757c:	0800780f 	.word	0x0800780f
 8007580:	0800780f 	.word	0x0800780f
 8007584:	0800780f 	.word	0x0800780f
 8007588:	0800780f 	.word	0x0800780f
 800758c:	080075f7 	.word	0x080075f7
 8007590:	0800780f 	.word	0x0800780f
 8007594:	0800780f 	.word	0x0800780f
 8007598:	0800780f 	.word	0x0800780f
 800759c:	0800780f 	.word	0x0800780f
 80075a0:	0800780f 	.word	0x0800780f
 80075a4:	0800780f 	.word	0x0800780f
 80075a8:	0800780f 	.word	0x0800780f
 80075ac:	080075fd 	.word	0x080075fd
 80075b0:	0800780f 	.word	0x0800780f
 80075b4:	0800780f 	.word	0x0800780f
 80075b8:	0800780f 	.word	0x0800780f
 80075bc:	0800780f 	.word	0x0800780f
 80075c0:	0800780f 	.word	0x0800780f
 80075c4:	0800780f 	.word	0x0800780f
 80075c8:	0800780f 	.word	0x0800780f
 80075cc:	08007603 	.word	0x08007603
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075d0:	4b94      	ldr	r3, [pc, #592]	; (8007824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0320 	and.w	r3, r3, #32
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d009      	beq.n	80075f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075dc:	4b91      	ldr	r3, [pc, #580]	; (8007824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	08db      	lsrs	r3, r3, #3
 80075e2:	f003 0303 	and.w	r3, r3, #3
 80075e6:	4a90      	ldr	r2, [pc, #576]	; (8007828 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075e8:	fa22 f303 	lsr.w	r3, r2, r3
 80075ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80075ee:	e111      	b.n	8007814 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80075f0:	4b8d      	ldr	r3, [pc, #564]	; (8007828 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075f2:	61bb      	str	r3, [r7, #24]
      break;
 80075f4:	e10e      	b.n	8007814 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80075f6:	4b8d      	ldr	r3, [pc, #564]	; (800782c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80075f8:	61bb      	str	r3, [r7, #24]
      break;
 80075fa:	e10b      	b.n	8007814 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80075fc:	4b8c      	ldr	r3, [pc, #560]	; (8007830 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80075fe:	61bb      	str	r3, [r7, #24]
      break;
 8007600:	e108      	b.n	8007814 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007602:	4b88      	ldr	r3, [pc, #544]	; (8007824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007606:	f003 0303 	and.w	r3, r3, #3
 800760a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800760c:	4b85      	ldr	r3, [pc, #532]	; (8007824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800760e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007610:	091b      	lsrs	r3, r3, #4
 8007612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007616:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007618:	4b82      	ldr	r3, [pc, #520]	; (8007824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800761a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007622:	4b80      	ldr	r3, [pc, #512]	; (8007824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007626:	08db      	lsrs	r3, r3, #3
 8007628:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	fb02 f303 	mul.w	r3, r2, r3
 8007632:	ee07 3a90 	vmov	s15, r3
 8007636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 80e1 	beq.w	8007808 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2b02      	cmp	r3, #2
 800764a:	f000 8083 	beq.w	8007754 <HAL_RCC_GetSysClockFreq+0x204>
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	2b02      	cmp	r3, #2
 8007652:	f200 80a1 	bhi.w	8007798 <HAL_RCC_GetSysClockFreq+0x248>
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <HAL_RCC_GetSysClockFreq+0x114>
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d056      	beq.n	8007710 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007662:	e099      	b.n	8007798 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007664:	4b6f      	ldr	r3, [pc, #444]	; (8007824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0320 	and.w	r3, r3, #32
 800766c:	2b00      	cmp	r3, #0
 800766e:	d02d      	beq.n	80076cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007670:	4b6c      	ldr	r3, [pc, #432]	; (8007824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	08db      	lsrs	r3, r3, #3
 8007676:	f003 0303 	and.w	r3, r3, #3
 800767a:	4a6b      	ldr	r2, [pc, #428]	; (8007828 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800767c:	fa22 f303 	lsr.w	r3, r2, r3
 8007680:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	ee07 3a90 	vmov	s15, r3
 8007688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	ee07 3a90 	vmov	s15, r3
 8007692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800769a:	4b62      	ldr	r3, [pc, #392]	; (8007824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80076ae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007834 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80076ca:	e087      	b.n	80077dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	ee07 3a90 	vmov	s15, r3
 80076d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007838 <HAL_RCC_GetSysClockFreq+0x2e8>
 80076da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076de:	4b51      	ldr	r3, [pc, #324]	; (8007824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80076f2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007834 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800770a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800770e:	e065      	b.n	80077dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	ee07 3a90 	vmov	s15, r3
 8007716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800771a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800783c <HAL_RCC_GetSysClockFreq+0x2ec>
 800771e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007722:	4b40      	ldr	r3, [pc, #256]	; (8007824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007732:	ed97 6a02 	vldr	s12, [r7, #8]
 8007736:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007834 <HAL_RCC_GetSysClockFreq+0x2e4>
 800773a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800773e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800774a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800774e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007752:	e043      	b.n	80077dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	ee07 3a90 	vmov	s15, r3
 800775a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007840 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007766:	4b2f      	ldr	r3, [pc, #188]	; (8007824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800776e:	ee07 3a90 	vmov	s15, r3
 8007772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007776:	ed97 6a02 	vldr	s12, [r7, #8]
 800777a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007834 <HAL_RCC_GetSysClockFreq+0x2e4>
 800777e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800778a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800778e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007792:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007796:	e021      	b.n	80077dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	ee07 3a90 	vmov	s15, r3
 800779e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077a2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800783c <HAL_RCC_GetSysClockFreq+0x2ec>
 80077a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077aa:	4b1e      	ldr	r3, [pc, #120]	; (8007824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077b2:	ee07 3a90 	vmov	s15, r3
 80077b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80077be:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007834 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80077da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80077dc:	4b11      	ldr	r3, [pc, #68]	; (8007824 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e0:	0a5b      	lsrs	r3, r3, #9
 80077e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077e6:	3301      	adds	r3, #1
 80077e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	ee07 3a90 	vmov	s15, r3
 80077f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80077f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80077f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007800:	ee17 3a90 	vmov	r3, s15
 8007804:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007806:	e005      	b.n	8007814 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007808:	2300      	movs	r3, #0
 800780a:	61bb      	str	r3, [r7, #24]
      break;
 800780c:	e002      	b.n	8007814 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800780e:	4b07      	ldr	r3, [pc, #28]	; (800782c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007810:	61bb      	str	r3, [r7, #24]
      break;
 8007812:	bf00      	nop
  }

  return sysclockfreq;
 8007814:	69bb      	ldr	r3, [r7, #24]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3724      	adds	r7, #36	; 0x24
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	58024400 	.word	0x58024400
 8007828:	03d09000 	.word	0x03d09000
 800782c:	003d0900 	.word	0x003d0900
 8007830:	017d7840 	.word	0x017d7840
 8007834:	46000000 	.word	0x46000000
 8007838:	4c742400 	.word	0x4c742400
 800783c:	4a742400 	.word	0x4a742400
 8007840:	4bbebc20 	.word	0x4bbebc20

08007844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800784a:	f7ff fe81 	bl	8007550 <HAL_RCC_GetSysClockFreq>
 800784e:	4602      	mov	r2, r0
 8007850:	4b10      	ldr	r3, [pc, #64]	; (8007894 <HAL_RCC_GetHCLKFreq+0x50>)
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	0a1b      	lsrs	r3, r3, #8
 8007856:	f003 030f 	and.w	r3, r3, #15
 800785a:	490f      	ldr	r1, [pc, #60]	; (8007898 <HAL_RCC_GetHCLKFreq+0x54>)
 800785c:	5ccb      	ldrb	r3, [r1, r3]
 800785e:	f003 031f 	and.w	r3, r3, #31
 8007862:	fa22 f303 	lsr.w	r3, r2, r3
 8007866:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007868:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <HAL_RCC_GetHCLKFreq+0x50>)
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	f003 030f 	and.w	r3, r3, #15
 8007870:	4a09      	ldr	r2, [pc, #36]	; (8007898 <HAL_RCC_GetHCLKFreq+0x54>)
 8007872:	5cd3      	ldrb	r3, [r2, r3]
 8007874:	f003 031f 	and.w	r3, r3, #31
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	fa22 f303 	lsr.w	r3, r2, r3
 800787e:	4a07      	ldr	r2, [pc, #28]	; (800789c <HAL_RCC_GetHCLKFreq+0x58>)
 8007880:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007882:	4a07      	ldr	r2, [pc, #28]	; (80078a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007888:	4b04      	ldr	r3, [pc, #16]	; (800789c <HAL_RCC_GetHCLKFreq+0x58>)
 800788a:	681b      	ldr	r3, [r3, #0]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	58024400 	.word	0x58024400
 8007898:	0800f384 	.word	0x0800f384
 800789c:	2400002c 	.word	0x2400002c
 80078a0:	24000028 	.word	0x24000028

080078a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80078a8:	f7ff ffcc 	bl	8007844 <HAL_RCC_GetHCLKFreq>
 80078ac:	4602      	mov	r2, r0
 80078ae:	4b06      	ldr	r3, [pc, #24]	; (80078c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	091b      	lsrs	r3, r3, #4
 80078b4:	f003 0307 	and.w	r3, r3, #7
 80078b8:	4904      	ldr	r1, [pc, #16]	; (80078cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80078ba:	5ccb      	ldrb	r3, [r1, r3]
 80078bc:	f003 031f 	and.w	r3, r3, #31
 80078c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	58024400 	.word	0x58024400
 80078cc:	0800f384 	.word	0x0800f384

080078d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80078d4:	f7ff ffb6 	bl	8007844 <HAL_RCC_GetHCLKFreq>
 80078d8:	4602      	mov	r2, r0
 80078da:	4b06      	ldr	r3, [pc, #24]	; (80078f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	0a1b      	lsrs	r3, r3, #8
 80078e0:	f003 0307 	and.w	r3, r3, #7
 80078e4:	4904      	ldr	r1, [pc, #16]	; (80078f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80078e6:	5ccb      	ldrb	r3, [r1, r3]
 80078e8:	f003 031f 	and.w	r3, r3, #31
 80078ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	58024400 	.word	0x58024400
 80078f8:	0800f384 	.word	0x0800f384

080078fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007900:	b0ca      	sub	sp, #296	; 0x128
 8007902:	af00      	add	r7, sp, #0
 8007904:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007908:	2300      	movs	r3, #0
 800790a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800790e:	2300      	movs	r3, #0
 8007910:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007920:	2500      	movs	r5, #0
 8007922:	ea54 0305 	orrs.w	r3, r4, r5
 8007926:	d049      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800792c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800792e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007932:	d02f      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007934:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007938:	d828      	bhi.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800793a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800793e:	d01a      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007940:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007944:	d822      	bhi.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800794a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800794e:	d007      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007950:	e01c      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007952:	4bb8      	ldr	r3, [pc, #736]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	4ab7      	ldr	r2, [pc, #732]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800795c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800795e:	e01a      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007964:	3308      	adds	r3, #8
 8007966:	2102      	movs	r1, #2
 8007968:	4618      	mov	r0, r3
 800796a:	f002 fb61 	bl	800a030 <RCCEx_PLL2_Config>
 800796e:	4603      	mov	r3, r0
 8007970:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007974:	e00f      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800797a:	3328      	adds	r3, #40	; 0x28
 800797c:	2102      	movs	r1, #2
 800797e:	4618      	mov	r0, r3
 8007980:	f002 fc08 	bl	800a194 <RCCEx_PLL3_Config>
 8007984:	4603      	mov	r3, r0
 8007986:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800798a:	e004      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007992:	e000      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007996:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800799e:	4ba5      	ldr	r3, [pc, #660]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80079a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079ac:	4aa1      	ldr	r2, [pc, #644]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079ae:	430b      	orrs	r3, r1
 80079b0:	6513      	str	r3, [r2, #80]	; 0x50
 80079b2:	e003      	b.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80079bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80079c8:	f04f 0900 	mov.w	r9, #0
 80079cc:	ea58 0309 	orrs.w	r3, r8, r9
 80079d0:	d047      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80079d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d8:	2b04      	cmp	r3, #4
 80079da:	d82a      	bhi.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80079dc:	a201      	add	r2, pc, #4	; (adr r2, 80079e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80079de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e2:	bf00      	nop
 80079e4:	080079f9 	.word	0x080079f9
 80079e8:	08007a07 	.word	0x08007a07
 80079ec:	08007a1d 	.word	0x08007a1d
 80079f0:	08007a3b 	.word	0x08007a3b
 80079f4:	08007a3b 	.word	0x08007a3b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079f8:	4b8e      	ldr	r3, [pc, #568]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fc:	4a8d      	ldr	r2, [pc, #564]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a04:	e01a      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a0a:	3308      	adds	r3, #8
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f002 fb0e 	bl	800a030 <RCCEx_PLL2_Config>
 8007a14:	4603      	mov	r3, r0
 8007a16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a1a:	e00f      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a20:	3328      	adds	r3, #40	; 0x28
 8007a22:	2100      	movs	r1, #0
 8007a24:	4618      	mov	r0, r3
 8007a26:	f002 fbb5 	bl	800a194 <RCCEx_PLL3_Config>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a30:	e004      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a38:	e000      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007a3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10a      	bne.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a44:	4b7b      	ldr	r3, [pc, #492]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a48:	f023 0107 	bic.w	r1, r3, #7
 8007a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a52:	4a78      	ldr	r2, [pc, #480]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a54:	430b      	orrs	r3, r1
 8007a56:	6513      	str	r3, [r2, #80]	; 0x50
 8007a58:	e003      	b.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007a6e:	f04f 0b00 	mov.w	fp, #0
 8007a72:	ea5a 030b 	orrs.w	r3, sl, fp
 8007a76:	d04c      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a82:	d030      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a88:	d829      	bhi.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a8a:	2bc0      	cmp	r3, #192	; 0xc0
 8007a8c:	d02d      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007a8e:	2bc0      	cmp	r3, #192	; 0xc0
 8007a90:	d825      	bhi.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a92:	2b80      	cmp	r3, #128	; 0x80
 8007a94:	d018      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007a96:	2b80      	cmp	r3, #128	; 0x80
 8007a98:	d821      	bhi.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d002      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007a9e:	2b40      	cmp	r3, #64	; 0x40
 8007aa0:	d007      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007aa2:	e01c      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aa4:	4b63      	ldr	r3, [pc, #396]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa8:	4a62      	ldr	r2, [pc, #392]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007ab0:	e01c      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ab6:	3308      	adds	r3, #8
 8007ab8:	2100      	movs	r1, #0
 8007aba:	4618      	mov	r0, r3
 8007abc:	f002 fab8 	bl	800a030 <RCCEx_PLL2_Config>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007ac6:	e011      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007acc:	3328      	adds	r3, #40	; 0x28
 8007ace:	2100      	movs	r1, #0
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f002 fb5f 	bl	800a194 <RCCEx_PLL3_Config>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007adc:	e006      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ae4:	e002      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007ae6:	bf00      	nop
 8007ae8:	e000      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10a      	bne.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007af4:	4b4f      	ldr	r3, [pc, #316]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b02:	4a4c      	ldr	r2, [pc, #304]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b04:	430b      	orrs	r3, r1
 8007b06:	6513      	str	r3, [r2, #80]	; 0x50
 8007b08:	e003      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007b1e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007b22:	2300      	movs	r3, #0
 8007b24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007b28:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	d053      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b3e:	d035      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007b40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b44:	d82e      	bhi.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007b46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b4a:	d031      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007b4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b50:	d828      	bhi.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b56:	d01a      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007b58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b5c:	d822      	bhi.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007b62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b66:	d007      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007b68:	e01c      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b6a:	4b32      	ldr	r3, [pc, #200]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6e:	4a31      	ldr	r2, [pc, #196]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b76:	e01c      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b7c:	3308      	adds	r3, #8
 8007b7e:	2100      	movs	r1, #0
 8007b80:	4618      	mov	r0, r3
 8007b82:	f002 fa55 	bl	800a030 <RCCEx_PLL2_Config>
 8007b86:	4603      	mov	r3, r0
 8007b88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007b8c:	e011      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b92:	3328      	adds	r3, #40	; 0x28
 8007b94:	2100      	movs	r1, #0
 8007b96:	4618      	mov	r0, r3
 8007b98:	f002 fafc 	bl	800a194 <RCCEx_PLL3_Config>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ba2:	e006      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007baa:	e002      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007bac:	bf00      	nop
 8007bae:	e000      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10b      	bne.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007bba:	4b1e      	ldr	r3, [pc, #120]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bbe:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007bca:	4a1a      	ldr	r2, [pc, #104]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	6593      	str	r3, [r2, #88]	; 0x58
 8007bd0:	e003      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007be6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007bea:	2300      	movs	r3, #0
 8007bec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007bf0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	d056      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c06:	d038      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007c08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c0c:	d831      	bhi.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c12:	d034      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007c14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c18:	d82b      	bhi.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c1e:	d01d      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007c20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c24:	d825      	bhi.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d006      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007c2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c2e:	d00a      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007c30:	e01f      	b.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c32:	bf00      	nop
 8007c34:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c38:	4ba2      	ldr	r3, [pc, #648]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3c:	4aa1      	ldr	r2, [pc, #644]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c44:	e01c      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f002 f9ee 	bl	800a030 <RCCEx_PLL2_Config>
 8007c54:	4603      	mov	r3, r0
 8007c56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007c5a:	e011      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c60:	3328      	adds	r3, #40	; 0x28
 8007c62:	2100      	movs	r1, #0
 8007c64:	4618      	mov	r0, r3
 8007c66:	f002 fa95 	bl	800a194 <RCCEx_PLL3_Config>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c70:	e006      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c78:	e002      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007c7a:	bf00      	nop
 8007c7c:	e000      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007c7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10b      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007c88:	4b8e      	ldr	r3, [pc, #568]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c8c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c98:	4a8a      	ldr	r2, [pc, #552]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c9a:	430b      	orrs	r3, r1
 8007c9c:	6593      	str	r3, [r2, #88]	; 0x58
 8007c9e:	e003      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ca4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007cb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007cb8:	2300      	movs	r3, #0
 8007cba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007cbe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	d03a      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cce:	2b30      	cmp	r3, #48	; 0x30
 8007cd0:	d01f      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007cd2:	2b30      	cmp	r3, #48	; 0x30
 8007cd4:	d819      	bhi.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007cd6:	2b20      	cmp	r3, #32
 8007cd8:	d00c      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007cda:	2b20      	cmp	r3, #32
 8007cdc:	d815      	bhi.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d019      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007ce2:	2b10      	cmp	r3, #16
 8007ce4:	d111      	bne.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ce6:	4b77      	ldr	r3, [pc, #476]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cea:	4a76      	ldr	r2, [pc, #472]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007cf2:	e011      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf8:	3308      	adds	r3, #8
 8007cfa:	2102      	movs	r1, #2
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f002 f997 	bl	800a030 <RCCEx_PLL2_Config>
 8007d02:	4603      	mov	r3, r0
 8007d04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007d08:	e006      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d10:	e002      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007d12:	bf00      	nop
 8007d14:	e000      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10a      	bne.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d20:	4b68      	ldr	r3, [pc, #416]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d24:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d2e:	4a65      	ldr	r2, [pc, #404]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d30:	430b      	orrs	r3, r1
 8007d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d34:	e003      	b.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d46:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007d4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007d4e:	2300      	movs	r3, #0
 8007d50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d54:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	d051      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d68:	d035      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007d6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d6e:	d82e      	bhi.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007d70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d74:	d031      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007d76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d7a:	d828      	bhi.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d80:	d01a      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d86:	d822      	bhi.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d90:	d007      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007d92:	e01c      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d94:	4b4b      	ldr	r3, [pc, #300]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d98:	4a4a      	ldr	r2, [pc, #296]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007da0:	e01c      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007da6:	3308      	adds	r3, #8
 8007da8:	2100      	movs	r1, #0
 8007daa:	4618      	mov	r0, r3
 8007dac:	f002 f940 	bl	800a030 <RCCEx_PLL2_Config>
 8007db0:	4603      	mov	r3, r0
 8007db2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007db6:	e011      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dbc:	3328      	adds	r3, #40	; 0x28
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f002 f9e7 	bl	800a194 <RCCEx_PLL3_Config>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007dcc:	e006      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007dd4:	e002      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007dd6:	bf00      	nop
 8007dd8:	e000      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10a      	bne.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007de4:	4b37      	ldr	r3, [pc, #220]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df2:	4a34      	ldr	r2, [pc, #208]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007df4:	430b      	orrs	r3, r1
 8007df6:	6513      	str	r3, [r2, #80]	; 0x50
 8007df8:	e003      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007e0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e12:	2300      	movs	r3, #0
 8007e14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007e18:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	d056      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e2c:	d033      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007e2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e32:	d82c      	bhi.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e38:	d02f      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007e3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e3e:	d826      	bhi.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e44:	d02b      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007e46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e4a:	d820      	bhi.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e50:	d012      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e56:	d81a      	bhi.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d022      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e60:	d115      	bne.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e66:	3308      	adds	r3, #8
 8007e68:	2101      	movs	r1, #1
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f002 f8e0 	bl	800a030 <RCCEx_PLL2_Config>
 8007e70:	4603      	mov	r3, r0
 8007e72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007e76:	e015      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e7c:	3328      	adds	r3, #40	; 0x28
 8007e7e:	2101      	movs	r1, #1
 8007e80:	4618      	mov	r0, r3
 8007e82:	f002 f987 	bl	800a194 <RCCEx_PLL3_Config>
 8007e86:	4603      	mov	r3, r0
 8007e88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007e8c:	e00a      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e94:	e006      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e96:	bf00      	nop
 8007e98:	e004      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e9a:	bf00      	nop
 8007e9c:	e002      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e9e:	bf00      	nop
 8007ea0:	e000      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10d      	bne.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007eac:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eba:	4a02      	ldr	r2, [pc, #8]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ebc:	430b      	orrs	r3, r1
 8007ebe:	6513      	str	r3, [r2, #80]	; 0x50
 8007ec0:	e006      	b.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007ec2:	bf00      	nop
 8007ec4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ecc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007edc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ee6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007eea:	460b      	mov	r3, r1
 8007eec:	4313      	orrs	r3, r2
 8007eee:	d055      	beq.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ef4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007efc:	d033      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f02:	d82c      	bhi.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f08:	d02f      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f0e:	d826      	bhi.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f14:	d02b      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007f16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f1a:	d820      	bhi.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f20:	d012      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f26:	d81a      	bhi.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d022      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007f2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f30:	d115      	bne.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f36:	3308      	adds	r3, #8
 8007f38:	2101      	movs	r1, #1
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f002 f878 	bl	800a030 <RCCEx_PLL2_Config>
 8007f40:	4603      	mov	r3, r0
 8007f42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007f46:	e015      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f4c:	3328      	adds	r3, #40	; 0x28
 8007f4e:	2101      	movs	r1, #1
 8007f50:	4618      	mov	r0, r3
 8007f52:	f002 f91f 	bl	800a194 <RCCEx_PLL3_Config>
 8007f56:	4603      	mov	r3, r0
 8007f58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007f5c:	e00a      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f64:	e006      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007f66:	bf00      	nop
 8007f68:	e004      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007f6a:	bf00      	nop
 8007f6c:	e002      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007f6e:	bf00      	nop
 8007f70:	e000      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10b      	bne.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007f7c:	4ba3      	ldr	r3, [pc, #652]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f80:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f8c:	4a9f      	ldr	r2, [pc, #636]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f8e:	430b      	orrs	r3, r1
 8007f90:	6593      	str	r3, [r2, #88]	; 0x58
 8007f92:	e003      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007fa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007fac:	2300      	movs	r3, #0
 8007fae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007fb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	d037      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fc6:	d00e      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fcc:	d816      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d018      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fd6:	d111      	bne.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fd8:	4b8c      	ldr	r3, [pc, #560]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fdc:	4a8b      	ldr	r2, [pc, #556]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007fe4:	e00f      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fea:	3308      	adds	r3, #8
 8007fec:	2101      	movs	r1, #1
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f002 f81e 	bl	800a030 <RCCEx_PLL2_Config>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007ffa:	e004      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008002:	e000      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10a      	bne.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800800e:	4b7f      	ldr	r3, [pc, #508]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008012:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800801a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800801c:	4a7b      	ldr	r2, [pc, #492]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800801e:	430b      	orrs	r3, r1
 8008020:	6513      	str	r3, [r2, #80]	; 0x50
 8008022:	e003      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008024:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008028:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800802c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800803c:	2300      	movs	r3, #0
 800803e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008042:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008046:	460b      	mov	r3, r1
 8008048:	4313      	orrs	r3, r2
 800804a:	d039      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800804c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008052:	2b03      	cmp	r3, #3
 8008054:	d81c      	bhi.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008056:	a201      	add	r2, pc, #4	; (adr r2, 800805c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805c:	08008099 	.word	0x08008099
 8008060:	0800806d 	.word	0x0800806d
 8008064:	0800807b 	.word	0x0800807b
 8008068:	08008099 	.word	0x08008099
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800806c:	4b67      	ldr	r3, [pc, #412]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800806e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008070:	4a66      	ldr	r2, [pc, #408]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008076:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008078:	e00f      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800807a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800807e:	3308      	adds	r3, #8
 8008080:	2102      	movs	r1, #2
 8008082:	4618      	mov	r0, r3
 8008084:	f001 ffd4 	bl	800a030 <RCCEx_PLL2_Config>
 8008088:	4603      	mov	r3, r0
 800808a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800808e:	e004      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008096:	e000      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800809a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10a      	bne.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80080a2:	4b5a      	ldr	r3, [pc, #360]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080a6:	f023 0103 	bic.w	r1, r3, #3
 80080aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080b0:	4a56      	ldr	r2, [pc, #344]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080b2:	430b      	orrs	r3, r1
 80080b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080b6:	e003      	b.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80080cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080d0:	2300      	movs	r3, #0
 80080d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80080d6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80080da:	460b      	mov	r3, r1
 80080dc:	4313      	orrs	r3, r2
 80080de:	f000 809f 	beq.w	8008220 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080e2:	4b4b      	ldr	r3, [pc, #300]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a4a      	ldr	r2, [pc, #296]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80080e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080ee:	f7fa ff2b 	bl	8002f48 <HAL_GetTick>
 80080f2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080f6:	e00b      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080f8:	f7fa ff26 	bl	8002f48 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	2b64      	cmp	r3, #100	; 0x64
 8008106:	d903      	bls.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008108:	2303      	movs	r3, #3
 800810a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800810e:	e005      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008110:	4b3f      	ldr	r3, [pc, #252]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008118:	2b00      	cmp	r3, #0
 800811a:	d0ed      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800811c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008120:	2b00      	cmp	r3, #0
 8008122:	d179      	bne.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008124:	4b39      	ldr	r3, [pc, #228]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008126:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800812c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008130:	4053      	eors	r3, r2
 8008132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008136:	2b00      	cmp	r3, #0
 8008138:	d015      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800813a:	4b34      	ldr	r3, [pc, #208]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800813c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008142:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008146:	4b31      	ldr	r3, [pc, #196]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814a:	4a30      	ldr	r2, [pc, #192]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800814c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008150:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008152:	4b2e      	ldr	r3, [pc, #184]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008156:	4a2d      	ldr	r2, [pc, #180]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800815c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800815e:	4a2b      	ldr	r2, [pc, #172]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008160:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008164:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800816a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800816e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008172:	d118      	bne.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008174:	f7fa fee8 	bl	8002f48 <HAL_GetTick>
 8008178:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800817c:	e00d      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800817e:	f7fa fee3 	bl	8002f48 <HAL_GetTick>
 8008182:	4602      	mov	r2, r0
 8008184:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008188:	1ad2      	subs	r2, r2, r3
 800818a:	f241 3388 	movw	r3, #5000	; 0x1388
 800818e:	429a      	cmp	r2, r3
 8008190:	d903      	bls.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008198:	e005      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800819a:	4b1c      	ldr	r3, [pc, #112]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800819c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800819e:	f003 0302 	and.w	r3, r3, #2
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d0eb      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80081a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d129      	bne.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80081b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081be:	d10e      	bne.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80081c0:	4b12      	ldr	r3, [pc, #72]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80081c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80081d0:	091a      	lsrs	r2, r3, #4
 80081d2:	4b10      	ldr	r3, [pc, #64]	; (8008214 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80081d4:	4013      	ands	r3, r2
 80081d6:	4a0d      	ldr	r2, [pc, #52]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081d8:	430b      	orrs	r3, r1
 80081da:	6113      	str	r3, [r2, #16]
 80081dc:	e005      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80081de:	4b0b      	ldr	r3, [pc, #44]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	4a0a      	ldr	r2, [pc, #40]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80081e8:	6113      	str	r3, [r2, #16]
 80081ea:	4b08      	ldr	r3, [pc, #32]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081ec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80081ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80081f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081fa:	4a04      	ldr	r2, [pc, #16]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081fc:	430b      	orrs	r3, r1
 80081fe:	6713      	str	r3, [r2, #112]	; 0x70
 8008200:	e00e      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008206:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800820a:	e009      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800820c:	58024400 	.word	0x58024400
 8008210:	58024800 	.word	0x58024800
 8008214:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008218:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800821c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008228:	f002 0301 	and.w	r3, r2, #1
 800822c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008230:	2300      	movs	r3, #0
 8008232:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008236:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800823a:	460b      	mov	r3, r1
 800823c:	4313      	orrs	r3, r2
 800823e:	f000 8089 	beq.w	8008354 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008246:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008248:	2b28      	cmp	r3, #40	; 0x28
 800824a:	d86b      	bhi.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800824c:	a201      	add	r2, pc, #4	; (adr r2, 8008254 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800824e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008252:	bf00      	nop
 8008254:	0800832d 	.word	0x0800832d
 8008258:	08008325 	.word	0x08008325
 800825c:	08008325 	.word	0x08008325
 8008260:	08008325 	.word	0x08008325
 8008264:	08008325 	.word	0x08008325
 8008268:	08008325 	.word	0x08008325
 800826c:	08008325 	.word	0x08008325
 8008270:	08008325 	.word	0x08008325
 8008274:	080082f9 	.word	0x080082f9
 8008278:	08008325 	.word	0x08008325
 800827c:	08008325 	.word	0x08008325
 8008280:	08008325 	.word	0x08008325
 8008284:	08008325 	.word	0x08008325
 8008288:	08008325 	.word	0x08008325
 800828c:	08008325 	.word	0x08008325
 8008290:	08008325 	.word	0x08008325
 8008294:	0800830f 	.word	0x0800830f
 8008298:	08008325 	.word	0x08008325
 800829c:	08008325 	.word	0x08008325
 80082a0:	08008325 	.word	0x08008325
 80082a4:	08008325 	.word	0x08008325
 80082a8:	08008325 	.word	0x08008325
 80082ac:	08008325 	.word	0x08008325
 80082b0:	08008325 	.word	0x08008325
 80082b4:	0800832d 	.word	0x0800832d
 80082b8:	08008325 	.word	0x08008325
 80082bc:	08008325 	.word	0x08008325
 80082c0:	08008325 	.word	0x08008325
 80082c4:	08008325 	.word	0x08008325
 80082c8:	08008325 	.word	0x08008325
 80082cc:	08008325 	.word	0x08008325
 80082d0:	08008325 	.word	0x08008325
 80082d4:	0800832d 	.word	0x0800832d
 80082d8:	08008325 	.word	0x08008325
 80082dc:	08008325 	.word	0x08008325
 80082e0:	08008325 	.word	0x08008325
 80082e4:	08008325 	.word	0x08008325
 80082e8:	08008325 	.word	0x08008325
 80082ec:	08008325 	.word	0x08008325
 80082f0:	08008325 	.word	0x08008325
 80082f4:	0800832d 	.word	0x0800832d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082fc:	3308      	adds	r3, #8
 80082fe:	2101      	movs	r1, #1
 8008300:	4618      	mov	r0, r3
 8008302:	f001 fe95 	bl	800a030 <RCCEx_PLL2_Config>
 8008306:	4603      	mov	r3, r0
 8008308:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800830c:	e00f      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800830e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008312:	3328      	adds	r3, #40	; 0x28
 8008314:	2101      	movs	r1, #1
 8008316:	4618      	mov	r0, r3
 8008318:	f001 ff3c 	bl	800a194 <RCCEx_PLL3_Config>
 800831c:	4603      	mov	r3, r0
 800831e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008322:	e004      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800832a:	e000      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800832c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800832e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10a      	bne.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008336:	4bbf      	ldr	r3, [pc, #764]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800833a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800833e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008344:	4abb      	ldr	r2, [pc, #748]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008346:	430b      	orrs	r3, r1
 8008348:	6553      	str	r3, [r2, #84]	; 0x54
 800834a:	e003      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800834c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008350:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835c:	f002 0302 	and.w	r3, r2, #2
 8008360:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008364:	2300      	movs	r3, #0
 8008366:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800836a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800836e:	460b      	mov	r3, r1
 8008370:	4313      	orrs	r3, r2
 8008372:	d041      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800837a:	2b05      	cmp	r3, #5
 800837c:	d824      	bhi.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800837e:	a201      	add	r2, pc, #4	; (adr r2, 8008384 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008384:	080083d1 	.word	0x080083d1
 8008388:	0800839d 	.word	0x0800839d
 800838c:	080083b3 	.word	0x080083b3
 8008390:	080083d1 	.word	0x080083d1
 8008394:	080083d1 	.word	0x080083d1
 8008398:	080083d1 	.word	0x080083d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800839c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a0:	3308      	adds	r3, #8
 80083a2:	2101      	movs	r1, #1
 80083a4:	4618      	mov	r0, r3
 80083a6:	f001 fe43 	bl	800a030 <RCCEx_PLL2_Config>
 80083aa:	4603      	mov	r3, r0
 80083ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80083b0:	e00f      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083b6:	3328      	adds	r3, #40	; 0x28
 80083b8:	2101      	movs	r1, #1
 80083ba:	4618      	mov	r0, r3
 80083bc:	f001 feea 	bl	800a194 <RCCEx_PLL3_Config>
 80083c0:	4603      	mov	r3, r0
 80083c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80083c6:	e004      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083ce:	e000      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80083d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10a      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80083da:	4b96      	ldr	r3, [pc, #600]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083de:	f023 0107 	bic.w	r1, r3, #7
 80083e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083e8:	4a92      	ldr	r2, [pc, #584]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083ea:	430b      	orrs	r3, r1
 80083ec:	6553      	str	r3, [r2, #84]	; 0x54
 80083ee:	e003      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008400:	f002 0304 	and.w	r3, r2, #4
 8008404:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008408:	2300      	movs	r3, #0
 800840a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800840e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008412:	460b      	mov	r3, r1
 8008414:	4313      	orrs	r3, r2
 8008416:	d044      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800841c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008420:	2b05      	cmp	r3, #5
 8008422:	d825      	bhi.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008424:	a201      	add	r2, pc, #4	; (adr r2, 800842c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842a:	bf00      	nop
 800842c:	08008479 	.word	0x08008479
 8008430:	08008445 	.word	0x08008445
 8008434:	0800845b 	.word	0x0800845b
 8008438:	08008479 	.word	0x08008479
 800843c:	08008479 	.word	0x08008479
 8008440:	08008479 	.word	0x08008479
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008448:	3308      	adds	r3, #8
 800844a:	2101      	movs	r1, #1
 800844c:	4618      	mov	r0, r3
 800844e:	f001 fdef 	bl	800a030 <RCCEx_PLL2_Config>
 8008452:	4603      	mov	r3, r0
 8008454:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008458:	e00f      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800845a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800845e:	3328      	adds	r3, #40	; 0x28
 8008460:	2101      	movs	r1, #1
 8008462:	4618      	mov	r0, r3
 8008464:	f001 fe96 	bl	800a194 <RCCEx_PLL3_Config>
 8008468:	4603      	mov	r3, r0
 800846a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800846e:	e004      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008476:	e000      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800847a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10b      	bne.n	800849a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008482:	4b6c      	ldr	r3, [pc, #432]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008486:	f023 0107 	bic.w	r1, r3, #7
 800848a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800848e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008492:	4a68      	ldr	r2, [pc, #416]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008494:	430b      	orrs	r3, r1
 8008496:	6593      	str	r3, [r2, #88]	; 0x58
 8008498:	e003      	b.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800849a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800849e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80084a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084aa:	f002 0320 	and.w	r3, r2, #32
 80084ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80084b2:	2300      	movs	r3, #0
 80084b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80084bc:	460b      	mov	r3, r1
 80084be:	4313      	orrs	r3, r2
 80084c0:	d055      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80084c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084ce:	d033      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80084d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084d4:	d82c      	bhi.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80084d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084da:	d02f      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80084dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084e0:	d826      	bhi.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80084e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084e6:	d02b      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80084e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084ec:	d820      	bhi.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80084ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084f2:	d012      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80084f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084f8:	d81a      	bhi.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d022      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80084fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008502:	d115      	bne.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008508:	3308      	adds	r3, #8
 800850a:	2100      	movs	r1, #0
 800850c:	4618      	mov	r0, r3
 800850e:	f001 fd8f 	bl	800a030 <RCCEx_PLL2_Config>
 8008512:	4603      	mov	r3, r0
 8008514:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008518:	e015      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800851a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800851e:	3328      	adds	r3, #40	; 0x28
 8008520:	2102      	movs	r1, #2
 8008522:	4618      	mov	r0, r3
 8008524:	f001 fe36 	bl	800a194 <RCCEx_PLL3_Config>
 8008528:	4603      	mov	r3, r0
 800852a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800852e:	e00a      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008536:	e006      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008538:	bf00      	nop
 800853a:	e004      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800853c:	bf00      	nop
 800853e:	e002      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008540:	bf00      	nop
 8008542:	e000      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008544:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008546:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10b      	bne.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800854e:	4b39      	ldr	r3, [pc, #228]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008552:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800855a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800855e:	4a35      	ldr	r2, [pc, #212]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008560:	430b      	orrs	r3, r1
 8008562:	6553      	str	r3, [r2, #84]	; 0x54
 8008564:	e003      	b.n	800856e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008566:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800856a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800856e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008576:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800857a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800857e:	2300      	movs	r3, #0
 8008580:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008584:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008588:	460b      	mov	r3, r1
 800858a:	4313      	orrs	r3, r2
 800858c:	d058      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800858e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008592:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008596:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800859a:	d033      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800859c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80085a0:	d82c      	bhi.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80085a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085a6:	d02f      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80085a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ac:	d826      	bhi.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80085ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085b2:	d02b      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80085b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085b8:	d820      	bhi.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80085ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085be:	d012      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80085c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085c4:	d81a      	bhi.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d022      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80085ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085ce:	d115      	bne.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085d4:	3308      	adds	r3, #8
 80085d6:	2100      	movs	r1, #0
 80085d8:	4618      	mov	r0, r3
 80085da:	f001 fd29 	bl	800a030 <RCCEx_PLL2_Config>
 80085de:	4603      	mov	r3, r0
 80085e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80085e4:	e015      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ea:	3328      	adds	r3, #40	; 0x28
 80085ec:	2102      	movs	r1, #2
 80085ee:	4618      	mov	r0, r3
 80085f0:	f001 fdd0 	bl	800a194 <RCCEx_PLL3_Config>
 80085f4:	4603      	mov	r3, r0
 80085f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80085fa:	e00a      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008602:	e006      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008604:	bf00      	nop
 8008606:	e004      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008608:	bf00      	nop
 800860a:	e002      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800860c:	bf00      	nop
 800860e:	e000      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10e      	bne.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800861a:	4b06      	ldr	r3, [pc, #24]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800861c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800861e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008626:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800862a:	4a02      	ldr	r2, [pc, #8]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800862c:	430b      	orrs	r3, r1
 800862e:	6593      	str	r3, [r2, #88]	; 0x58
 8008630:	e006      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008632:	bf00      	nop
 8008634:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008638:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800863c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008648:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800864c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008650:	2300      	movs	r3, #0
 8008652:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008656:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800865a:	460b      	mov	r3, r1
 800865c:	4313      	orrs	r3, r2
 800865e:	d055      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008664:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008668:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800866c:	d033      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800866e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008672:	d82c      	bhi.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008678:	d02f      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800867a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800867e:	d826      	bhi.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008680:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008684:	d02b      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008686:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800868a:	d820      	bhi.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800868c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008690:	d012      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008692:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008696:	d81a      	bhi.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008698:	2b00      	cmp	r3, #0
 800869a:	d022      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800869c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086a0:	d115      	bne.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086a6:	3308      	adds	r3, #8
 80086a8:	2100      	movs	r1, #0
 80086aa:	4618      	mov	r0, r3
 80086ac:	f001 fcc0 	bl	800a030 <RCCEx_PLL2_Config>
 80086b0:	4603      	mov	r3, r0
 80086b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80086b6:	e015      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086bc:	3328      	adds	r3, #40	; 0x28
 80086be:	2102      	movs	r1, #2
 80086c0:	4618      	mov	r0, r3
 80086c2:	f001 fd67 	bl	800a194 <RCCEx_PLL3_Config>
 80086c6:	4603      	mov	r3, r0
 80086c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80086cc:	e00a      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086d4:	e006      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80086d6:	bf00      	nop
 80086d8:	e004      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80086da:	bf00      	nop
 80086dc:	e002      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80086de:	bf00      	nop
 80086e0:	e000      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80086e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10b      	bne.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80086ec:	4ba1      	ldr	r3, [pc, #644]	; (8008974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80086f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80086fc:	4a9d      	ldr	r2, [pc, #628]	; (8008974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086fe:	430b      	orrs	r3, r1
 8008700:	6593      	str	r3, [r2, #88]	; 0x58
 8008702:	e003      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008704:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008708:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800870c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008714:	f002 0308 	and.w	r3, r2, #8
 8008718:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800871c:	2300      	movs	r3, #0
 800871e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008722:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008726:	460b      	mov	r3, r1
 8008728:	4313      	orrs	r3, r2
 800872a:	d01e      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800872c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008738:	d10c      	bne.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800873a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800873e:	3328      	adds	r3, #40	; 0x28
 8008740:	2102      	movs	r1, #2
 8008742:	4618      	mov	r0, r3
 8008744:	f001 fd26 	bl	800a194 <RCCEx_PLL3_Config>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008754:	4b87      	ldr	r3, [pc, #540]	; (8008974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008758:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800875c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008764:	4a83      	ldr	r2, [pc, #524]	; (8008974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008766:	430b      	orrs	r3, r1
 8008768:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800876a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800876e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008772:	f002 0310 	and.w	r3, r2, #16
 8008776:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800877a:	2300      	movs	r3, #0
 800877c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008780:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008784:	460b      	mov	r3, r1
 8008786:	4313      	orrs	r3, r2
 8008788:	d01e      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800878a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800878e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008796:	d10c      	bne.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800879c:	3328      	adds	r3, #40	; 0x28
 800879e:	2102      	movs	r1, #2
 80087a0:	4618      	mov	r0, r3
 80087a2:	f001 fcf7 	bl	800a194 <RCCEx_PLL3_Config>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80087b2:	4b70      	ldr	r3, [pc, #448]	; (8008974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80087ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80087c2:	4a6c      	ldr	r2, [pc, #432]	; (8008974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087c4:	430b      	orrs	r3, r1
 80087c6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80087c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80087d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80087d8:	2300      	movs	r3, #0
 80087da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80087de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80087e2:	460b      	mov	r3, r1
 80087e4:	4313      	orrs	r3, r2
 80087e6:	d03e      	beq.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80087e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80087f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087f4:	d022      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80087f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087fa:	d81b      	bhi.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008804:	d00b      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008806:	e015      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800880c:	3308      	adds	r3, #8
 800880e:	2100      	movs	r1, #0
 8008810:	4618      	mov	r0, r3
 8008812:	f001 fc0d 	bl	800a030 <RCCEx_PLL2_Config>
 8008816:	4603      	mov	r3, r0
 8008818:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800881c:	e00f      	b.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800881e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008822:	3328      	adds	r3, #40	; 0x28
 8008824:	2102      	movs	r1, #2
 8008826:	4618      	mov	r0, r3
 8008828:	f001 fcb4 	bl	800a194 <RCCEx_PLL3_Config>
 800882c:	4603      	mov	r3, r0
 800882e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008832:	e004      	b.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800883a:	e000      	b.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800883c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800883e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10b      	bne.n	800885e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008846:	4b4b      	ldr	r3, [pc, #300]	; (8008974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800884a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800884e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008852:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008856:	4a47      	ldr	r2, [pc, #284]	; (8008974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008858:	430b      	orrs	r3, r1
 800885a:	6593      	str	r3, [r2, #88]	; 0x58
 800885c:	e003      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800885e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008862:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800886a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008872:	67bb      	str	r3, [r7, #120]	; 0x78
 8008874:	2300      	movs	r3, #0
 8008876:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008878:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800887c:	460b      	mov	r3, r1
 800887e:	4313      	orrs	r3, r2
 8008880:	d03b      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800888a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800888e:	d01f      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008890:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008894:	d818      	bhi.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800889a:	d003      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800889c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088a0:	d007      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80088a2:	e011      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088a4:	4b33      	ldr	r3, [pc, #204]	; (8008974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a8:	4a32      	ldr	r2, [pc, #200]	; (8008974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80088b0:	e00f      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088b6:	3328      	adds	r3, #40	; 0x28
 80088b8:	2101      	movs	r1, #1
 80088ba:	4618      	mov	r0, r3
 80088bc:	f001 fc6a 	bl	800a194 <RCCEx_PLL3_Config>
 80088c0:	4603      	mov	r3, r0
 80088c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80088c6:	e004      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80088ce:	e000      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80088d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10b      	bne.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80088da:	4b26      	ldr	r3, [pc, #152]	; (8008974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088de:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80088e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ea:	4a22      	ldr	r2, [pc, #136]	; (8008974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088ec:	430b      	orrs	r3, r1
 80088ee:	6553      	str	r3, [r2, #84]	; 0x54
 80088f0:	e003      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80088fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008902:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008906:	673b      	str	r3, [r7, #112]	; 0x70
 8008908:	2300      	movs	r3, #0
 800890a:	677b      	str	r3, [r7, #116]	; 0x74
 800890c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008910:	460b      	mov	r3, r1
 8008912:	4313      	orrs	r3, r2
 8008914:	d034      	beq.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800891a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800891c:	2b00      	cmp	r3, #0
 800891e:	d003      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008924:	d007      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008926:	e011      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008928:	4b12      	ldr	r3, [pc, #72]	; (8008974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800892a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892c:	4a11      	ldr	r2, [pc, #68]	; (8008974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800892e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008932:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008934:	e00e      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800893a:	3308      	adds	r3, #8
 800893c:	2102      	movs	r1, #2
 800893e:	4618      	mov	r0, r3
 8008940:	f001 fb76 	bl	800a030 <RCCEx_PLL2_Config>
 8008944:	4603      	mov	r3, r0
 8008946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800894a:	e003      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008954:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10d      	bne.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800895c:	4b05      	ldr	r3, [pc, #20]	; (8008974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800895e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008960:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800896a:	4a02      	ldr	r2, [pc, #8]	; (8008974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800896c:	430b      	orrs	r3, r1
 800896e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008970:	e006      	b.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008972:	bf00      	nop
 8008974:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800897c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008988:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800898c:	66bb      	str	r3, [r7, #104]	; 0x68
 800898e:	2300      	movs	r3, #0
 8008990:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008992:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008996:	460b      	mov	r3, r1
 8008998:	4313      	orrs	r3, r2
 800899a:	d00c      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800899c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089a0:	3328      	adds	r3, #40	; 0x28
 80089a2:	2102      	movs	r1, #2
 80089a4:	4618      	mov	r0, r3
 80089a6:	f001 fbf5 	bl	800a194 <RCCEx_PLL3_Config>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80089b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089be:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80089c2:	663b      	str	r3, [r7, #96]	; 0x60
 80089c4:	2300      	movs	r3, #0
 80089c6:	667b      	str	r3, [r7, #100]	; 0x64
 80089c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80089cc:	460b      	mov	r3, r1
 80089ce:	4313      	orrs	r3, r2
 80089d0:	d038      	beq.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80089d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089de:	d018      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80089e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089e4:	d811      	bhi.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80089e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089ea:	d014      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80089ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089f0:	d80b      	bhi.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d011      	beq.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80089f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089fa:	d106      	bne.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089fc:	4bc3      	ldr	r3, [pc, #780]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a00:	4ac2      	ldr	r2, [pc, #776]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008a08:	e008      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a10:	e004      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a12:	bf00      	nop
 8008a14:	e002      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a16:	bf00      	nop
 8008a18:	e000      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10b      	bne.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a24:	4bb9      	ldr	r3, [pc, #740]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a28:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a34:	4ab5      	ldr	r2, [pc, #724]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a36:	430b      	orrs	r3, r1
 8008a38:	6553      	str	r3, [r2, #84]	; 0x54
 8008a3a:	e003      	b.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008a50:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a52:	2300      	movs	r3, #0
 8008a54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a56:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	d009      	beq.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008a60:	4baa      	ldr	r3, [pc, #680]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a64:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a6e:	4aa7      	ldr	r2, [pc, #668]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a70:	430b      	orrs	r3, r1
 8008a72:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008a80:	653b      	str	r3, [r7, #80]	; 0x50
 8008a82:	2300      	movs	r3, #0
 8008a84:	657b      	str	r3, [r7, #84]	; 0x54
 8008a86:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	d00a      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008a90:	4b9e      	ldr	r3, [pc, #632]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008aa0:	4a9a      	ldr	r2, [pc, #616]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008aa2:	430b      	orrs	r3, r1
 8008aa4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aae:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008ab2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ab8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008abc:	460b      	mov	r3, r1
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	d009      	beq.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008ac2:	4b92      	ldr	r3, [pc, #584]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ad0:	4a8e      	ldr	r2, [pc, #568]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ad2:	430b      	orrs	r3, r1
 8008ad4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ade:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008ae2:	643b      	str	r3, [r7, #64]	; 0x40
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ae8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008aec:	460b      	mov	r3, r1
 8008aee:	4313      	orrs	r3, r2
 8008af0:	d00e      	beq.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008af2:	4b86      	ldr	r3, [pc, #536]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	4a85      	ldr	r2, [pc, #532]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008af8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008afc:	6113      	str	r3, [r2, #16]
 8008afe:	4b83      	ldr	r3, [pc, #524]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b00:	6919      	ldr	r1, [r3, #16]
 8008b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b06:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008b0a:	4a80      	ldr	r2, [pc, #512]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b0c:	430b      	orrs	r3, r1
 8008b0e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b18:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b1e:	2300      	movs	r3, #0
 8008b20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b22:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008b26:	460b      	mov	r3, r1
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	d009      	beq.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008b2c:	4b77      	ldr	r3, [pc, #476]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b30:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b3a:	4a74      	ldr	r2, [pc, #464]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b3c:	430b      	orrs	r3, r1
 8008b3e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b48:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008b4c:	633b      	str	r3, [r7, #48]	; 0x30
 8008b4e:	2300      	movs	r3, #0
 8008b50:	637b      	str	r3, [r7, #52]	; 0x34
 8008b52:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008b56:	460b      	mov	r3, r1
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	d00a      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008b5c:	4b6b      	ldr	r3, [pc, #428]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b60:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b6c:	4a67      	ldr	r2, [pc, #412]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b6e:	430b      	orrs	r3, r1
 8008b70:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b84:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008b88:	460b      	mov	r3, r1
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	d011      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b92:	3308      	adds	r3, #8
 8008b94:	2100      	movs	r1, #0
 8008b96:	4618      	mov	r0, r3
 8008b98:	f001 fa4a 	bl	800a030 <RCCEx_PLL2_Config>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d003      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008baa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	2100      	movs	r1, #0
 8008bbc:	6239      	str	r1, [r7, #32]
 8008bbe:	f003 0302 	and.w	r3, r3, #2
 8008bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8008bc4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	d011      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bd2:	3308      	adds	r3, #8
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f001 fa2a 	bl	800a030 <RCCEx_PLL2_Config>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008be2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	61b9      	str	r1, [r7, #24]
 8008bfe:	f003 0304 	and.w	r3, r3, #4
 8008c02:	61fb      	str	r3, [r7, #28]
 8008c04:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	d011      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c12:	3308      	adds	r3, #8
 8008c14:	2102      	movs	r1, #2
 8008c16:	4618      	mov	r0, r3
 8008c18:	f001 fa0a 	bl	800a030 <RCCEx_PLL2_Config>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008c22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d003      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	6139      	str	r1, [r7, #16]
 8008c3e:	f003 0308 	and.w	r3, r3, #8
 8008c42:	617b      	str	r3, [r7, #20]
 8008c44:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	d011      	beq.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c52:	3328      	adds	r3, #40	; 0x28
 8008c54:	2100      	movs	r1, #0
 8008c56:	4618      	mov	r0, r3
 8008c58:	f001 fa9c 	bl	800a194 <RCCEx_PLL3_Config>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008c62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	f003 0310 	and.w	r3, r3, #16
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	d011      	beq.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c92:	3328      	adds	r3, #40	; 0x28
 8008c94:	2101      	movs	r1, #1
 8008c96:	4618      	mov	r0, r3
 8008c98:	f001 fa7c 	bl	800a194 <RCCEx_PLL3_Config>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d003      	beq.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008caa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cba:	2100      	movs	r1, #0
 8008cbc:	6039      	str	r1, [r7, #0]
 8008cbe:	f003 0320 	and.w	r3, r3, #32
 8008cc2:	607b      	str	r3, [r7, #4]
 8008cc4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	d011      	beq.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cd2:	3328      	adds	r3, #40	; 0x28
 8008cd4:	2102      	movs	r1, #2
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f001 fa5c 	bl	800a194 <RCCEx_PLL3_Config>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d003      	beq.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008cf2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d101      	bne.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	e000      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008d06:	46bd      	mov	sp, r7
 8008d08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d0c:	58024400 	.word	0x58024400

08008d10 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b090      	sub	sp, #64	; 0x40
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008d1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d1e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008d22:	430b      	orrs	r3, r1
 8008d24:	f040 8094 	bne.w	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008d28:	4b9e      	ldr	r3, [pc, #632]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d2c:	f003 0307 	and.w	r3, r3, #7
 8008d30:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d34:	2b04      	cmp	r3, #4
 8008d36:	f200 8087 	bhi.w	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008d3a:	a201      	add	r2, pc, #4	; (adr r2, 8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d40:	08008d55 	.word	0x08008d55
 8008d44:	08008d7d 	.word	0x08008d7d
 8008d48:	08008da5 	.word	0x08008da5
 8008d4c:	08008e41 	.word	0x08008e41
 8008d50:	08008dcd 	.word	0x08008dcd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d54:	4b93      	ldr	r3, [pc, #588]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d60:	d108      	bne.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d66:	4618      	mov	r0, r3
 8008d68:	f001 f810 	bl	8009d8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d70:	f000 bd45 	b.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d78:	f000 bd41 	b.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d7c:	4b89      	ldr	r3, [pc, #548]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d88:	d108      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d8a:	f107 0318 	add.w	r3, r7, #24
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 fd54 	bl	800983c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d98:	f000 bd31 	b.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008da0:	f000 bd2d 	b.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008da4:	4b7f      	ldr	r3, [pc, #508]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008db0:	d108      	bne.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008db2:	f107 030c 	add.w	r3, r7, #12
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 fe94 	bl	8009ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dc0:	f000 bd1d 	b.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dc8:	f000 bd19 	b.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008dcc:	4b75      	ldr	r3, [pc, #468]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008dd4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008dd6:	4b73      	ldr	r3, [pc, #460]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 0304 	and.w	r3, r3, #4
 8008dde:	2b04      	cmp	r3, #4
 8008de0:	d10c      	bne.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d109      	bne.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008de8:	4b6e      	ldr	r3, [pc, #440]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	08db      	lsrs	r3, r3, #3
 8008dee:	f003 0303 	and.w	r3, r3, #3
 8008df2:	4a6d      	ldr	r2, [pc, #436]	; (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008df4:	fa22 f303 	lsr.w	r3, r2, r3
 8008df8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dfa:	e01f      	b.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008dfc:	4b69      	ldr	r3, [pc, #420]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e08:	d106      	bne.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e10:	d102      	bne.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008e12:	4b66      	ldr	r3, [pc, #408]	; (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008e14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e16:	e011      	b.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e18:	4b62      	ldr	r3, [pc, #392]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e24:	d106      	bne.n	8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e2c:	d102      	bne.n	8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008e2e:	4b60      	ldr	r3, [pc, #384]	; (8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008e30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e32:	e003      	b.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008e34:	2300      	movs	r3, #0
 8008e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008e38:	f000 bce1 	b.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008e3c:	f000 bcdf 	b.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008e40:	4b5c      	ldr	r3, [pc, #368]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e44:	f000 bcdb 	b.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e4c:	f000 bcd7 	b.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008e50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e54:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008e58:	430b      	orrs	r3, r1
 8008e5a:	f040 80ad 	bne.w	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008e5e:	4b51      	ldr	r3, [pc, #324]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e62:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008e66:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e6e:	d056      	beq.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e76:	f200 8090 	bhi.w	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7c:	2bc0      	cmp	r3, #192	; 0xc0
 8008e7e:	f000 8088 	beq.w	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e84:	2bc0      	cmp	r3, #192	; 0xc0
 8008e86:	f200 8088 	bhi.w	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8c:	2b80      	cmp	r3, #128	; 0x80
 8008e8e:	d032      	beq.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e92:	2b80      	cmp	r3, #128	; 0x80
 8008e94:	f200 8081 	bhi.w	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d003      	beq.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	2b40      	cmp	r3, #64	; 0x40
 8008ea2:	d014      	beq.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008ea4:	e079      	b.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ea6:	4b3f      	ldr	r3, [pc, #252]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008eb2:	d108      	bne.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f000 ff67 	bl	8009d8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ec2:	f000 bc9c 	b.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eca:	f000 bc98 	b.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ece:	4b35      	ldr	r3, [pc, #212]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ed6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008eda:	d108      	bne.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008edc:	f107 0318 	add.w	r3, r7, #24
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f000 fcab 	bl	800983c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eea:	f000 bc88 	b.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ef2:	f000 bc84 	b.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ef6:	4b2b      	ldr	r3, [pc, #172]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008efe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f02:	d108      	bne.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f04:	f107 030c 	add.w	r3, r7, #12
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f000 fdeb 	bl	8009ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f12:	f000 bc74 	b.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f16:	2300      	movs	r3, #0
 8008f18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f1a:	f000 bc70 	b.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f1e:	4b21      	ldr	r3, [pc, #132]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f26:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f28:	4b1e      	ldr	r3, [pc, #120]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 0304 	and.w	r3, r3, #4
 8008f30:	2b04      	cmp	r3, #4
 8008f32:	d10c      	bne.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d109      	bne.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f3a:	4b1a      	ldr	r3, [pc, #104]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	08db      	lsrs	r3, r3, #3
 8008f40:	f003 0303 	and.w	r3, r3, #3
 8008f44:	4a18      	ldr	r2, [pc, #96]	; (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f46:	fa22 f303 	lsr.w	r3, r2, r3
 8008f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f4c:	e01f      	b.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f4e:	4b15      	ldr	r3, [pc, #84]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f5a:	d106      	bne.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f62:	d102      	bne.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f64:	4b11      	ldr	r3, [pc, #68]	; (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f68:	e011      	b.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f6a:	4b0e      	ldr	r3, [pc, #56]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f76:	d106      	bne.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f7e:	d102      	bne.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f80:	4b0b      	ldr	r3, [pc, #44]	; (8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f84:	e003      	b.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f86:	2300      	movs	r3, #0
 8008f88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008f8a:	f000 bc38 	b.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f8e:	f000 bc36 	b.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f92:	4b08      	ldr	r3, [pc, #32]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f96:	f000 bc32 	b.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f9e:	f000 bc2e 	b.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008fa2:	bf00      	nop
 8008fa4:	58024400 	.word	0x58024400
 8008fa8:	03d09000 	.word	0x03d09000
 8008fac:	003d0900 	.word	0x003d0900
 8008fb0:	017d7840 	.word	0x017d7840
 8008fb4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fbc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008fc0:	430b      	orrs	r3, r1
 8008fc2:	f040 809c 	bne.w	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008fc6:	4b9e      	ldr	r3, [pc, #632]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fca:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008fce:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008fd6:	d054      	beq.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008fde:	f200 808b 	bhi.w	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008fe8:	f000 8083 	beq.w	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ff2:	f200 8081 	bhi.w	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ffc:	d02f      	beq.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009004:	d878      	bhi.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009008:	2b00      	cmp	r3, #0
 800900a:	d004      	beq.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800900c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009012:	d012      	beq.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009014:	e070      	b.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009016:	4b8a      	ldr	r3, [pc, #552]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800901e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009022:	d107      	bne.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009028:	4618      	mov	r0, r3
 800902a:	f000 feaf 	bl	8009d8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800902e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009030:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009032:	e3e4      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009034:	2300      	movs	r3, #0
 8009036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009038:	e3e1      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800903a:	4b81      	ldr	r3, [pc, #516]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009046:	d107      	bne.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009048:	f107 0318 	add.w	r3, r7, #24
 800904c:	4618      	mov	r0, r3
 800904e:	f000 fbf5 	bl	800983c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009056:	e3d2      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009058:	2300      	movs	r3, #0
 800905a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800905c:	e3cf      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800905e:	4b78      	ldr	r3, [pc, #480]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800906a:	d107      	bne.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800906c:	f107 030c 	add.w	r3, r7, #12
 8009070:	4618      	mov	r0, r3
 8009072:	f000 fd37 	bl	8009ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800907a:	e3c0      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800907c:	2300      	movs	r3, #0
 800907e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009080:	e3bd      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009082:	4b6f      	ldr	r3, [pc, #444]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009086:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800908a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800908c:	4b6c      	ldr	r3, [pc, #432]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0304 	and.w	r3, r3, #4
 8009094:	2b04      	cmp	r3, #4
 8009096:	d10c      	bne.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800909a:	2b00      	cmp	r3, #0
 800909c:	d109      	bne.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800909e:	4b68      	ldr	r3, [pc, #416]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	08db      	lsrs	r3, r3, #3
 80090a4:	f003 0303 	and.w	r3, r3, #3
 80090a8:	4a66      	ldr	r2, [pc, #408]	; (8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80090aa:	fa22 f303 	lsr.w	r3, r2, r3
 80090ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090b0:	e01e      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090b2:	4b63      	ldr	r3, [pc, #396]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090be:	d106      	bne.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80090c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090c6:	d102      	bne.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80090c8:	4b5f      	ldr	r3, [pc, #380]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80090ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090cc:	e010      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090ce:	4b5c      	ldr	r3, [pc, #368]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090da:	d106      	bne.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80090dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090e2:	d102      	bne.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80090e4:	4b59      	ldr	r3, [pc, #356]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80090e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090e8:	e002      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80090ea:	2300      	movs	r3, #0
 80090ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80090ee:	e386      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80090f0:	e385      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80090f2:	4b57      	ldr	r3, [pc, #348]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80090f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090f6:	e382      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090fc:	e37f      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80090fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009102:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009106:	430b      	orrs	r3, r1
 8009108:	f040 80a7 	bne.w	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800910c:	4b4c      	ldr	r3, [pc, #304]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800910e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009110:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009114:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009118:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800911c:	d055      	beq.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800911e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009120:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009124:	f200 8096 	bhi.w	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800912e:	f000 8084 	beq.w	800923a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009134:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009138:	f200 808c 	bhi.w	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800913c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009142:	d030      	beq.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009146:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800914a:	f200 8083 	bhi.w	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800914e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009150:	2b00      	cmp	r3, #0
 8009152:	d004      	beq.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009156:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800915a:	d012      	beq.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800915c:	e07a      	b.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800915e:	4b38      	ldr	r3, [pc, #224]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009166:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800916a:	d107      	bne.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800916c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009170:	4618      	mov	r0, r3
 8009172:	f000 fe0b 	bl	8009d8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009178:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800917a:	e340      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800917c:	2300      	movs	r3, #0
 800917e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009180:	e33d      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009182:	4b2f      	ldr	r3, [pc, #188]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800918a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800918e:	d107      	bne.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009190:	f107 0318 	add.w	r3, r7, #24
 8009194:	4618      	mov	r0, r3
 8009196:	f000 fb51 	bl	800983c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800919e:	e32e      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091a4:	e32b      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091a6:	4b26      	ldr	r3, [pc, #152]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091b2:	d107      	bne.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091b4:	f107 030c 	add.w	r3, r7, #12
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 fc93 	bl	8009ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091c2:	e31c      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091c4:	2300      	movs	r3, #0
 80091c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091c8:	e319      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091ca:	4b1d      	ldr	r3, [pc, #116]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091d2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091d4:	4b1a      	ldr	r3, [pc, #104]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 0304 	and.w	r3, r3, #4
 80091dc:	2b04      	cmp	r3, #4
 80091de:	d10c      	bne.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80091e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d109      	bne.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091e6:	4b16      	ldr	r3, [pc, #88]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	08db      	lsrs	r3, r3, #3
 80091ec:	f003 0303 	and.w	r3, r3, #3
 80091f0:	4a14      	ldr	r2, [pc, #80]	; (8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80091f2:	fa22 f303 	lsr.w	r3, r2, r3
 80091f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091f8:	e01e      	b.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091fa:	4b11      	ldr	r3, [pc, #68]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009206:	d106      	bne.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800920a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800920e:	d102      	bne.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009210:	4b0d      	ldr	r3, [pc, #52]	; (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009214:	e010      	b.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009216:	4b0a      	ldr	r3, [pc, #40]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800921e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009222:	d106      	bne.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800922a:	d102      	bne.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800922c:	4b07      	ldr	r3, [pc, #28]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800922e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009230:	e002      	b.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009236:	e2e2      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009238:	e2e1      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800923a:	4b05      	ldr	r3, [pc, #20]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800923c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800923e:	e2de      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009240:	58024400 	.word	0x58024400
 8009244:	03d09000 	.word	0x03d09000
 8009248:	003d0900 	.word	0x003d0900
 800924c:	017d7840 	.word	0x017d7840
 8009250:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009254:	2300      	movs	r3, #0
 8009256:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009258:	e2d1      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800925a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800925e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009262:	430b      	orrs	r3, r1
 8009264:	f040 809c 	bne.w	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009268:	4b93      	ldr	r3, [pc, #588]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800926a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800926c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009270:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009278:	d054      	beq.n	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800927a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009280:	f200 808b 	bhi.w	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009286:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800928a:	f000 8083 	beq.w	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800928e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009290:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009294:	f200 8081 	bhi.w	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800929e:	d02f      	beq.n	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80092a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092a6:	d878      	bhi.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80092a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d004      	beq.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80092ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092b4:	d012      	beq.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80092b6:	e070      	b.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092b8:	4b7f      	ldr	r3, [pc, #508]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092c4:	d107      	bne.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 fd5e 	bl	8009d8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092d4:	e293      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092d6:	2300      	movs	r3, #0
 80092d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092da:	e290      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092dc:	4b76      	ldr	r3, [pc, #472]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092e8:	d107      	bne.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092ea:	f107 0318 	add.w	r3, r7, #24
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 faa4 	bl	800983c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092f8:	e281      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092fa:	2300      	movs	r3, #0
 80092fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092fe:	e27e      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009300:	4b6d      	ldr	r3, [pc, #436]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800930c:	d107      	bne.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800930e:	f107 030c 	add.w	r3, r7, #12
 8009312:	4618      	mov	r0, r3
 8009314:	f000 fbe6 	bl	8009ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800931c:	e26f      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009322:	e26c      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009324:	4b64      	ldr	r3, [pc, #400]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009328:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800932c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800932e:	4b62      	ldr	r3, [pc, #392]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f003 0304 	and.w	r3, r3, #4
 8009336:	2b04      	cmp	r3, #4
 8009338:	d10c      	bne.n	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800933a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800933c:	2b00      	cmp	r3, #0
 800933e:	d109      	bne.n	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009340:	4b5d      	ldr	r3, [pc, #372]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	08db      	lsrs	r3, r3, #3
 8009346:	f003 0303 	and.w	r3, r3, #3
 800934a:	4a5c      	ldr	r2, [pc, #368]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800934c:	fa22 f303 	lsr.w	r3, r2, r3
 8009350:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009352:	e01e      	b.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009354:	4b58      	ldr	r3, [pc, #352]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800935c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009360:	d106      	bne.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009364:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009368:	d102      	bne.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800936a:	4b55      	ldr	r3, [pc, #340]	; (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800936c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800936e:	e010      	b.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009370:	4b51      	ldr	r3, [pc, #324]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800937c:	d106      	bne.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800937e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009384:	d102      	bne.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009386:	4b4f      	ldr	r3, [pc, #316]	; (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009388:	63fb      	str	r3, [r7, #60]	; 0x3c
 800938a:	e002      	b.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800938c:	2300      	movs	r3, #0
 800938e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009390:	e235      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009392:	e234      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009394:	4b4c      	ldr	r3, [pc, #304]	; (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009398:	e231      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800939a:	2300      	movs	r3, #0
 800939c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800939e:	e22e      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80093a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093a4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80093a8:	430b      	orrs	r3, r1
 80093aa:	f040 808f 	bne.w	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80093ae:	4b42      	ldr	r3, [pc, #264]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093b2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80093b6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80093b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093be:	d06b      	beq.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80093c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093c6:	d874      	bhi.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80093c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80093ce:	d056      	beq.n	800947e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80093d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80093d6:	d86c      	bhi.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80093d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80093de:	d03b      	beq.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80093e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80093e6:	d864      	bhi.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80093e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093ee:	d021      	beq.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80093f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093f6:	d85c      	bhi.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80093f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d004      	beq.n	8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80093fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009404:	d004      	beq.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009406:	e054      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009408:	f7fe fa4c 	bl	80078a4 <HAL_RCC_GetPCLK1Freq>
 800940c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800940e:	e1f6      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009410:	4b29      	ldr	r3, [pc, #164]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800941c:	d107      	bne.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800941e:	f107 0318 	add.w	r3, r7, #24
 8009422:	4618      	mov	r0, r3
 8009424:	f000 fa0a 	bl	800983c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800942c:	e1e7      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800942e:	2300      	movs	r3, #0
 8009430:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009432:	e1e4      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009434:	4b20      	ldr	r3, [pc, #128]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800943c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009440:	d107      	bne.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009442:	f107 030c 	add.w	r3, r7, #12
 8009446:	4618      	mov	r0, r3
 8009448:	f000 fb4c 	bl	8009ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009450:	e1d5      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009452:	2300      	movs	r3, #0
 8009454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009456:	e1d2      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009458:	4b17      	ldr	r3, [pc, #92]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0304 	and.w	r3, r3, #4
 8009460:	2b04      	cmp	r3, #4
 8009462:	d109      	bne.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009464:	4b14      	ldr	r3, [pc, #80]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	08db      	lsrs	r3, r3, #3
 800946a:	f003 0303 	and.w	r3, r3, #3
 800946e:	4a13      	ldr	r2, [pc, #76]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009470:	fa22 f303 	lsr.w	r3, r2, r3
 8009474:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009476:	e1c2      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800947c:	e1bf      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800947e:	4b0e      	ldr	r3, [pc, #56]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800948a:	d102      	bne.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800948c:	4b0c      	ldr	r3, [pc, #48]	; (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800948e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009490:	e1b5      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009496:	e1b2      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009498:	4b07      	ldr	r3, [pc, #28]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094a4:	d102      	bne.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80094a6:	4b07      	ldr	r3, [pc, #28]	; (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80094a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094aa:	e1a8      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094ac:	2300      	movs	r3, #0
 80094ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094b0:	e1a5      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80094b2:	2300      	movs	r3, #0
 80094b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094b6:	e1a2      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80094b8:	58024400 	.word	0x58024400
 80094bc:	03d09000 	.word	0x03d09000
 80094c0:	003d0900 	.word	0x003d0900
 80094c4:	017d7840 	.word	0x017d7840
 80094c8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80094cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094d0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80094d4:	430b      	orrs	r3, r1
 80094d6:	d173      	bne.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80094d8:	4b9c      	ldr	r3, [pc, #624]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80094e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80094e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094e8:	d02f      	beq.n	800954a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80094ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094f0:	d863      	bhi.n	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80094f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d004      	beq.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80094f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094fe:	d012      	beq.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009500:	e05b      	b.n	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009502:	4b92      	ldr	r3, [pc, #584]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800950a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800950e:	d107      	bne.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009510:	f107 0318 	add.w	r3, r7, #24
 8009514:	4618      	mov	r0, r3
 8009516:	f000 f991 	bl	800983c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800951e:	e16e      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009520:	2300      	movs	r3, #0
 8009522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009524:	e16b      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009526:	4b89      	ldr	r3, [pc, #548]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800952e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009532:	d107      	bne.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009534:	f107 030c 	add.w	r3, r7, #12
 8009538:	4618      	mov	r0, r3
 800953a:	f000 fad3 	bl	8009ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009542:	e15c      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009544:	2300      	movs	r3, #0
 8009546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009548:	e159      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800954a:	4b80      	ldr	r3, [pc, #512]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800954c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800954e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009552:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009554:	4b7d      	ldr	r3, [pc, #500]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 0304 	and.w	r3, r3, #4
 800955c:	2b04      	cmp	r3, #4
 800955e:	d10c      	bne.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009562:	2b00      	cmp	r3, #0
 8009564:	d109      	bne.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009566:	4b79      	ldr	r3, [pc, #484]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	08db      	lsrs	r3, r3, #3
 800956c:	f003 0303 	and.w	r3, r3, #3
 8009570:	4a77      	ldr	r2, [pc, #476]	; (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009572:	fa22 f303 	lsr.w	r3, r2, r3
 8009576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009578:	e01e      	b.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800957a:	4b74      	ldr	r3, [pc, #464]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009586:	d106      	bne.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800958a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800958e:	d102      	bne.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009590:	4b70      	ldr	r3, [pc, #448]	; (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009594:	e010      	b.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009596:	4b6d      	ldr	r3, [pc, #436]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800959e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095a2:	d106      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80095a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095aa:	d102      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80095ac:	4b6a      	ldr	r3, [pc, #424]	; (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80095ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095b0:	e002      	b.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80095b2:	2300      	movs	r3, #0
 80095b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80095b6:	e122      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80095b8:	e121      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095be:	e11e      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80095c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095c4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80095c8:	430b      	orrs	r3, r1
 80095ca:	d133      	bne.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80095cc:	4b5f      	ldr	r3, [pc, #380]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095d4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80095d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d004      	beq.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80095dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095e2:	d012      	beq.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80095e4:	e023      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095e6:	4b59      	ldr	r3, [pc, #356]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095f2:	d107      	bne.n	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 fbc7 	bl	8009d8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009600:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009602:	e0fc      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009604:	2300      	movs	r3, #0
 8009606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009608:	e0f9      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800960a:	4b50      	ldr	r3, [pc, #320]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009616:	d107      	bne.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009618:	f107 0318 	add.w	r3, r7, #24
 800961c:	4618      	mov	r0, r3
 800961e:	f000 f90d 	bl	800983c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009622:	6a3b      	ldr	r3, [r7, #32]
 8009624:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009626:	e0ea      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009628:	2300      	movs	r3, #0
 800962a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800962c:	e0e7      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800962e:	2300      	movs	r3, #0
 8009630:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009632:	e0e4      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009638:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800963c:	430b      	orrs	r3, r1
 800963e:	f040 808d 	bne.w	800975c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009642:	4b42      	ldr	r3, [pc, #264]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009646:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800964a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800964c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009652:	d06b      	beq.n	800972c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009656:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800965a:	d874      	bhi.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800965c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009662:	d056      	beq.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800966a:	d86c      	bhi.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800966c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009672:	d03b      	beq.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009676:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800967a:	d864      	bhi.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800967c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009682:	d021      	beq.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800968a:	d85c      	bhi.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800968c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968e:	2b00      	cmp	r3, #0
 8009690:	d004      	beq.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009694:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009698:	d004      	beq.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800969a:	e054      	b.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800969c:	f000 f8b8 	bl	8009810 <HAL_RCCEx_GetD3PCLK1Freq>
 80096a0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80096a2:	e0ac      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096a4:	4b29      	ldr	r3, [pc, #164]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096b0:	d107      	bne.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096b2:	f107 0318 	add.w	r3, r7, #24
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 f8c0 	bl	800983c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096c0:	e09d      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096c2:	2300      	movs	r3, #0
 80096c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096c6:	e09a      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096c8:	4b20      	ldr	r3, [pc, #128]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096d4:	d107      	bne.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096d6:	f107 030c 	add.w	r3, r7, #12
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 fa02 	bl	8009ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096e4:	e08b      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096e6:	2300      	movs	r3, #0
 80096e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096ea:	e088      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80096ec:	4b17      	ldr	r3, [pc, #92]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0304 	and.w	r3, r3, #4
 80096f4:	2b04      	cmp	r3, #4
 80096f6:	d109      	bne.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096f8:	4b14      	ldr	r3, [pc, #80]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	08db      	lsrs	r3, r3, #3
 80096fe:	f003 0303 	and.w	r3, r3, #3
 8009702:	4a13      	ldr	r2, [pc, #76]	; (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009704:	fa22 f303 	lsr.w	r3, r2, r3
 8009708:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800970a:	e078      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800970c:	2300      	movs	r3, #0
 800970e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009710:	e075      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009712:	4b0e      	ldr	r3, [pc, #56]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800971a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800971e:	d102      	bne.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009720:	4b0c      	ldr	r3, [pc, #48]	; (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009722:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009724:	e06b      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009726:	2300      	movs	r3, #0
 8009728:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800972a:	e068      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800972c:	4b07      	ldr	r3, [pc, #28]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009734:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009738:	d102      	bne.n	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800973a:	4b07      	ldr	r3, [pc, #28]	; (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800973c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800973e:	e05e      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009740:	2300      	movs	r3, #0
 8009742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009744:	e05b      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009746:	2300      	movs	r3, #0
 8009748:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800974a:	e058      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800974c:	58024400 	.word	0x58024400
 8009750:	03d09000 	.word	0x03d09000
 8009754:	003d0900 	.word	0x003d0900
 8009758:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800975c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009760:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009764:	430b      	orrs	r3, r1
 8009766:	d148      	bne.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009768:	4b27      	ldr	r3, [pc, #156]	; (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800976a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800976c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009770:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009778:	d02a      	beq.n	80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800977a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009780:	d838      	bhi.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009784:	2b00      	cmp	r3, #0
 8009786:	d004      	beq.n	8009792 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800978e:	d00d      	beq.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009790:	e030      	b.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009792:	4b1d      	ldr	r3, [pc, #116]	; (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800979a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800979e:	d102      	bne.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80097a0:	4b1a      	ldr	r3, [pc, #104]	; (800980c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80097a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097a4:	e02b      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097aa:	e028      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80097ac:	4b16      	ldr	r3, [pc, #88]	; (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097b8:	d107      	bne.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 fae4 	bl	8009d8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097c8:	e019      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097ca:	2300      	movs	r3, #0
 80097cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097ce:	e016      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097d0:	4b0d      	ldr	r3, [pc, #52]	; (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097dc:	d107      	bne.n	80097ee <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097de:	f107 0318 	add.w	r3, r7, #24
 80097e2:	4618      	mov	r0, r3
 80097e4:	f000 f82a 	bl	800983c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097ec:	e007      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097ee:	2300      	movs	r3, #0
 80097f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097f2:	e004      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80097f4:	2300      	movs	r3, #0
 80097f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097f8:	e001      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80097fa:	2300      	movs	r3, #0
 80097fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80097fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009800:	4618      	mov	r0, r3
 8009802:	3740      	adds	r7, #64	; 0x40
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	58024400 	.word	0x58024400
 800980c:	017d7840 	.word	0x017d7840

08009810 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009814:	f7fe f816 	bl	8007844 <HAL_RCC_GetHCLKFreq>
 8009818:	4602      	mov	r2, r0
 800981a:	4b06      	ldr	r3, [pc, #24]	; (8009834 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800981c:	6a1b      	ldr	r3, [r3, #32]
 800981e:	091b      	lsrs	r3, r3, #4
 8009820:	f003 0307 	and.w	r3, r3, #7
 8009824:	4904      	ldr	r1, [pc, #16]	; (8009838 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009826:	5ccb      	ldrb	r3, [r1, r3]
 8009828:	f003 031f 	and.w	r3, r3, #31
 800982c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009830:	4618      	mov	r0, r3
 8009832:	bd80      	pop	{r7, pc}
 8009834:	58024400 	.word	0x58024400
 8009838:	0800f384 	.word	0x0800f384

0800983c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800983c:	b480      	push	{r7}
 800983e:	b089      	sub	sp, #36	; 0x24
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009844:	4ba1      	ldr	r3, [pc, #644]	; (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009848:	f003 0303 	and.w	r3, r3, #3
 800984c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800984e:	4b9f      	ldr	r3, [pc, #636]	; (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009852:	0b1b      	lsrs	r3, r3, #12
 8009854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009858:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800985a:	4b9c      	ldr	r3, [pc, #624]	; (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800985c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985e:	091b      	lsrs	r3, r3, #4
 8009860:	f003 0301 	and.w	r3, r3, #1
 8009864:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009866:	4b99      	ldr	r3, [pc, #612]	; (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800986a:	08db      	lsrs	r3, r3, #3
 800986c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	fb02 f303 	mul.w	r3, r2, r3
 8009876:	ee07 3a90 	vmov	s15, r3
 800987a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800987e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2b00      	cmp	r3, #0
 8009886:	f000 8111 	beq.w	8009aac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	2b02      	cmp	r3, #2
 800988e:	f000 8083 	beq.w	8009998 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	2b02      	cmp	r3, #2
 8009896:	f200 80a1 	bhi.w	80099dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d003      	beq.n	80098a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d056      	beq.n	8009954 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80098a6:	e099      	b.n	80099dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098a8:	4b88      	ldr	r3, [pc, #544]	; (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0320 	and.w	r3, r3, #32
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d02d      	beq.n	8009910 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098b4:	4b85      	ldr	r3, [pc, #532]	; (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	08db      	lsrs	r3, r3, #3
 80098ba:	f003 0303 	and.w	r3, r3, #3
 80098be:	4a84      	ldr	r2, [pc, #528]	; (8009ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80098c0:	fa22 f303 	lsr.w	r3, r2, r3
 80098c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	ee07 3a90 	vmov	s15, r3
 80098cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	ee07 3a90 	vmov	s15, r3
 80098d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098de:	4b7b      	ldr	r3, [pc, #492]	; (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e6:	ee07 3a90 	vmov	s15, r3
 80098ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80098f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800990a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800990e:	e087      	b.n	8009a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	ee07 3a90 	vmov	s15, r3
 8009916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800991a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800991e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009922:	4b6a      	ldr	r3, [pc, #424]	; (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800992a:	ee07 3a90 	vmov	s15, r3
 800992e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009932:	ed97 6a03 	vldr	s12, [r7, #12]
 8009936:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800993a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800993e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800994a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800994e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009952:	e065      	b.n	8009a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	ee07 3a90 	vmov	s15, r3
 800995a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009966:	4b59      	ldr	r3, [pc, #356]	; (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800996a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800996e:	ee07 3a90 	vmov	s15, r3
 8009972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009976:	ed97 6a03 	vldr	s12, [r7, #12]
 800997a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800997e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800998a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800998e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009996:	e043      	b.n	8009a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	ee07 3a90 	vmov	s15, r3
 800999e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80099a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099aa:	4b48      	ldr	r3, [pc, #288]	; (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099b2:	ee07 3a90 	vmov	s15, r3
 80099b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80099be:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099da:	e021      	b.n	8009a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	ee07 3a90 	vmov	s15, r3
 80099e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ee:	4b37      	ldr	r3, [pc, #220]	; (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099f6:	ee07 3a90 	vmov	s15, r3
 80099fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009a20:	4b2a      	ldr	r3, [pc, #168]	; (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a24:	0a5b      	lsrs	r3, r3, #9
 8009a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a2a:	ee07 3a90 	vmov	s15, r3
 8009a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a46:	ee17 2a90 	vmov	r2, s15
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009a4e:	4b1f      	ldr	r3, [pc, #124]	; (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a52:	0c1b      	lsrs	r3, r3, #16
 8009a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a58:	ee07 3a90 	vmov	s15, r3
 8009a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a68:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a74:	ee17 2a90 	vmov	r2, s15
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009a7c:	4b13      	ldr	r3, [pc, #76]	; (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a80:	0e1b      	lsrs	r3, r3, #24
 8009a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a86:	ee07 3a90 	vmov	s15, r3
 8009a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aa2:	ee17 2a90 	vmov	r2, s15
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009aaa:	e008      	b.n	8009abe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	609a      	str	r2, [r3, #8]
}
 8009abe:	bf00      	nop
 8009ac0:	3724      	adds	r7, #36	; 0x24
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	58024400 	.word	0x58024400
 8009ad0:	03d09000 	.word	0x03d09000
 8009ad4:	46000000 	.word	0x46000000
 8009ad8:	4c742400 	.word	0x4c742400
 8009adc:	4a742400 	.word	0x4a742400
 8009ae0:	4bbebc20 	.word	0x4bbebc20

08009ae4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b089      	sub	sp, #36	; 0x24
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009aec:	4ba1      	ldr	r3, [pc, #644]	; (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af0:	f003 0303 	and.w	r3, r3, #3
 8009af4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009af6:	4b9f      	ldr	r3, [pc, #636]	; (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009afa:	0d1b      	lsrs	r3, r3, #20
 8009afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009b02:	4b9c      	ldr	r3, [pc, #624]	; (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b06:	0a1b      	lsrs	r3, r3, #8
 8009b08:	f003 0301 	and.w	r3, r3, #1
 8009b0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009b0e:	4b99      	ldr	r3, [pc, #612]	; (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b12:	08db      	lsrs	r3, r3, #3
 8009b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	fb02 f303 	mul.w	r3, r2, r3
 8009b1e:	ee07 3a90 	vmov	s15, r3
 8009b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f000 8111 	beq.w	8009d54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	f000 8083 	beq.w	8009c40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	f200 80a1 	bhi.w	8009c84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d003      	beq.n	8009b50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d056      	beq.n	8009bfc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009b4e:	e099      	b.n	8009c84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b50:	4b88      	ldr	r3, [pc, #544]	; (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 0320 	and.w	r3, r3, #32
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d02d      	beq.n	8009bb8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b5c:	4b85      	ldr	r3, [pc, #532]	; (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	08db      	lsrs	r3, r3, #3
 8009b62:	f003 0303 	and.w	r3, r3, #3
 8009b66:	4a84      	ldr	r2, [pc, #528]	; (8009d78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009b68:	fa22 f303 	lsr.w	r3, r2, r3
 8009b6c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	ee07 3a90 	vmov	s15, r3
 8009b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	ee07 3a90 	vmov	s15, r3
 8009b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b86:	4b7b      	ldr	r3, [pc, #492]	; (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b8e:	ee07 3a90 	vmov	s15, r3
 8009b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009bb6:	e087      	b.n	8009cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009d80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bca:	4b6a      	ldr	r3, [pc, #424]	; (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd2:	ee07 3a90 	vmov	s15, r3
 8009bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bde:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bfa:	e065      	b.n	8009cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c0e:	4b59      	ldr	r3, [pc, #356]	; (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c16:	ee07 3a90 	vmov	s15, r3
 8009c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c22:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c3e:	e043      	b.n	8009cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	ee07 3a90 	vmov	s15, r3
 8009c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c52:	4b48      	ldr	r3, [pc, #288]	; (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c5a:	ee07 3a90 	vmov	s15, r3
 8009c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c66:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c82:	e021      	b.n	8009cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	ee07 3a90 	vmov	s15, r3
 8009c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c96:	4b37      	ldr	r3, [pc, #220]	; (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c9e:	ee07 3a90 	vmov	s15, r3
 8009ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009caa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cc6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009cc8:	4b2a      	ldr	r3, [pc, #168]	; (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ccc:	0a5b      	lsrs	r3, r3, #9
 8009cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cd2:	ee07 3a90 	vmov	s15, r3
 8009cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cee:	ee17 2a90 	vmov	r2, s15
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009cf6:	4b1f      	ldr	r3, [pc, #124]	; (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfa:	0c1b      	lsrs	r3, r3, #16
 8009cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d00:	ee07 3a90 	vmov	s15, r3
 8009d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d1c:	ee17 2a90 	vmov	r2, s15
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009d24:	4b13      	ldr	r3, [pc, #76]	; (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d28:	0e1b      	lsrs	r3, r3, #24
 8009d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d2e:	ee07 3a90 	vmov	s15, r3
 8009d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d4a:	ee17 2a90 	vmov	r2, s15
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009d52:	e008      	b.n	8009d66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	609a      	str	r2, [r3, #8]
}
 8009d66:	bf00      	nop
 8009d68:	3724      	adds	r7, #36	; 0x24
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	58024400 	.word	0x58024400
 8009d78:	03d09000 	.word	0x03d09000
 8009d7c:	46000000 	.word	0x46000000
 8009d80:	4c742400 	.word	0x4c742400
 8009d84:	4a742400 	.word	0x4a742400
 8009d88:	4bbebc20 	.word	0x4bbebc20

08009d8c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b089      	sub	sp, #36	; 0x24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d94:	4ba0      	ldr	r3, [pc, #640]	; (800a018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d98:	f003 0303 	and.w	r3, r3, #3
 8009d9c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009d9e:	4b9e      	ldr	r3, [pc, #632]	; (800a018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da2:	091b      	lsrs	r3, r3, #4
 8009da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009da8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009daa:	4b9b      	ldr	r3, [pc, #620]	; (800a018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dae:	f003 0301 	and.w	r3, r3, #1
 8009db2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009db4:	4b98      	ldr	r3, [pc, #608]	; (800a018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db8:	08db      	lsrs	r3, r3, #3
 8009dba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009dbe:	693a      	ldr	r2, [r7, #16]
 8009dc0:	fb02 f303 	mul.w	r3, r2, r3
 8009dc4:	ee07 3a90 	vmov	s15, r3
 8009dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dcc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f000 8111 	beq.w	8009ffa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	f000 8083 	beq.w	8009ee6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	f200 80a1 	bhi.w	8009f2a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d003      	beq.n	8009df6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d056      	beq.n	8009ea2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009df4:	e099      	b.n	8009f2a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009df6:	4b88      	ldr	r3, [pc, #544]	; (800a018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 0320 	and.w	r3, r3, #32
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d02d      	beq.n	8009e5e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e02:	4b85      	ldr	r3, [pc, #532]	; (800a018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	08db      	lsrs	r3, r3, #3
 8009e08:	f003 0303 	and.w	r3, r3, #3
 8009e0c:	4a83      	ldr	r2, [pc, #524]	; (800a01c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e12:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	ee07 3a90 	vmov	s15, r3
 8009e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	ee07 3a90 	vmov	s15, r3
 8009e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e2c:	4b7a      	ldr	r3, [pc, #488]	; (800a018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e34:	ee07 3a90 	vmov	s15, r3
 8009e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e40:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a020 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e58:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009e5c:	e087      	b.n	8009f6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	ee07 3a90 	vmov	s15, r3
 8009e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e68:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a024 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e70:	4b69      	ldr	r3, [pc, #420]	; (800a018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e78:	ee07 3a90 	vmov	s15, r3
 8009e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e80:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e84:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a020 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ea0:	e065      	b.n	8009f6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	ee07 3a90 	vmov	s15, r3
 8009ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a028 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009eb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eb4:	4b58      	ldr	r3, [pc, #352]	; (800a018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ebc:	ee07 3a90 	vmov	s15, r3
 8009ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ec4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ec8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a020 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ecc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ed0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ed4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ed8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ee0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ee4:	e043      	b.n	8009f6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	ee07 3a90 	vmov	s15, r3
 8009eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a02c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009ef4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ef8:	4b47      	ldr	r3, [pc, #284]	; (800a018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f00:	ee07 3a90 	vmov	s15, r3
 8009f04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f08:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f0c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a020 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f28:	e021      	b.n	8009f6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	ee07 3a90 	vmov	s15, r3
 8009f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f34:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a024 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009f38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f3c:	4b36      	ldr	r3, [pc, #216]	; (800a018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f44:	ee07 3a90 	vmov	s15, r3
 8009f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f50:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a020 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f6c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009f6e:	4b2a      	ldr	r3, [pc, #168]	; (800a018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f72:	0a5b      	lsrs	r3, r3, #9
 8009f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f78:	ee07 3a90 	vmov	s15, r3
 8009f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f88:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f94:	ee17 2a90 	vmov	r2, s15
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009f9c:	4b1e      	ldr	r3, [pc, #120]	; (800a018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa0:	0c1b      	lsrs	r3, r3, #16
 8009fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fa6:	ee07 3a90 	vmov	s15, r3
 8009faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fc2:	ee17 2a90 	vmov	r2, s15
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009fca:	4b13      	ldr	r3, [pc, #76]	; (800a018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fce:	0e1b      	lsrs	r3, r3, #24
 8009fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fd4:	ee07 3a90 	vmov	s15, r3
 8009fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ff0:	ee17 2a90 	vmov	r2, s15
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009ff8:	e008      	b.n	800a00c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	609a      	str	r2, [r3, #8]
}
 800a00c:	bf00      	nop
 800a00e:	3724      	adds	r7, #36	; 0x24
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr
 800a018:	58024400 	.word	0x58024400
 800a01c:	03d09000 	.word	0x03d09000
 800a020:	46000000 	.word	0x46000000
 800a024:	4c742400 	.word	0x4c742400
 800a028:	4a742400 	.word	0x4a742400
 800a02c:	4bbebc20 	.word	0x4bbebc20

0800a030 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a03a:	2300      	movs	r3, #0
 800a03c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a03e:	4b53      	ldr	r3, [pc, #332]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a042:	f003 0303 	and.w	r3, r3, #3
 800a046:	2b03      	cmp	r3, #3
 800a048:	d101      	bne.n	800a04e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e099      	b.n	800a182 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a04e:	4b4f      	ldr	r3, [pc, #316]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a4e      	ldr	r2, [pc, #312]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a054:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a05a:	f7f8 ff75 	bl	8002f48 <HAL_GetTick>
 800a05e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a060:	e008      	b.n	800a074 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a062:	f7f8 ff71 	bl	8002f48 <HAL_GetTick>
 800a066:	4602      	mov	r2, r0
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	1ad3      	subs	r3, r2, r3
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d901      	bls.n	800a074 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a070:	2303      	movs	r3, #3
 800a072:	e086      	b.n	800a182 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a074:	4b45      	ldr	r3, [pc, #276]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1f0      	bne.n	800a062 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a080:	4b42      	ldr	r3, [pc, #264]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a084:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	031b      	lsls	r3, r3, #12
 800a08e:	493f      	ldr	r1, [pc, #252]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a090:	4313      	orrs	r3, r2
 800a092:	628b      	str	r3, [r1, #40]	; 0x28
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	3b01      	subs	r3, #1
 800a09a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	025b      	lsls	r3, r3, #9
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	431a      	orrs	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	041b      	lsls	r3, r3, #16
 800a0b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a0b6:	431a      	orrs	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	061b      	lsls	r3, r3, #24
 800a0c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a0c4:	4931      	ldr	r1, [pc, #196]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a0ca:	4b30      	ldr	r3, [pc, #192]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	695b      	ldr	r3, [r3, #20]
 800a0d6:	492d      	ldr	r1, [pc, #180]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a0dc:	4b2b      	ldr	r3, [pc, #172]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e0:	f023 0220 	bic.w	r2, r3, #32
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	4928      	ldr	r1, [pc, #160]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a0ee:	4b27      	ldr	r3, [pc, #156]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f2:	4a26      	ldr	r2, [pc, #152]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a0f4:	f023 0310 	bic.w	r3, r3, #16
 800a0f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a0fa:	4b24      	ldr	r3, [pc, #144]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a0fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0fe:	4b24      	ldr	r3, [pc, #144]	; (800a190 <RCCEx_PLL2_Config+0x160>)
 800a100:	4013      	ands	r3, r2
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	69d2      	ldr	r2, [r2, #28]
 800a106:	00d2      	lsls	r2, r2, #3
 800a108:	4920      	ldr	r1, [pc, #128]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a10a:	4313      	orrs	r3, r2
 800a10c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a10e:	4b1f      	ldr	r3, [pc, #124]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a112:	4a1e      	ldr	r2, [pc, #120]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a114:	f043 0310 	orr.w	r3, r3, #16
 800a118:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d106      	bne.n	800a12e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a120:	4b1a      	ldr	r3, [pc, #104]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a124:	4a19      	ldr	r2, [pc, #100]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a126:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a12a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a12c:	e00f      	b.n	800a14e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d106      	bne.n	800a142 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a134:	4b15      	ldr	r3, [pc, #84]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a138:	4a14      	ldr	r2, [pc, #80]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a13a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a13e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a140:	e005      	b.n	800a14e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a142:	4b12      	ldr	r3, [pc, #72]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a146:	4a11      	ldr	r2, [pc, #68]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a148:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a14c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a14e:	4b0f      	ldr	r3, [pc, #60]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a0e      	ldr	r2, [pc, #56]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a154:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a15a:	f7f8 fef5 	bl	8002f48 <HAL_GetTick>
 800a15e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a160:	e008      	b.n	800a174 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a162:	f7f8 fef1 	bl	8002f48 <HAL_GetTick>
 800a166:	4602      	mov	r2, r0
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	1ad3      	subs	r3, r2, r3
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d901      	bls.n	800a174 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e006      	b.n	800a182 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a174:	4b05      	ldr	r3, [pc, #20]	; (800a18c <RCCEx_PLL2_Config+0x15c>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d0f0      	beq.n	800a162 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a180:	7bfb      	ldrb	r3, [r7, #15]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	58024400 	.word	0x58024400
 800a190:	ffff0007 	.word	0xffff0007

0800a194 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1a2:	4b53      	ldr	r3, [pc, #332]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a1a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a6:	f003 0303 	and.w	r3, r3, #3
 800a1aa:	2b03      	cmp	r3, #3
 800a1ac:	d101      	bne.n	800a1b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e099      	b.n	800a2e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a1b2:	4b4f      	ldr	r3, [pc, #316]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a4e      	ldr	r2, [pc, #312]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a1b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1be:	f7f8 fec3 	bl	8002f48 <HAL_GetTick>
 800a1c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a1c4:	e008      	b.n	800a1d8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a1c6:	f7f8 febf 	bl	8002f48 <HAL_GetTick>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	2b02      	cmp	r3, #2
 800a1d2:	d901      	bls.n	800a1d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a1d4:	2303      	movs	r3, #3
 800a1d6:	e086      	b.n	800a2e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a1d8:	4b45      	ldr	r3, [pc, #276]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1f0      	bne.n	800a1c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a1e4:	4b42      	ldr	r3, [pc, #264]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	051b      	lsls	r3, r3, #20
 800a1f2:	493f      	ldr	r1, [pc, #252]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	628b      	str	r3, [r1, #40]	; 0x28
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	3b01      	subs	r3, #1
 800a208:	025b      	lsls	r3, r3, #9
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	431a      	orrs	r2, r3
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	3b01      	subs	r3, #1
 800a214:	041b      	lsls	r3, r3, #16
 800a216:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a21a:	431a      	orrs	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	3b01      	subs	r3, #1
 800a222:	061b      	lsls	r3, r3, #24
 800a224:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a228:	4931      	ldr	r1, [pc, #196]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a22a:	4313      	orrs	r3, r2
 800a22c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a22e:	4b30      	ldr	r3, [pc, #192]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a232:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	695b      	ldr	r3, [r3, #20]
 800a23a:	492d      	ldr	r1, [pc, #180]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a23c:	4313      	orrs	r3, r2
 800a23e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a240:	4b2b      	ldr	r3, [pc, #172]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a244:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	4928      	ldr	r1, [pc, #160]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a24e:	4313      	orrs	r3, r2
 800a250:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a252:	4b27      	ldr	r3, [pc, #156]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a256:	4a26      	ldr	r2, [pc, #152]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a25c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a25e:	4b24      	ldr	r3, [pc, #144]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a262:	4b24      	ldr	r3, [pc, #144]	; (800a2f4 <RCCEx_PLL3_Config+0x160>)
 800a264:	4013      	ands	r3, r2
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	69d2      	ldr	r2, [r2, #28]
 800a26a:	00d2      	lsls	r2, r2, #3
 800a26c:	4920      	ldr	r1, [pc, #128]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a26e:	4313      	orrs	r3, r2
 800a270:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a272:	4b1f      	ldr	r3, [pc, #124]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a276:	4a1e      	ldr	r2, [pc, #120]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a27c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d106      	bne.n	800a292 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a284:	4b1a      	ldr	r3, [pc, #104]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a288:	4a19      	ldr	r2, [pc, #100]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a28a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a28e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a290:	e00f      	b.n	800a2b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	2b01      	cmp	r3, #1
 800a296:	d106      	bne.n	800a2a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a298:	4b15      	ldr	r3, [pc, #84]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29c:	4a14      	ldr	r2, [pc, #80]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a29e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a2a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2a4:	e005      	b.n	800a2b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a2a6:	4b12      	ldr	r3, [pc, #72]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2aa:	4a11      	ldr	r2, [pc, #68]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a2ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a2b2:	4b0f      	ldr	r3, [pc, #60]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a0e      	ldr	r2, [pc, #56]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a2b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2be:	f7f8 fe43 	bl	8002f48 <HAL_GetTick>
 800a2c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a2c4:	e008      	b.n	800a2d8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a2c6:	f7f8 fe3f 	bl	8002f48 <HAL_GetTick>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d901      	bls.n	800a2d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	e006      	b.n	800a2e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a2d8:	4b05      	ldr	r3, [pc, #20]	; (800a2f0 <RCCEx_PLL3_Config+0x15c>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d0f0      	beq.n	800a2c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	58024400 	.word	0x58024400
 800a2f4:	ffff0007 	.word	0xffff0007

0800a2f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d071      	beq.n	800a3ee <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a310:	b2db      	uxtb	r3, r3
 800a312:	2b00      	cmp	r3, #0
 800a314:	d106      	bne.n	800a324 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7f8 f8fa 	bl	8002518 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2202      	movs	r2, #2
 800a328:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	f003 0310 	and.w	r3, r3, #16
 800a336:	2b10      	cmp	r3, #16
 800a338:	d050      	beq.n	800a3dc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	22ca      	movs	r2, #202	; 0xca
 800a340:	625a      	str	r2, [r3, #36]	; 0x24
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2253      	movs	r2, #83	; 0x53
 800a348:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 fa4a 	bl	800a7e4 <RTC_EnterInitMode>
 800a350:	4603      	mov	r3, r0
 800a352:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a354:	7bfb      	ldrb	r3, [r7, #15]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d124      	bne.n	800a3a4 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	6899      	ldr	r1, [r3, #8]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	4b24      	ldr	r3, [pc, #144]	; (800a3f8 <HAL_RTC_Init+0x100>)
 800a366:	400b      	ands	r3, r1
 800a368:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	6899      	ldr	r1, [r3, #8]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685a      	ldr	r2, [r3, #4]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	691b      	ldr	r3, [r3, #16]
 800a378:	431a      	orrs	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	431a      	orrs	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	430a      	orrs	r2, r1
 800a386:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	0419      	lsls	r1, r3, #16
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	68da      	ldr	r2, [r3, #12]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	430a      	orrs	r2, r1
 800a398:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 fa56 	bl	800a84c <RTC_ExitInitMode>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d113      	bne.n	800a3d2 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f022 0203 	bic.w	r2, r2, #3
 800a3b8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	69da      	ldr	r2, [r3, #28]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	695b      	ldr	r3, [r3, #20]
 800a3c8:	431a      	orrs	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	430a      	orrs	r2, r1
 800a3d0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	22ff      	movs	r2, #255	; 0xff
 800a3d8:	625a      	str	r2, [r3, #36]	; 0x24
 800a3da:	e001      	b.n	800a3e0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a3e0:	7bfb      	ldrb	r3, [r7, #15]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d103      	bne.n	800a3ee <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a3ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3710      	adds	r7, #16
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	ff8fffbf 	.word	0xff8fffbf

0800a3fc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a3fc:	b590      	push	{r4, r7, lr}
 800a3fe:	b087      	sub	sp, #28
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d101      	bne.n	800a416 <HAL_RTC_SetTime+0x1a>
 800a412:	2302      	movs	r3, #2
 800a414:	e089      	b.n	800a52a <HAL_RTC_SetTime+0x12e>
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2202      	movs	r2, #2
 800a422:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	22ca      	movs	r2, #202	; 0xca
 800a42c:	625a      	str	r2, [r3, #36]	; 0x24
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2253      	movs	r2, #83	; 0x53
 800a434:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f000 f9d4 	bl	800a7e4 <RTC_EnterInitMode>
 800a43c:	4603      	mov	r3, r0
 800a43e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a440:	7cfb      	ldrb	r3, [r7, #19]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d161      	bne.n	800a50a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d126      	bne.n	800a49a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a456:	2b00      	cmp	r3, #0
 800a458:	d102      	bne.n	800a460 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	2200      	movs	r2, #0
 800a45e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	4618      	mov	r0, r3
 800a466:	f000 fa2f 	bl	800a8c8 <RTC_ByteToBcd2>
 800a46a:	4603      	mov	r3, r0
 800a46c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	785b      	ldrb	r3, [r3, #1]
 800a472:	4618      	mov	r0, r3
 800a474:	f000 fa28 	bl	800a8c8 <RTC_ByteToBcd2>
 800a478:	4603      	mov	r3, r0
 800a47a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a47c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	789b      	ldrb	r3, [r3, #2]
 800a482:	4618      	mov	r0, r3
 800a484:	f000 fa20 	bl	800a8c8 <RTC_ByteToBcd2>
 800a488:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a48a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	78db      	ldrb	r3, [r3, #3]
 800a492:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a494:	4313      	orrs	r3, r2
 800a496:	617b      	str	r3, [r7, #20]
 800a498:	e018      	b.n	800a4cc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d102      	bne.n	800a4ae <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	785b      	ldrb	r3, [r3, #1]
 800a4b8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a4ba:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a4c0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	78db      	ldrb	r3, [r3, #3]
 800a4c6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	6979      	ldr	r1, [r7, #20]
 800a4d2:	4b18      	ldr	r3, [pc, #96]	; (800a534 <HAL_RTC_SetTime+0x138>)
 800a4d4:	400b      	ands	r3, r1
 800a4d6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	689a      	ldr	r2, [r3, #8]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a4e6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	6899      	ldr	r1, [r3, #8]
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	68da      	ldr	r2, [r3, #12]
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	431a      	orrs	r2, r3
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	430a      	orrs	r2, r1
 800a4fe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f000 f9a3 	bl	800a84c <RTC_ExitInitMode>
 800a506:	4603      	mov	r3, r0
 800a508:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	22ff      	movs	r2, #255	; 0xff
 800a510:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a512:	7cfb      	ldrb	r3, [r7, #19]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d103      	bne.n	800a520 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2200      	movs	r2, #0
 800a524:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a528:	7cfb      	ldrb	r3, [r7, #19]
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	371c      	adds	r7, #28
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd90      	pop	{r4, r7, pc}
 800a532:	bf00      	nop
 800a534:	007f7f7f 	.word	0x007f7f7f

0800a538 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b086      	sub	sp, #24
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	691b      	ldr	r3, [r3, #16]
 800a554:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	4b22      	ldr	r3, [pc, #136]	; (800a5ec <HAL_RTC_GetTime+0xb4>)
 800a564:	4013      	ands	r3, r2
 800a566:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	0c1b      	lsrs	r3, r3, #16
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a572:	b2da      	uxtb	r2, r3
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	0a1b      	lsrs	r3, r3, #8
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a582:	b2da      	uxtb	r2, r3
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a590:	b2da      	uxtb	r2, r3
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	0d9b      	lsrs	r3, r3, #22
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	f003 0301 	and.w	r3, r3, #1
 800a5a0:	b2da      	uxtb	r2, r3
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d11a      	bne.n	800a5e2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f000 f9a9 	bl	800a908 <RTC_Bcd2ToByte>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	785b      	ldrb	r3, [r3, #1]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f000 f9a0 	bl	800a908 <RTC_Bcd2ToByte>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	789b      	ldrb	r3, [r3, #2]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f000 f997 	bl	800a908 <RTC_Bcd2ToByte>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	461a      	mov	r2, r3
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3718      	adds	r7, #24
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	007f7f7f 	.word	0x007f7f7f

0800a5f0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a5f0:	b590      	push	{r4, r7, lr}
 800a5f2:	b087      	sub	sp, #28
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a602:	2b01      	cmp	r3, #1
 800a604:	d101      	bne.n	800a60a <HAL_RTC_SetDate+0x1a>
 800a606:	2302      	movs	r3, #2
 800a608:	e073      	b.n	800a6f2 <HAL_RTC_SetDate+0x102>
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2202      	movs	r2, #2
 800a616:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10e      	bne.n	800a63e <HAL_RTC_SetDate+0x4e>
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	785b      	ldrb	r3, [r3, #1]
 800a624:	f003 0310 	and.w	r3, r3, #16
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d008      	beq.n	800a63e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	785b      	ldrb	r3, [r3, #1]
 800a630:	f023 0310 	bic.w	r3, r3, #16
 800a634:	b2db      	uxtb	r3, r3
 800a636:	330a      	adds	r3, #10
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d11c      	bne.n	800a67e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	78db      	ldrb	r3, [r3, #3]
 800a648:	4618      	mov	r0, r3
 800a64a:	f000 f93d 	bl	800a8c8 <RTC_ByteToBcd2>
 800a64e:	4603      	mov	r3, r0
 800a650:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	785b      	ldrb	r3, [r3, #1]
 800a656:	4618      	mov	r0, r3
 800a658:	f000 f936 	bl	800a8c8 <RTC_ByteToBcd2>
 800a65c:	4603      	mov	r3, r0
 800a65e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a660:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	789b      	ldrb	r3, [r3, #2]
 800a666:	4618      	mov	r0, r3
 800a668:	f000 f92e 	bl	800a8c8 <RTC_ByteToBcd2>
 800a66c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a66e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a678:	4313      	orrs	r3, r2
 800a67a:	617b      	str	r3, [r7, #20]
 800a67c:	e00e      	b.n	800a69c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	78db      	ldrb	r3, [r3, #3]
 800a682:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	785b      	ldrb	r3, [r3, #1]
 800a688:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a68a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a690:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a698:	4313      	orrs	r3, r2
 800a69a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	22ca      	movs	r2, #202	; 0xca
 800a6a2:	625a      	str	r2, [r3, #36]	; 0x24
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2253      	movs	r2, #83	; 0x53
 800a6aa:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f000 f899 	bl	800a7e4 <RTC_EnterInitMode>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a6b6:	7cfb      	ldrb	r3, [r7, #19]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10a      	bne.n	800a6d2 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	6979      	ldr	r1, [r7, #20]
 800a6c2:	4b0e      	ldr	r3, [pc, #56]	; (800a6fc <HAL_RTC_SetDate+0x10c>)
 800a6c4:	400b      	ands	r3, r1
 800a6c6:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f000 f8bf 	bl	800a84c <RTC_ExitInitMode>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	22ff      	movs	r2, #255	; 0xff
 800a6d8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a6da:	7cfb      	ldrb	r3, [r7, #19]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d103      	bne.n	800a6e8 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a6f0:	7cfb      	ldrb	r3, [r7, #19]


}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	371c      	adds	r7, #28
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd90      	pop	{r4, r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	00ffff3f 	.word	0x00ffff3f

0800a700 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	685a      	ldr	r2, [r3, #4]
 800a712:	4b21      	ldr	r3, [pc, #132]	; (800a798 <HAL_RTC_GetDate+0x98>)
 800a714:	4013      	ands	r3, r2
 800a716:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	0c1b      	lsrs	r3, r3, #16
 800a71c:	b2da      	uxtb	r2, r3
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	0a1b      	lsrs	r3, r3, #8
 800a726:	b2db      	uxtb	r3, r3
 800a728:	f003 031f 	and.w	r3, r3, #31
 800a72c:	b2da      	uxtb	r2, r3
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	b2db      	uxtb	r3, r3
 800a736:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	0b5b      	lsrs	r3, r3, #13
 800a744:	b2db      	uxtb	r3, r3
 800a746:	f003 0307 	and.w	r3, r3, #7
 800a74a:	b2da      	uxtb	r2, r3
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d11a      	bne.n	800a78c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	78db      	ldrb	r3, [r3, #3]
 800a75a:	4618      	mov	r0, r3
 800a75c:	f000 f8d4 	bl	800a908 <RTC_Bcd2ToByte>
 800a760:	4603      	mov	r3, r0
 800a762:	461a      	mov	r2, r3
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	785b      	ldrb	r3, [r3, #1]
 800a76c:	4618      	mov	r0, r3
 800a76e:	f000 f8cb 	bl	800a908 <RTC_Bcd2ToByte>
 800a772:	4603      	mov	r3, r0
 800a774:	461a      	mov	r2, r3
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	789b      	ldrb	r3, [r3, #2]
 800a77e:	4618      	mov	r0, r3
 800a780:	f000 f8c2 	bl	800a908 <RTC_Bcd2ToByte>
 800a784:	4603      	mov	r3, r0
 800a786:	461a      	mov	r2, r3
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3718      	adds	r7, #24
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	00ffff3f 	.word	0x00ffff3f

0800a79c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a0d      	ldr	r2, [pc, #52]	; (800a7e0 <HAL_RTC_WaitForSynchro+0x44>)
 800a7aa:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800a7ac:	f7f8 fbcc 	bl	8002f48 <HAL_GetTick>
 800a7b0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a7b2:	e009      	b.n	800a7c8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a7b4:	f7f8 fbc8 	bl	8002f48 <HAL_GetTick>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7c2:	d901      	bls.n	800a7c8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	e007      	b.n	800a7d8 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	f003 0320 	and.w	r3, r3, #32
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d0ee      	beq.n	800a7b4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3710      	adds	r7, #16
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	0003ff5f 	.word	0x0003ff5f

0800a7e4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d120      	bne.n	800a840 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f04f 32ff 	mov.w	r2, #4294967295
 800a806:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a808:	f7f8 fb9e 	bl	8002f48 <HAL_GetTick>
 800a80c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a80e:	e00d      	b.n	800a82c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a810:	f7f8 fb9a 	bl	8002f48 <HAL_GetTick>
 800a814:	4602      	mov	r2, r0
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a81e:	d905      	bls.n	800a82c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a820:	2303      	movs	r3, #3
 800a822:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2203      	movs	r2, #3
 800a828:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a836:	2b00      	cmp	r3, #0
 800a838:	d102      	bne.n	800a840 <RTC_EnterInitMode+0x5c>
 800a83a:	7bfb      	ldrb	r3, [r7, #15]
 800a83c:	2b03      	cmp	r3, #3
 800a83e:	d1e7      	bne.n	800a810 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a840:	7bfb      	ldrb	r3, [r7, #15]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
	...

0800a84c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a854:	2300      	movs	r3, #0
 800a856:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a858:	4b1a      	ldr	r3, [pc, #104]	; (800a8c4 <RTC_ExitInitMode+0x78>)
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	4a19      	ldr	r2, [pc, #100]	; (800a8c4 <RTC_ExitInitMode+0x78>)
 800a85e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a862:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a864:	4b17      	ldr	r3, [pc, #92]	; (800a8c4 <RTC_ExitInitMode+0x78>)
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	f003 0320 	and.w	r3, r3, #32
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d10c      	bne.n	800a88a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f7ff ff93 	bl	800a79c <HAL_RTC_WaitForSynchro>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d01e      	beq.n	800a8ba <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2203      	movs	r2, #3
 800a880:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a884:	2303      	movs	r3, #3
 800a886:	73fb      	strb	r3, [r7, #15]
 800a888:	e017      	b.n	800a8ba <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a88a:	4b0e      	ldr	r3, [pc, #56]	; (800a8c4 <RTC_ExitInitMode+0x78>)
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	4a0d      	ldr	r2, [pc, #52]	; (800a8c4 <RTC_ExitInitMode+0x78>)
 800a890:	f023 0320 	bic.w	r3, r3, #32
 800a894:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f7ff ff80 	bl	800a79c <HAL_RTC_WaitForSynchro>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d005      	beq.n	800a8ae <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2203      	movs	r2, #3
 800a8a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a8ae:	4b05      	ldr	r3, [pc, #20]	; (800a8c4 <RTC_ExitInitMode+0x78>)
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	4a04      	ldr	r2, [pc, #16]	; (800a8c4 <RTC_ExitInitMode+0x78>)
 800a8b4:	f043 0320 	orr.w	r3, r3, #32
 800a8b8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3710      	adds	r7, #16
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	58004000 	.word	0x58004000

0800a8c8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800a8d6:	79fb      	ldrb	r3, [r7, #7]
 800a8d8:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800a8da:	e005      	b.n	800a8e8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800a8e2:	7afb      	ldrb	r3, [r7, #11]
 800a8e4:	3b0a      	subs	r3, #10
 800a8e6:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800a8e8:	7afb      	ldrb	r3, [r7, #11]
 800a8ea:	2b09      	cmp	r3, #9
 800a8ec:	d8f6      	bhi.n	800a8dc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	011b      	lsls	r3, r3, #4
 800a8f4:	b2da      	uxtb	r2, r3
 800a8f6:	7afb      	ldrb	r3, [r7, #11]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	b2db      	uxtb	r3, r3
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3714      	adds	r7, #20
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4603      	mov	r3, r0
 800a910:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800a912:	79fb      	ldrb	r3, [r7, #7]
 800a914:	091b      	lsrs	r3, r3, #4
 800a916:	b2db      	uxtb	r3, r3
 800a918:	461a      	mov	r2, r3
 800a91a:	0092      	lsls	r2, r2, #2
 800a91c:	4413      	add	r3, r2
 800a91e:	005b      	lsls	r3, r3, #1
 800a920:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800a922:	79fb      	ldrb	r3, [r7, #7]
 800a924:	f003 030f 	and.w	r3, r3, #15
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	7bfb      	ldrb	r3, [r7, #15]
 800a92c:	4413      	add	r3, r2
 800a92e:	b2db      	uxtb	r3, r3
}
 800a930:	4618      	mov	r0, r3
 800a932:	3714      	adds	r7, #20
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b08a      	sub	sp, #40	; 0x28
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d101      	bne.n	800a94e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	e28e      	b.n	800ae6c <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a94e:	f7f8 fb2b 	bl	8002fa8 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d113      	bne.n	800a984 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a96      	ldr	r2, [pc, #600]	; (800abbc <HAL_SAI_Init+0x280>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d004      	beq.n	800a970 <HAL_SAI_Init+0x34>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a95      	ldr	r2, [pc, #596]	; (800abc0 <HAL_SAI_Init+0x284>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d107      	bne.n	800a980 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a974:	2b01      	cmp	r3, #1
 800a976:	d103      	bne.n	800a980 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	e273      	b.n	800ae6c <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a8c      	ldr	r2, [pc, #560]	; (800abbc <HAL_SAI_Init+0x280>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d004      	beq.n	800a998 <HAL_SAI_Init+0x5c>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a8c      	ldr	r2, [pc, #560]	; (800abc4 <HAL_SAI_Init+0x288>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d102      	bne.n	800a99e <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800a998:	4b8b      	ldr	r3, [pc, #556]	; (800abc8 <HAL_SAI_Init+0x28c>)
 800a99a:	61bb      	str	r3, [r7, #24]
 800a99c:	e028      	b.n	800a9f0 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a8a      	ldr	r2, [pc, #552]	; (800abcc <HAL_SAI_Init+0x290>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d004      	beq.n	800a9b2 <HAL_SAI_Init+0x76>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a88      	ldr	r2, [pc, #544]	; (800abd0 <HAL_SAI_Init+0x294>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d102      	bne.n	800a9b8 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800a9b2:	4b88      	ldr	r3, [pc, #544]	; (800abd4 <HAL_SAI_Init+0x298>)
 800a9b4:	61bb      	str	r3, [r7, #24]
 800a9b6:	e01b      	b.n	800a9f0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a86      	ldr	r2, [pc, #536]	; (800abd8 <HAL_SAI_Init+0x29c>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d004      	beq.n	800a9cc <HAL_SAI_Init+0x90>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a85      	ldr	r2, [pc, #532]	; (800abdc <HAL_SAI_Init+0x2a0>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d102      	bne.n	800a9d2 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800a9cc:	4b84      	ldr	r3, [pc, #528]	; (800abe0 <HAL_SAI_Init+0x2a4>)
 800a9ce:	61bb      	str	r3, [r7, #24]
 800a9d0:	e00e      	b.n	800a9f0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a7a      	ldr	r2, [pc, #488]	; (800abc0 <HAL_SAI_Init+0x284>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d004      	beq.n	800a9e6 <HAL_SAI_Init+0xaa>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a80      	ldr	r2, [pc, #512]	; (800abe4 <HAL_SAI_Init+0x2a8>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d102      	bne.n	800a9ec <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800a9e6:	4b80      	ldr	r3, [pc, #512]	; (800abe8 <HAL_SAI_Init+0x2ac>)
 800a9e8:	61bb      	str	r3, [r7, #24]
 800a9ea:	e001      	b.n	800a9f0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e23d      	b.n	800ae6c <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d106      	bne.n	800aa0a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f7f8 f859 	bl	8002abc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fa40 	bl	800ae90 <SAI_Disable>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d001      	beq.n	800aa1a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e228      	b.n	800ae6c <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2202      	movs	r2, #2
 800aa1e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	d00c      	beq.n	800aa44 <HAL_SAI_Init+0x108>
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d80d      	bhi.n	800aa4a <HAL_SAI_Init+0x10e>
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d002      	beq.n	800aa38 <HAL_SAI_Init+0xfc>
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d003      	beq.n	800aa3e <HAL_SAI_Init+0x102>
 800aa36:	e008      	b.n	800aa4a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800aa3c:	e008      	b.n	800aa50 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800aa3e:	2310      	movs	r3, #16
 800aa40:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800aa42:	e005      	b.n	800aa50 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800aa44:	2320      	movs	r3, #32
 800aa46:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800aa48:	e002      	b.n	800aa50 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800aa4e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	2b05      	cmp	r3, #5
 800aa56:	d832      	bhi.n	800aabe <HAL_SAI_Init+0x182>
 800aa58:	a201      	add	r2, pc, #4	; (adr r2, 800aa60 <HAL_SAI_Init+0x124>)
 800aa5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa5e:	bf00      	nop
 800aa60:	0800aa79 	.word	0x0800aa79
 800aa64:	0800aa7f 	.word	0x0800aa7f
 800aa68:	0800aa87 	.word	0x0800aa87
 800aa6c:	0800aa8f 	.word	0x0800aa8f
 800aa70:	0800aa9f 	.word	0x0800aa9f
 800aa74:	0800aaaf 	.word	0x0800aaaf
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	61fb      	str	r3, [r7, #28]
      break;
 800aa7c:	e022      	b.n	800aac4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800aa7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa82:	61fb      	str	r3, [r7, #28]
      break;
 800aa84:	e01e      	b.n	800aac4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800aa86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa8a:	61fb      	str	r3, [r7, #28]
      break;
 800aa8c:	e01a      	b.n	800aac4 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800aa8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa92:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	f043 0301 	orr.w	r3, r3, #1
 800aa9a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800aa9c:	e012      	b.n	800aac4 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800aa9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aaa2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa6:	f043 0302 	orr.w	r3, r3, #2
 800aaaa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800aaac:	e00a      	b.n	800aac4 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800aaae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aab2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab6:	f043 0303 	orr.w	r3, r3, #3
 800aaba:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800aabc:	e002      	b.n	800aac4 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800aabe:	2300      	movs	r3, #0
 800aac0:	61fb      	str	r3, [r7, #28]
      break;
 800aac2:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aac8:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f000 80c5 	beq.w	800ac5e <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800aad4:	2300      	movs	r3, #0
 800aad6:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a37      	ldr	r2, [pc, #220]	; (800abbc <HAL_SAI_Init+0x280>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d004      	beq.n	800aaec <HAL_SAI_Init+0x1b0>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a37      	ldr	r2, [pc, #220]	; (800abc4 <HAL_SAI_Init+0x288>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d106      	bne.n	800aafa <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800aaec:	f44f 7080 	mov.w	r0, #256	; 0x100
 800aaf0:	f04f 0100 	mov.w	r1, #0
 800aaf4:	f7fe f90c 	bl	8008d10 <HAL_RCCEx_GetPeriphCLKFreq>
 800aaf8:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a33      	ldr	r2, [pc, #204]	; (800abcc <HAL_SAI_Init+0x290>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d004      	beq.n	800ab0e <HAL_SAI_Init+0x1d2>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a31      	ldr	r2, [pc, #196]	; (800abd0 <HAL_SAI_Init+0x294>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d106      	bne.n	800ab1c <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ab0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ab12:	f04f 0100 	mov.w	r1, #0
 800ab16:	f7fe f8fb 	bl	8008d10 <HAL_RCCEx_GetPeriphCLKFreq>
 800ab1a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a2d      	ldr	r2, [pc, #180]	; (800abd8 <HAL_SAI_Init+0x29c>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d004      	beq.n	800ab30 <HAL_SAI_Init+0x1f4>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a2c      	ldr	r2, [pc, #176]	; (800abdc <HAL_SAI_Init+0x2a0>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d106      	bne.n	800ab3e <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800ab30:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ab34:	f04f 0100 	mov.w	r1, #0
 800ab38:	f7fe f8ea 	bl	8008d10 <HAL_RCCEx_GetPeriphCLKFreq>
 800ab3c:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a1f      	ldr	r2, [pc, #124]	; (800abc0 <HAL_SAI_Init+0x284>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d106      	bne.n	800ab56 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800ab48:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ab4c:	f04f 0100 	mov.w	r1, #0
 800ab50:	f7fe f8de 	bl	8008d10 <HAL_RCCEx_GetPeriphCLKFreq>
 800ab54:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a22      	ldr	r2, [pc, #136]	; (800abe4 <HAL_SAI_Init+0x2a8>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d106      	bne.n	800ab6e <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800ab60:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ab64:	f04f 0100 	mov.w	r1, #0
 800ab68:	f7fe f8d2 	bl	8008d10 <HAL_RCCEx_GetPeriphCLKFreq>
 800ab6c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	699b      	ldr	r3, [r3, #24]
 800ab72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ab76:	d139      	bne.n	800abec <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab7c:	2b04      	cmp	r3, #4
 800ab7e:	d102      	bne.n	800ab86 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800ab80:	2340      	movs	r3, #64	; 0x40
 800ab82:	60fb      	str	r3, [r7, #12]
 800ab84:	e00a      	b.n	800ab9c <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab8a:	2b08      	cmp	r3, #8
 800ab8c:	d103      	bne.n	800ab96 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800ab8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab92:	60fb      	str	r3, [r7, #12]
 800ab94:	e002      	b.n	800ab9c <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab9a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800ab9c:	697a      	ldr	r2, [r7, #20]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	4413      	add	r3, r2
 800aba4:	005b      	lsls	r3, r3, #1
 800aba6:	4619      	mov	r1, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6a1b      	ldr	r3, [r3, #32]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	fb02 f303 	mul.w	r3, r2, r3
 800abb2:	fbb1 f3f3 	udiv	r3, r1, r3
 800abb6:	613b      	str	r3, [r7, #16]
 800abb8:	e030      	b.n	800ac1c <HAL_SAI_Init+0x2e0>
 800abba:	bf00      	nop
 800abbc:	40015804 	.word	0x40015804
 800abc0:	58005404 	.word	0x58005404
 800abc4:	40015824 	.word	0x40015824
 800abc8:	40015800 	.word	0x40015800
 800abcc:	40015c04 	.word	0x40015c04
 800abd0:	40015c24 	.word	0x40015c24
 800abd4:	40015c00 	.word	0x40015c00
 800abd8:	40016004 	.word	0x40016004
 800abdc:	40016024 	.word	0x40016024
 800abe0:	40016000 	.word	0x40016000
 800abe4:	58005424 	.word	0x58005424
 800abe8:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800abf4:	d101      	bne.n	800abfa <HAL_SAI_Init+0x2be>
 800abf6:	2302      	movs	r3, #2
 800abf8:	e000      	b.n	800abfc <HAL_SAI_Init+0x2c0>
 800abfa:	2301      	movs	r3, #1
 800abfc:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800abfe:	697a      	ldr	r2, [r7, #20]
 800ac00:	4613      	mov	r3, r2
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	4413      	add	r3, r2
 800ac06:	005b      	lsls	r3, r3, #1
 800ac08:	4619      	mov	r1, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a1b      	ldr	r3, [r3, #32]
 800ac0e:	68ba      	ldr	r2, [r7, #8]
 800ac10:	fb02 f303 	mul.w	r3, r2, r3
 800ac14:	021b      	lsls	r3, r3, #8
 800ac16:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac1a:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	4a95      	ldr	r2, [pc, #596]	; (800ae74 <HAL_SAI_Init+0x538>)
 800ac20:	fba2 2303 	umull	r2, r3, r2, r3
 800ac24:	08da      	lsrs	r2, r3, #3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800ac2a:	6939      	ldr	r1, [r7, #16]
 800ac2c:	4b91      	ldr	r3, [pc, #580]	; (800ae74 <HAL_SAI_Init+0x538>)
 800ac2e:	fba3 2301 	umull	r2, r3, r3, r1
 800ac32:	08da      	lsrs	r2, r3, #3
 800ac34:	4613      	mov	r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4413      	add	r3, r2
 800ac3a:	005b      	lsls	r3, r3, #1
 800ac3c:	1aca      	subs	r2, r1, r3
 800ac3e:	2a08      	cmp	r2, #8
 800ac40:	d904      	bls.n	800ac4c <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac46:	1c5a      	adds	r2, r3, #1
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac50:	2b04      	cmp	r3, #4
 800ac52:	d104      	bne.n	800ac5e <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac58:	085a      	lsrs	r2, r3, #1
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d003      	beq.n	800ac6e <HAL_SAI_Init+0x332>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d109      	bne.n	800ac82 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d101      	bne.n	800ac7a <HAL_SAI_Init+0x33e>
 800ac76:	2300      	movs	r3, #0
 800ac78:	e001      	b.n	800ac7e <HAL_SAI_Init+0x342>
 800ac7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac7e:	623b      	str	r3, [r7, #32]
 800ac80:	e008      	b.n	800ac94 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d102      	bne.n	800ac90 <HAL_SAI_Init+0x354>
 800ac8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac8e:	e000      	b.n	800ac92 <HAL_SAI_Init+0x356>
 800ac90:	2300      	movs	r3, #0
 800ac92:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800ac94:	f7f8 f988 	bl	8002fa8 <HAL_GetREVID>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac9e:	d331      	bcc.n	800ad04 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	6819      	ldr	r1, [r3, #0]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	4b73      	ldr	r3, [pc, #460]	; (800ae78 <HAL_SAI_Init+0x53c>)
 800acac:	400b      	ands	r3, r1
 800acae:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	6819      	ldr	r1, [r3, #0]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	685a      	ldr	r2, [r3, #4]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acbe:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800acc4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acca:	431a      	orrs	r2, r3
 800accc:	6a3b      	ldr	r3, [r7, #32]
 800acce:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800acd8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ace4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acea:	051b      	lsls	r3, r3, #20
 800acec:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800acf2:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	691b      	ldr	r3, [r3, #16]
 800acf8:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	430a      	orrs	r2, r1
 800ad00:	601a      	str	r2, [r3, #0]
 800ad02:	e02d      	b.n	800ad60 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	6819      	ldr	r1, [r3, #0]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	4b5b      	ldr	r3, [pc, #364]	; (800ae7c <HAL_SAI_Init+0x540>)
 800ad10:	400b      	ands	r3, r1
 800ad12:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	6819      	ldr	r1, [r3, #0]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	685a      	ldr	r2, [r3, #4]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad22:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad28:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad2e:	431a      	orrs	r2, r3
 800ad30:	6a3b      	ldr	r3, [r7, #32]
 800ad32:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800ad3c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	695b      	ldr	r3, [r3, #20]
 800ad42:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ad48:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4e:	051b      	lsls	r3, r3, #20
 800ad50:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ad56:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	430a      	orrs	r2, r1
 800ad5e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	6859      	ldr	r1, [r3, #4]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	4b45      	ldr	r3, [pc, #276]	; (800ae80 <HAL_SAI_Init+0x544>)
 800ad6c:	400b      	ands	r3, r1
 800ad6e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	6859      	ldr	r1, [r3, #4]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	69da      	ldr	r2, [r3, #28]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7e:	431a      	orrs	r2, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad84:	431a      	orrs	r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	430a      	orrs	r2, r1
 800ad8c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	6899      	ldr	r1, [r3, #8]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	4b3a      	ldr	r3, [pc, #232]	; (800ae84 <HAL_SAI_Init+0x548>)
 800ad9a:	400b      	ands	r3, r1
 800ad9c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	6899      	ldr	r1, [r3, #8]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ada8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800adae:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800adb4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800adba:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adc0:	3b01      	subs	r3, #1
 800adc2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800adc4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	430a      	orrs	r2, r1
 800adcc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	68d9      	ldr	r1, [r3, #12]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	f24f 0320 	movw	r3, #61472	; 0xf020
 800addc:	400b      	ands	r3, r1
 800adde:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68d9      	ldr	r1, [r3, #12]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adee:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adf4:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800adf6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adfc:	3b01      	subs	r3, #1
 800adfe:	021b      	lsls	r3, r3, #8
 800ae00:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	430a      	orrs	r2, r1
 800ae08:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a1e      	ldr	r2, [pc, #120]	; (800ae88 <HAL_SAI_Init+0x54c>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d004      	beq.n	800ae1e <HAL_SAI_Init+0x4e2>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a1c      	ldr	r2, [pc, #112]	; (800ae8c <HAL_SAI_Init+0x550>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d119      	bne.n	800ae52 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae22:	f023 0201 	bic.w	r2, r3, #1
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d10e      	bne.n	800ae52 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ae40:	431a      	orrs	r2, r3
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae4a:	f043 0201 	orr.w	r2, r3, #1
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2200      	movs	r2, #0
 800ae56:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2200      	movs	r2, #0
 800ae66:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3728      	adds	r7, #40	; 0x28
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	cccccccd 	.word	0xcccccccd
 800ae78:	f005c010 	.word	0xf005c010
 800ae7c:	f805c010 	.word	0xf805c010
 800ae80:	ffff1ff0 	.word	0xffff1ff0
 800ae84:	fff88000 	.word	0xfff88000
 800ae88:	40015804 	.word	0x40015804
 800ae8c:	58005404 	.word	0x58005404

0800ae90 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b085      	sub	sp, #20
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ae98:	4b18      	ldr	r3, [pc, #96]	; (800aefc <SAI_Disable+0x6c>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a18      	ldr	r2, [pc, #96]	; (800af00 <SAI_Disable+0x70>)
 800ae9e:	fba2 2303 	umull	r2, r3, r2, r3
 800aea2:	0b1b      	lsrs	r3, r3, #12
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aeba:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d10a      	bne.n	800aed8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aec8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800aed2:	2303      	movs	r3, #3
 800aed4:	72fb      	strb	r3, [r7, #11]
      break;
 800aed6:	e009      	b.n	800aeec <SAI_Disable+0x5c>
    }
    count--;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	3b01      	subs	r3, #1
 800aedc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1e7      	bne.n	800aebc <SAI_Disable+0x2c>

  return status;
 800aeec:	7afb      	ldrb	r3, [r7, #11]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3714      	adds	r7, #20
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	24000028 	.word	0x24000028
 800af00:	95cbec1b 	.word	0x95cbec1b

0800af04 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d101      	bne.n	800af18 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800af14:	2301      	movs	r3, #1
 800af16:	e02b      	b.n	800af70 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	2b00      	cmp	r3, #0
 800af22:	d106      	bne.n	800af32 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f7f7 fdbb 	bl	8002aa8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2202      	movs	r2, #2
 800af36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	3304      	adds	r3, #4
 800af42:	4619      	mov	r1, r3
 800af44:	4610      	mov	r0, r2
 800af46:	f003 f905 	bl	800e154 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6818      	ldr	r0, [r3, #0]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	461a      	mov	r2, r3
 800af54:	6839      	ldr	r1, [r7, #0]
 800af56:	f003 f959 	bl	800e20c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800af5a:	4b07      	ldr	r3, [pc, #28]	; (800af78 <HAL_SDRAM_Init+0x74>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a06      	ldr	r2, [pc, #24]	; (800af78 <HAL_SDRAM_Init+0x74>)
 800af60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af64:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2201      	movs	r2, #1
 800af6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800af6e:	2300      	movs	r3, #0
}
 800af70:	4618      	mov	r0, r3
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	52004000 	.word	0x52004000

0800af7c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d101      	bne.n	800af8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	e10f      	b.n	800b1ae <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a87      	ldr	r2, [pc, #540]	; (800b1b8 <HAL_SPI_Init+0x23c>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d00f      	beq.n	800afbe <HAL_SPI_Init+0x42>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4a86      	ldr	r2, [pc, #536]	; (800b1bc <HAL_SPI_Init+0x240>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d00a      	beq.n	800afbe <HAL_SPI_Init+0x42>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a84      	ldr	r2, [pc, #528]	; (800b1c0 <HAL_SPI_Init+0x244>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d005      	beq.n	800afbe <HAL_SPI_Init+0x42>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	68db      	ldr	r3, [r3, #12]
 800afb6:	2b0f      	cmp	r3, #15
 800afb8:	d901      	bls.n	800afbe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	e0f7      	b.n	800b1ae <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 f900 	bl	800b1c4 <SPI_GetPacketSize>
 800afc4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a7b      	ldr	r2, [pc, #492]	; (800b1b8 <HAL_SPI_Init+0x23c>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d00c      	beq.n	800afea <HAL_SPI_Init+0x6e>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a79      	ldr	r2, [pc, #484]	; (800b1bc <HAL_SPI_Init+0x240>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d007      	beq.n	800afea <HAL_SPI_Init+0x6e>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a78      	ldr	r2, [pc, #480]	; (800b1c0 <HAL_SPI_Init+0x244>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d002      	beq.n	800afea <HAL_SPI_Init+0x6e>
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2b08      	cmp	r3, #8
 800afe8:	d811      	bhi.n	800b00e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800afee:	4a72      	ldr	r2, [pc, #456]	; (800b1b8 <HAL_SPI_Init+0x23c>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d009      	beq.n	800b008 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a70      	ldr	r2, [pc, #448]	; (800b1bc <HAL_SPI_Init+0x240>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d004      	beq.n	800b008 <HAL_SPI_Init+0x8c>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a6f      	ldr	r2, [pc, #444]	; (800b1c0 <HAL_SPI_Init+0x244>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d104      	bne.n	800b012 <HAL_SPI_Init+0x96>
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2b10      	cmp	r3, #16
 800b00c:	d901      	bls.n	800b012 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b00e:	2301      	movs	r3, #1
 800b010:	e0cd      	b.n	800b1ae <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d106      	bne.n	800b02c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7f7 faa8 	bl	800257c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2202      	movs	r2, #2
 800b030:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f022 0201 	bic.w	r2, r2, #1
 800b042:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b04e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	699b      	ldr	r3, [r3, #24]
 800b054:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b058:	d119      	bne.n	800b08e <HAL_SPI_Init+0x112>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b062:	d103      	bne.n	800b06c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d008      	beq.n	800b07e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10c      	bne.n	800b08e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b078:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b07c:	d107      	bne.n	800b08e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b08c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00f      	beq.n	800b0ba <HAL_SPI_Init+0x13e>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	2b06      	cmp	r3, #6
 800b0a0:	d90b      	bls.n	800b0ba <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	430a      	orrs	r2, r1
 800b0b6:	601a      	str	r2, [r3, #0]
 800b0b8:	e007      	b.n	800b0ca <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b0c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	69da      	ldr	r2, [r3, #28]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d2:	431a      	orrs	r2, r3
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	431a      	orrs	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0dc:	ea42 0103 	orr.w	r1, r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	68da      	ldr	r2, [r3, #12]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	430a      	orrs	r2, r1
 800b0ea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f4:	431a      	orrs	r2, r3
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0fa:	431a      	orrs	r2, r3
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	699b      	ldr	r3, [r3, #24]
 800b100:	431a      	orrs	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	431a      	orrs	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	695b      	ldr	r3, [r3, #20]
 800b10c:	431a      	orrs	r2, r3
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a1b      	ldr	r3, [r3, #32]
 800b112:	431a      	orrs	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	431a      	orrs	r2, r3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b11e:	431a      	orrs	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	431a      	orrs	r2, r3
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b12a:	ea42 0103 	orr.w	r1, r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	430a      	orrs	r2, r1
 800b138:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d113      	bne.n	800b16a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b154:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b168:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f022 0201 	bic.w	r2, r2, #1
 800b178:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00a      	beq.n	800b19c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	430a      	orrs	r2, r1
 800b19a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	40013000 	.word	0x40013000
 800b1bc:	40003800 	.word	0x40003800
 800b1c0:	40003c00 	.word	0x40003c00

0800b1c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1d0:	095b      	lsrs	r3, r3, #5
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	3307      	adds	r3, #7
 800b1e2:	08db      	lsrs	r3, r3, #3
 800b1e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	fb02 f303 	mul.w	r3, r2, r3
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3714      	adds	r7, #20
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr

0800b1fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b082      	sub	sp, #8
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d101      	bne.n	800b20c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b208:	2301      	movs	r3, #1
 800b20a:	e049      	b.n	800b2a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b212:	b2db      	uxtb	r3, r3
 800b214:	2b00      	cmp	r3, #0
 800b216:	d106      	bne.n	800b226 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f7f7 fa75 	bl	8002710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2202      	movs	r2, #2
 800b22a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	3304      	adds	r3, #4
 800b236:	4619      	mov	r1, r3
 800b238:	4610      	mov	r0, r2
 800b23a:	f000 f99d 	bl	800b578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2201      	movs	r2, #1
 800b242:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2201      	movs	r2, #1
 800b24a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2201      	movs	r2, #1
 800b252:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2201      	movs	r2, #1
 800b25a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2201      	movs	r2, #1
 800b262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2201      	movs	r2, #1
 800b26a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2201      	movs	r2, #1
 800b272:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2201      	movs	r2, #1
 800b27a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2201      	movs	r2, #1
 800b282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2201      	movs	r2, #1
 800b28a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2201      	movs	r2, #1
 800b292:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2201      	movs	r2, #1
 800b29a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b29e:	2300      	movs	r3, #0
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3708      	adds	r7, #8
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d001      	beq.n	800b2c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e04c      	b.n	800b35a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2202      	movs	r2, #2
 800b2c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a26      	ldr	r2, [pc, #152]	; (800b368 <HAL_TIM_Base_Start+0xc0>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d022      	beq.n	800b318 <HAL_TIM_Base_Start+0x70>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2da:	d01d      	beq.n	800b318 <HAL_TIM_Base_Start+0x70>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a22      	ldr	r2, [pc, #136]	; (800b36c <HAL_TIM_Base_Start+0xc4>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d018      	beq.n	800b318 <HAL_TIM_Base_Start+0x70>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a21      	ldr	r2, [pc, #132]	; (800b370 <HAL_TIM_Base_Start+0xc8>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d013      	beq.n	800b318 <HAL_TIM_Base_Start+0x70>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a1f      	ldr	r2, [pc, #124]	; (800b374 <HAL_TIM_Base_Start+0xcc>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d00e      	beq.n	800b318 <HAL_TIM_Base_Start+0x70>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a1e      	ldr	r2, [pc, #120]	; (800b378 <HAL_TIM_Base_Start+0xd0>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d009      	beq.n	800b318 <HAL_TIM_Base_Start+0x70>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a1c      	ldr	r2, [pc, #112]	; (800b37c <HAL_TIM_Base_Start+0xd4>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d004      	beq.n	800b318 <HAL_TIM_Base_Start+0x70>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a1b      	ldr	r2, [pc, #108]	; (800b380 <HAL_TIM_Base_Start+0xd8>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d115      	bne.n	800b344 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	689a      	ldr	r2, [r3, #8]
 800b31e:	4b19      	ldr	r3, [pc, #100]	; (800b384 <HAL_TIM_Base_Start+0xdc>)
 800b320:	4013      	ands	r3, r2
 800b322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2b06      	cmp	r3, #6
 800b328:	d015      	beq.n	800b356 <HAL_TIM_Base_Start+0xae>
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b330:	d011      	beq.n	800b356 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f042 0201 	orr.w	r2, r2, #1
 800b340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b342:	e008      	b.n	800b356 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f042 0201 	orr.w	r2, r2, #1
 800b352:	601a      	str	r2, [r3, #0]
 800b354:	e000      	b.n	800b358 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b356:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3714      	adds	r7, #20
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr
 800b366:	bf00      	nop
 800b368:	40010000 	.word	0x40010000
 800b36c:	40000400 	.word	0x40000400
 800b370:	40000800 	.word	0x40000800
 800b374:	40000c00 	.word	0x40000c00
 800b378:	40010400 	.word	0x40010400
 800b37c:	40001800 	.word	0x40001800
 800b380:	40014000 	.word	0x40014000
 800b384:	00010007 	.word	0x00010007

0800b388 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b392:	2300      	movs	r3, #0
 800b394:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d101      	bne.n	800b3a4 <HAL_TIM_ConfigClockSource+0x1c>
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	e0dc      	b.n	800b55e <HAL_TIM_ConfigClockSource+0x1d6>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2202      	movs	r2, #2
 800b3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b3bc:	68ba      	ldr	r2, [r7, #8]
 800b3be:	4b6a      	ldr	r3, [pc, #424]	; (800b568 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b3c0:	4013      	ands	r3, r2
 800b3c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	68ba      	ldr	r2, [r7, #8]
 800b3d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a64      	ldr	r2, [pc, #400]	; (800b56c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	f000 80a9 	beq.w	800b532 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3e0:	4a62      	ldr	r2, [pc, #392]	; (800b56c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	f200 80ae 	bhi.w	800b544 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3e8:	4a61      	ldr	r2, [pc, #388]	; (800b570 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	f000 80a1 	beq.w	800b532 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3f0:	4a5f      	ldr	r2, [pc, #380]	; (800b570 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	f200 80a6 	bhi.w	800b544 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3f8:	4a5e      	ldr	r2, [pc, #376]	; (800b574 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	f000 8099 	beq.w	800b532 <HAL_TIM_ConfigClockSource+0x1aa>
 800b400:	4a5c      	ldr	r2, [pc, #368]	; (800b574 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b402:	4293      	cmp	r3, r2
 800b404:	f200 809e 	bhi.w	800b544 <HAL_TIM_ConfigClockSource+0x1bc>
 800b408:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b40c:	f000 8091 	beq.w	800b532 <HAL_TIM_ConfigClockSource+0x1aa>
 800b410:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b414:	f200 8096 	bhi.w	800b544 <HAL_TIM_ConfigClockSource+0x1bc>
 800b418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b41c:	f000 8089 	beq.w	800b532 <HAL_TIM_ConfigClockSource+0x1aa>
 800b420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b424:	f200 808e 	bhi.w	800b544 <HAL_TIM_ConfigClockSource+0x1bc>
 800b428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b42c:	d03e      	beq.n	800b4ac <HAL_TIM_ConfigClockSource+0x124>
 800b42e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b432:	f200 8087 	bhi.w	800b544 <HAL_TIM_ConfigClockSource+0x1bc>
 800b436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b43a:	f000 8086 	beq.w	800b54a <HAL_TIM_ConfigClockSource+0x1c2>
 800b43e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b442:	d87f      	bhi.n	800b544 <HAL_TIM_ConfigClockSource+0x1bc>
 800b444:	2b70      	cmp	r3, #112	; 0x70
 800b446:	d01a      	beq.n	800b47e <HAL_TIM_ConfigClockSource+0xf6>
 800b448:	2b70      	cmp	r3, #112	; 0x70
 800b44a:	d87b      	bhi.n	800b544 <HAL_TIM_ConfigClockSource+0x1bc>
 800b44c:	2b60      	cmp	r3, #96	; 0x60
 800b44e:	d050      	beq.n	800b4f2 <HAL_TIM_ConfigClockSource+0x16a>
 800b450:	2b60      	cmp	r3, #96	; 0x60
 800b452:	d877      	bhi.n	800b544 <HAL_TIM_ConfigClockSource+0x1bc>
 800b454:	2b50      	cmp	r3, #80	; 0x50
 800b456:	d03c      	beq.n	800b4d2 <HAL_TIM_ConfigClockSource+0x14a>
 800b458:	2b50      	cmp	r3, #80	; 0x50
 800b45a:	d873      	bhi.n	800b544 <HAL_TIM_ConfigClockSource+0x1bc>
 800b45c:	2b40      	cmp	r3, #64	; 0x40
 800b45e:	d058      	beq.n	800b512 <HAL_TIM_ConfigClockSource+0x18a>
 800b460:	2b40      	cmp	r3, #64	; 0x40
 800b462:	d86f      	bhi.n	800b544 <HAL_TIM_ConfigClockSource+0x1bc>
 800b464:	2b30      	cmp	r3, #48	; 0x30
 800b466:	d064      	beq.n	800b532 <HAL_TIM_ConfigClockSource+0x1aa>
 800b468:	2b30      	cmp	r3, #48	; 0x30
 800b46a:	d86b      	bhi.n	800b544 <HAL_TIM_ConfigClockSource+0x1bc>
 800b46c:	2b20      	cmp	r3, #32
 800b46e:	d060      	beq.n	800b532 <HAL_TIM_ConfigClockSource+0x1aa>
 800b470:	2b20      	cmp	r3, #32
 800b472:	d867      	bhi.n	800b544 <HAL_TIM_ConfigClockSource+0x1bc>
 800b474:	2b00      	cmp	r3, #0
 800b476:	d05c      	beq.n	800b532 <HAL_TIM_ConfigClockSource+0x1aa>
 800b478:	2b10      	cmp	r3, #16
 800b47a:	d05a      	beq.n	800b532 <HAL_TIM_ConfigClockSource+0x1aa>
 800b47c:	e062      	b.n	800b544 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6818      	ldr	r0, [r3, #0]
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	6899      	ldr	r1, [r3, #8]
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	685a      	ldr	r2, [r3, #4]
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	68db      	ldr	r3, [r3, #12]
 800b48e:	f000 f98b 	bl	800b7a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b4a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	68ba      	ldr	r2, [r7, #8]
 800b4a8:	609a      	str	r2, [r3, #8]
      break;
 800b4aa:	e04f      	b.n	800b54c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6818      	ldr	r0, [r3, #0]
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	6899      	ldr	r1, [r3, #8]
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	685a      	ldr	r2, [r3, #4]
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	f000 f974 	bl	800b7a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	689a      	ldr	r2, [r3, #8]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4ce:	609a      	str	r2, [r3, #8]
      break;
 800b4d0:	e03c      	b.n	800b54c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6818      	ldr	r0, [r3, #0]
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	6859      	ldr	r1, [r3, #4]
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	f000 f8e4 	bl	800b6ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2150      	movs	r1, #80	; 0x50
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f000 f93e 	bl	800b76c <TIM_ITRx_SetConfig>
      break;
 800b4f0:	e02c      	b.n	800b54c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6818      	ldr	r0, [r3, #0]
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	6859      	ldr	r1, [r3, #4]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	68db      	ldr	r3, [r3, #12]
 800b4fe:	461a      	mov	r2, r3
 800b500:	f000 f903 	bl	800b70a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2160      	movs	r1, #96	; 0x60
 800b50a:	4618      	mov	r0, r3
 800b50c:	f000 f92e 	bl	800b76c <TIM_ITRx_SetConfig>
      break;
 800b510:	e01c      	b.n	800b54c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6818      	ldr	r0, [r3, #0]
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	6859      	ldr	r1, [r3, #4]
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	461a      	mov	r2, r3
 800b520:	f000 f8c4 	bl	800b6ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2140      	movs	r1, #64	; 0x40
 800b52a:	4618      	mov	r0, r3
 800b52c:	f000 f91e 	bl	800b76c <TIM_ITRx_SetConfig>
      break;
 800b530:	e00c      	b.n	800b54c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4619      	mov	r1, r3
 800b53c:	4610      	mov	r0, r2
 800b53e:	f000 f915 	bl	800b76c <TIM_ITRx_SetConfig>
      break;
 800b542:	e003      	b.n	800b54c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b544:	2301      	movs	r3, #1
 800b546:	73fb      	strb	r3, [r7, #15]
      break;
 800b548:	e000      	b.n	800b54c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b54a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	ffceff88 	.word	0xffceff88
 800b56c:	00100040 	.word	0x00100040
 800b570:	00100030 	.word	0x00100030
 800b574:	00100020 	.word	0x00100020

0800b578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b578:	b480      	push	{r7}
 800b57a:	b085      	sub	sp, #20
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4a40      	ldr	r2, [pc, #256]	; (800b68c <TIM_Base_SetConfig+0x114>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d013      	beq.n	800b5b8 <TIM_Base_SetConfig+0x40>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b596:	d00f      	beq.n	800b5b8 <TIM_Base_SetConfig+0x40>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	4a3d      	ldr	r2, [pc, #244]	; (800b690 <TIM_Base_SetConfig+0x118>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d00b      	beq.n	800b5b8 <TIM_Base_SetConfig+0x40>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	4a3c      	ldr	r2, [pc, #240]	; (800b694 <TIM_Base_SetConfig+0x11c>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d007      	beq.n	800b5b8 <TIM_Base_SetConfig+0x40>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	4a3b      	ldr	r2, [pc, #236]	; (800b698 <TIM_Base_SetConfig+0x120>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d003      	beq.n	800b5b8 <TIM_Base_SetConfig+0x40>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4a3a      	ldr	r2, [pc, #232]	; (800b69c <TIM_Base_SetConfig+0x124>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d108      	bne.n	800b5ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4a2f      	ldr	r2, [pc, #188]	; (800b68c <TIM_Base_SetConfig+0x114>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d01f      	beq.n	800b612 <TIM_Base_SetConfig+0x9a>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5d8:	d01b      	beq.n	800b612 <TIM_Base_SetConfig+0x9a>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4a2c      	ldr	r2, [pc, #176]	; (800b690 <TIM_Base_SetConfig+0x118>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d017      	beq.n	800b612 <TIM_Base_SetConfig+0x9a>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a2b      	ldr	r2, [pc, #172]	; (800b694 <TIM_Base_SetConfig+0x11c>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d013      	beq.n	800b612 <TIM_Base_SetConfig+0x9a>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a2a      	ldr	r2, [pc, #168]	; (800b698 <TIM_Base_SetConfig+0x120>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d00f      	beq.n	800b612 <TIM_Base_SetConfig+0x9a>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4a29      	ldr	r2, [pc, #164]	; (800b69c <TIM_Base_SetConfig+0x124>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d00b      	beq.n	800b612 <TIM_Base_SetConfig+0x9a>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a28      	ldr	r2, [pc, #160]	; (800b6a0 <TIM_Base_SetConfig+0x128>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d007      	beq.n	800b612 <TIM_Base_SetConfig+0x9a>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4a27      	ldr	r2, [pc, #156]	; (800b6a4 <TIM_Base_SetConfig+0x12c>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d003      	beq.n	800b612 <TIM_Base_SetConfig+0x9a>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	4a26      	ldr	r2, [pc, #152]	; (800b6a8 <TIM_Base_SetConfig+0x130>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d108      	bne.n	800b624 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	4313      	orrs	r3, r2
 800b622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	695b      	ldr	r3, [r3, #20]
 800b62e:	4313      	orrs	r3, r2
 800b630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	689a      	ldr	r2, [r3, #8]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4a10      	ldr	r2, [pc, #64]	; (800b68c <TIM_Base_SetConfig+0x114>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d00f      	beq.n	800b670 <TIM_Base_SetConfig+0xf8>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4a12      	ldr	r2, [pc, #72]	; (800b69c <TIM_Base_SetConfig+0x124>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d00b      	beq.n	800b670 <TIM_Base_SetConfig+0xf8>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4a11      	ldr	r2, [pc, #68]	; (800b6a0 <TIM_Base_SetConfig+0x128>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d007      	beq.n	800b670 <TIM_Base_SetConfig+0xf8>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	4a10      	ldr	r2, [pc, #64]	; (800b6a4 <TIM_Base_SetConfig+0x12c>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d003      	beq.n	800b670 <TIM_Base_SetConfig+0xf8>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4a0f      	ldr	r2, [pc, #60]	; (800b6a8 <TIM_Base_SetConfig+0x130>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d103      	bne.n	800b678 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	691a      	ldr	r2, [r3, #16]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2201      	movs	r2, #1
 800b67c:	615a      	str	r2, [r3, #20]
}
 800b67e:	bf00      	nop
 800b680:	3714      	adds	r7, #20
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr
 800b68a:	bf00      	nop
 800b68c:	40010000 	.word	0x40010000
 800b690:	40000400 	.word	0x40000400
 800b694:	40000800 	.word	0x40000800
 800b698:	40000c00 	.word	0x40000c00
 800b69c:	40010400 	.word	0x40010400
 800b6a0:	40014000 	.word	0x40014000
 800b6a4:	40014400 	.word	0x40014400
 800b6a8:	40014800 	.word	0x40014800

0800b6ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b087      	sub	sp, #28
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6a1b      	ldr	r3, [r3, #32]
 800b6bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6a1b      	ldr	r3, [r3, #32]
 800b6c2:	f023 0201 	bic.w	r2, r3, #1
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	011b      	lsls	r3, r3, #4
 800b6dc:	693a      	ldr	r2, [r7, #16]
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	f023 030a 	bic.w	r3, r3, #10
 800b6e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b6ea:	697a      	ldr	r2, [r7, #20]
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	693a      	ldr	r2, [r7, #16]
 800b6f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	697a      	ldr	r2, [r7, #20]
 800b6fc:	621a      	str	r2, [r3, #32]
}
 800b6fe:	bf00      	nop
 800b700:	371c      	adds	r7, #28
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b70a:	b480      	push	{r7}
 800b70c:	b087      	sub	sp, #28
 800b70e:	af00      	add	r7, sp, #0
 800b710:	60f8      	str	r0, [r7, #12]
 800b712:	60b9      	str	r1, [r7, #8]
 800b714:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	6a1b      	ldr	r3, [r3, #32]
 800b71a:	f023 0210 	bic.w	r2, r3, #16
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	699b      	ldr	r3, [r3, #24]
 800b726:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	6a1b      	ldr	r3, [r3, #32]
 800b72c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b734:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	031b      	lsls	r3, r3, #12
 800b73a:	697a      	ldr	r2, [r7, #20]
 800b73c:	4313      	orrs	r3, r2
 800b73e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b746:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	011b      	lsls	r3, r3, #4
 800b74c:	693a      	ldr	r2, [r7, #16]
 800b74e:	4313      	orrs	r3, r2
 800b750:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	697a      	ldr	r2, [r7, #20]
 800b756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	693a      	ldr	r2, [r7, #16]
 800b75c:	621a      	str	r2, [r3, #32]
}
 800b75e:	bf00      	nop
 800b760:	371c      	adds	r7, #28
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr
	...

0800b76c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b085      	sub	sp, #20
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	4b09      	ldr	r3, [pc, #36]	; (800b7a4 <TIM_ITRx_SetConfig+0x38>)
 800b780:	4013      	ands	r3, r2
 800b782:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b784:	683a      	ldr	r2, [r7, #0]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	4313      	orrs	r3, r2
 800b78a:	f043 0307 	orr.w	r3, r3, #7
 800b78e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	609a      	str	r2, [r3, #8]
}
 800b796:	bf00      	nop
 800b798:	3714      	adds	r7, #20
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	ffcfff8f 	.word	0xffcfff8f

0800b7a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b087      	sub	sp, #28
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]
 800b7b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	021a      	lsls	r2, r3, #8
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	431a      	orrs	r2, r3
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	697a      	ldr	r2, [r7, #20]
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	697a      	ldr	r2, [r7, #20]
 800b7da:	609a      	str	r2, [r3, #8]
}
 800b7dc:	bf00      	nop
 800b7de:	371c      	adds	r7, #28
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d101      	bne.n	800b800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7fc:	2302      	movs	r3, #2
 800b7fe:	e06d      	b.n	800b8dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2202      	movs	r2, #2
 800b80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a30      	ldr	r2, [pc, #192]	; (800b8e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d004      	beq.n	800b834 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a2f      	ldr	r2, [pc, #188]	; (800b8ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d108      	bne.n	800b846 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b83a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	68fa      	ldr	r2, [r7, #12]
 800b842:	4313      	orrs	r3, r2
 800b844:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b84c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	68fa      	ldr	r2, [r7, #12]
 800b854:	4313      	orrs	r3, r2
 800b856:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	68fa      	ldr	r2, [r7, #12]
 800b85e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a20      	ldr	r2, [pc, #128]	; (800b8e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d022      	beq.n	800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b872:	d01d      	beq.n	800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a1d      	ldr	r2, [pc, #116]	; (800b8f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d018      	beq.n	800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a1c      	ldr	r2, [pc, #112]	; (800b8f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d013      	beq.n	800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a1a      	ldr	r2, [pc, #104]	; (800b8f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d00e      	beq.n	800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a15      	ldr	r2, [pc, #84]	; (800b8ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d009      	beq.n	800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a16      	ldr	r2, [pc, #88]	; (800b8fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d004      	beq.n	800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a15      	ldr	r2, [pc, #84]	; (800b900 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d10c      	bne.n	800b8ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	68ba      	ldr	r2, [r7, #8]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	68ba      	ldr	r2, [r7, #8]
 800b8c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3714      	adds	r7, #20
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr
 800b8e8:	40010000 	.word	0x40010000
 800b8ec:	40010400 	.word	0x40010400
 800b8f0:	40000400 	.word	0x40000400
 800b8f4:	40000800 	.word	0x40000800
 800b8f8:	40000c00 	.word	0x40000c00
 800b8fc:	40001800 	.word	0x40001800
 800b900:	40014000 	.word	0x40014000

0800b904 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d101      	bne.n	800b916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	e042      	b.n	800b99c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d106      	bne.n	800b92e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f7f6 ff13 	bl	8002754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2224      	movs	r2, #36	; 0x24
 800b932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f022 0201 	bic.w	r2, r2, #1
 800b944:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 fce0 	bl	800c30c <UART_SetConfig>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d101      	bne.n	800b956 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	e022      	b.n	800b99c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d002      	beq.n	800b964 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f001 fa3c 	bl	800cddc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	685a      	ldr	r2, [r3, #4]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b972:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	689a      	ldr	r2, [r3, #8]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b982:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f042 0201 	orr.w	r2, r2, #1
 800b992:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f001 fac3 	bl	800cf20 <UART_CheckIdleState>
 800b99a:	4603      	mov	r3, r0
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3708      	adds	r7, #8
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b08a      	sub	sp, #40	; 0x28
 800b9a8:	af02      	add	r7, sp, #8
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	603b      	str	r3, [r7, #0]
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9ba:	2b20      	cmp	r3, #32
 800b9bc:	d17b      	bne.n	800bab6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d002      	beq.n	800b9ca <HAL_UART_Transmit+0x26>
 800b9c4:	88fb      	ldrh	r3, [r7, #6]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d101      	bne.n	800b9ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e074      	b.n	800bab8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2221      	movs	r2, #33	; 0x21
 800b9da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b9de:	f7f7 fab3 	bl	8002f48 <HAL_GetTick>
 800b9e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	88fa      	ldrh	r2, [r7, #6]
 800b9e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	88fa      	ldrh	r2, [r7, #6]
 800b9f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9fc:	d108      	bne.n	800ba10 <HAL_UART_Transmit+0x6c>
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	691b      	ldr	r3, [r3, #16]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d104      	bne.n	800ba10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ba06:	2300      	movs	r3, #0
 800ba08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	61bb      	str	r3, [r7, #24]
 800ba0e:	e003      	b.n	800ba18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ba14:	2300      	movs	r3, #0
 800ba16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ba18:	e030      	b.n	800ba7c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	9300      	str	r3, [sp, #0]
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	2200      	movs	r2, #0
 800ba22:	2180      	movs	r1, #128	; 0x80
 800ba24:	68f8      	ldr	r0, [r7, #12]
 800ba26:	f001 fb25 	bl	800d074 <UART_WaitOnFlagUntilTimeout>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d005      	beq.n	800ba3c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2220      	movs	r2, #32
 800ba34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ba38:	2303      	movs	r3, #3
 800ba3a:	e03d      	b.n	800bab8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d10b      	bne.n	800ba5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	881b      	ldrh	r3, [r3, #0]
 800ba46:	461a      	mov	r2, r3
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	3302      	adds	r3, #2
 800ba56:	61bb      	str	r3, [r7, #24]
 800ba58:	e007      	b.n	800ba6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ba5a:	69fb      	ldr	r3, [r7, #28]
 800ba5c:	781a      	ldrb	r2, [r3, #0]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ba64:	69fb      	ldr	r3, [r7, #28]
 800ba66:	3301      	adds	r3, #1
 800ba68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	3b01      	subs	r3, #1
 800ba74:	b29a      	uxth	r2, r3
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d1c8      	bne.n	800ba1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	9300      	str	r3, [sp, #0]
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	2140      	movs	r1, #64	; 0x40
 800ba92:	68f8      	ldr	r0, [r7, #12]
 800ba94:	f001 faee 	bl	800d074 <UART_WaitOnFlagUntilTimeout>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d005      	beq.n	800baaa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2220      	movs	r2, #32
 800baa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800baa6:	2303      	movs	r3, #3
 800baa8:	e006      	b.n	800bab8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2220      	movs	r2, #32
 800baae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800bab2:	2300      	movs	r3, #0
 800bab4:	e000      	b.n	800bab8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bab6:	2302      	movs	r3, #2
  }
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3720      	adds	r7, #32
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b08a      	sub	sp, #40	; 0x28
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	4613      	mov	r3, r2
 800bacc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bad4:	2b20      	cmp	r3, #32
 800bad6:	d137      	bne.n	800bb48 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d002      	beq.n	800bae4 <HAL_UART_Receive_IT+0x24>
 800bade:	88fb      	ldrh	r3, [r7, #6]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d101      	bne.n	800bae8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	e030      	b.n	800bb4a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a18      	ldr	r2, [pc, #96]	; (800bb54 <HAL_UART_Receive_IT+0x94>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d01f      	beq.n	800bb38 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d018      	beq.n	800bb38 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	e853 3f00 	ldrex	r3, [r3]
 800bb12:	613b      	str	r3, [r7, #16]
   return(result);
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bb1a:	627b      	str	r3, [r7, #36]	; 0x24
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	461a      	mov	r2, r3
 800bb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb24:	623b      	str	r3, [r7, #32]
 800bb26:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb28:	69f9      	ldr	r1, [r7, #28]
 800bb2a:	6a3a      	ldr	r2, [r7, #32]
 800bb2c:	e841 2300 	strex	r3, r2, [r1]
 800bb30:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1e6      	bne.n	800bb06 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bb38:	88fb      	ldrh	r3, [r7, #6]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	68b9      	ldr	r1, [r7, #8]
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f001 fb00 	bl	800d144 <UART_Start_Receive_IT>
 800bb44:	4603      	mov	r3, r0
 800bb46:	e000      	b.n	800bb4a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bb48:	2302      	movs	r3, #2
  }
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3728      	adds	r7, #40	; 0x28
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	58000c00 	.word	0x58000c00

0800bb58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b0ba      	sub	sp, #232	; 0xe8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	69db      	ldr	r3, [r3, #28]
 800bb66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bb7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bb82:	f640 030f 	movw	r3, #2063	; 0x80f
 800bb86:	4013      	ands	r3, r2
 800bb88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bb8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d11b      	bne.n	800bbcc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb98:	f003 0320 	and.w	r3, r3, #32
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d015      	beq.n	800bbcc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bba4:	f003 0320 	and.w	r3, r3, #32
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d105      	bne.n	800bbb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bbac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d009      	beq.n	800bbcc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f000 8377 	beq.w	800c2b0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	4798      	blx	r3
      }
      return;
 800bbca:	e371      	b.n	800c2b0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bbcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	f000 8123 	beq.w	800be1c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bbd6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bbda:	4b8d      	ldr	r3, [pc, #564]	; (800be10 <HAL_UART_IRQHandler+0x2b8>)
 800bbdc:	4013      	ands	r3, r2
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d106      	bne.n	800bbf0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bbe2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bbe6:	4b8b      	ldr	r3, [pc, #556]	; (800be14 <HAL_UART_IRQHandler+0x2bc>)
 800bbe8:	4013      	ands	r3, r2
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f000 8116 	beq.w	800be1c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bbf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbf4:	f003 0301 	and.w	r3, r3, #1
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d011      	beq.n	800bc20 <HAL_UART_IRQHandler+0xc8>
 800bbfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d00b      	beq.n	800bc20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc16:	f043 0201 	orr.w	r2, r3, #1
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc24:	f003 0302 	and.w	r3, r3, #2
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d011      	beq.n	800bc50 <HAL_UART_IRQHandler+0xf8>
 800bc2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc30:	f003 0301 	and.w	r3, r3, #1
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00b      	beq.n	800bc50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2202      	movs	r2, #2
 800bc3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc46:	f043 0204 	orr.w	r2, r3, #4
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc54:	f003 0304 	and.w	r3, r3, #4
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d011      	beq.n	800bc80 <HAL_UART_IRQHandler+0x128>
 800bc5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc60:	f003 0301 	and.w	r3, r3, #1
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d00b      	beq.n	800bc80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2204      	movs	r2, #4
 800bc6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc76:	f043 0202 	orr.w	r2, r3, #2
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bc80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc84:	f003 0308 	and.w	r3, r3, #8
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d017      	beq.n	800bcbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc90:	f003 0320 	and.w	r3, r3, #32
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d105      	bne.n	800bca4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bc98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bc9c:	4b5c      	ldr	r3, [pc, #368]	; (800be10 <HAL_UART_IRQHandler+0x2b8>)
 800bc9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d00b      	beq.n	800bcbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	2208      	movs	r2, #8
 800bcaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcb2:	f043 0208 	orr.w	r2, r3, #8
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bcbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d012      	beq.n	800bcee <HAL_UART_IRQHandler+0x196>
 800bcc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bccc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d00c      	beq.n	800bcee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bcdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bce4:	f043 0220 	orr.w	r2, r3, #32
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f000 82dd 	beq.w	800c2b4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bcfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcfe:	f003 0320 	and.w	r3, r3, #32
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d013      	beq.n	800bd2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bd06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd0a:	f003 0320 	and.w	r3, r3, #32
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d105      	bne.n	800bd1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bd12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d007      	beq.n	800bd2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d003      	beq.n	800bd2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd42:	2b40      	cmp	r3, #64	; 0x40
 800bd44:	d005      	beq.n	800bd52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bd46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d054      	beq.n	800bdfc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f001 fb18 	bl	800d388 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd62:	2b40      	cmp	r3, #64	; 0x40
 800bd64:	d146      	bne.n	800bdf4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	3308      	adds	r3, #8
 800bd6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bd74:	e853 3f00 	ldrex	r3, [r3]
 800bd78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bd7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	3308      	adds	r3, #8
 800bd8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bd92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bd96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bd9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bda2:	e841 2300 	strex	r3, r2, [r1]
 800bda6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bdaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d1d9      	bne.n	800bd66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d017      	beq.n	800bdec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdc2:	4a15      	ldr	r2, [pc, #84]	; (800be18 <HAL_UART_IRQHandler+0x2c0>)
 800bdc4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7f8 fddd 	bl	800498c <HAL_DMA_Abort_IT>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d019      	beq.n	800be0c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800bde6:	4610      	mov	r0, r2
 800bde8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdea:	e00f      	b.n	800be0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 fa77 	bl	800c2e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdf2:	e00b      	b.n	800be0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 fa73 	bl	800c2e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdfa:	e007      	b.n	800be0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 fa6f 	bl	800c2e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800be0a:	e253      	b.n	800c2b4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be0c:	bf00      	nop
    return;
 800be0e:	e251      	b.n	800c2b4 <HAL_UART_IRQHandler+0x75c>
 800be10:	10000001 	.word	0x10000001
 800be14:	04000120 	.word	0x04000120
 800be18:	0800d455 	.word	0x0800d455

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be20:	2b01      	cmp	r3, #1
 800be22:	f040 81e7 	bne.w	800c1f4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800be26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be2a:	f003 0310 	and.w	r3, r3, #16
 800be2e:	2b00      	cmp	r3, #0
 800be30:	f000 81e0 	beq.w	800c1f4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800be34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be38:	f003 0310 	and.w	r3, r3, #16
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f000 81d9 	beq.w	800c1f4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	2210      	movs	r2, #16
 800be48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be54:	2b40      	cmp	r3, #64	; 0x40
 800be56:	f040 8151 	bne.w	800c0fc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4a96      	ldr	r2, [pc, #600]	; (800c0bc <HAL_UART_IRQHandler+0x564>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d068      	beq.n	800bf3a <HAL_UART_IRQHandler+0x3e2>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4a93      	ldr	r2, [pc, #588]	; (800c0c0 <HAL_UART_IRQHandler+0x568>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d061      	beq.n	800bf3a <HAL_UART_IRQHandler+0x3e2>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4a91      	ldr	r2, [pc, #580]	; (800c0c4 <HAL_UART_IRQHandler+0x56c>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d05a      	beq.n	800bf3a <HAL_UART_IRQHandler+0x3e2>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a8e      	ldr	r2, [pc, #568]	; (800c0c8 <HAL_UART_IRQHandler+0x570>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d053      	beq.n	800bf3a <HAL_UART_IRQHandler+0x3e2>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a8c      	ldr	r2, [pc, #560]	; (800c0cc <HAL_UART_IRQHandler+0x574>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d04c      	beq.n	800bf3a <HAL_UART_IRQHandler+0x3e2>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a89      	ldr	r2, [pc, #548]	; (800c0d0 <HAL_UART_IRQHandler+0x578>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d045      	beq.n	800bf3a <HAL_UART_IRQHandler+0x3e2>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4a87      	ldr	r2, [pc, #540]	; (800c0d4 <HAL_UART_IRQHandler+0x57c>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d03e      	beq.n	800bf3a <HAL_UART_IRQHandler+0x3e2>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a84      	ldr	r2, [pc, #528]	; (800c0d8 <HAL_UART_IRQHandler+0x580>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d037      	beq.n	800bf3a <HAL_UART_IRQHandler+0x3e2>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a82      	ldr	r2, [pc, #520]	; (800c0dc <HAL_UART_IRQHandler+0x584>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d030      	beq.n	800bf3a <HAL_UART_IRQHandler+0x3e2>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4a7f      	ldr	r2, [pc, #508]	; (800c0e0 <HAL_UART_IRQHandler+0x588>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d029      	beq.n	800bf3a <HAL_UART_IRQHandler+0x3e2>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	4a7d      	ldr	r2, [pc, #500]	; (800c0e4 <HAL_UART_IRQHandler+0x58c>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d022      	beq.n	800bf3a <HAL_UART_IRQHandler+0x3e2>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4a7a      	ldr	r2, [pc, #488]	; (800c0e8 <HAL_UART_IRQHandler+0x590>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d01b      	beq.n	800bf3a <HAL_UART_IRQHandler+0x3e2>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4a78      	ldr	r2, [pc, #480]	; (800c0ec <HAL_UART_IRQHandler+0x594>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d014      	beq.n	800bf3a <HAL_UART_IRQHandler+0x3e2>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a75      	ldr	r2, [pc, #468]	; (800c0f0 <HAL_UART_IRQHandler+0x598>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d00d      	beq.n	800bf3a <HAL_UART_IRQHandler+0x3e2>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a73      	ldr	r2, [pc, #460]	; (800c0f4 <HAL_UART_IRQHandler+0x59c>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d006      	beq.n	800bf3a <HAL_UART_IRQHandler+0x3e2>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a70      	ldr	r2, [pc, #448]	; (800c0f8 <HAL_UART_IRQHandler+0x5a0>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d106      	bne.n	800bf48 <HAL_UART_IRQHandler+0x3f0>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	e005      	b.n	800bf54 <HAL_UART_IRQHandler+0x3fc>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bf58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f000 81ab 	beq.w	800c2b8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bf68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	f080 81a3 	bcs.w	800c2b8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf82:	69db      	ldr	r3, [r3, #28]
 800bf84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf88:	f000 8087 	beq.w	800c09a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf98:	e853 3f00 	ldrex	r3, [r3]
 800bf9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bfa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bfa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bfb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bfba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bfc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bfc6:	e841 2300 	strex	r3, r2, [r1]
 800bfca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bfce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d1da      	bne.n	800bf8c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	3308      	adds	r3, #8
 800bfdc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bfe0:	e853 3f00 	ldrex	r3, [r3]
 800bfe4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bfe6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfe8:	f023 0301 	bic.w	r3, r3, #1
 800bfec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	3308      	adds	r3, #8
 800bff6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bffa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bffe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c000:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c002:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c006:	e841 2300 	strex	r3, r2, [r1]
 800c00a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c00c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d1e1      	bne.n	800bfd6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	3308      	adds	r3, #8
 800c018:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c01c:	e853 3f00 	ldrex	r3, [r3]
 800c020:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c024:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c028:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	3308      	adds	r3, #8
 800c032:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c036:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c038:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c03c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c03e:	e841 2300 	strex	r3, r2, [r1]
 800c042:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c044:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1e3      	bne.n	800c012 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2220      	movs	r2, #32
 800c04e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2200      	movs	r2, #0
 800c056:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c05e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c060:	e853 3f00 	ldrex	r3, [r3]
 800c064:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c068:	f023 0310 	bic.w	r3, r3, #16
 800c06c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	461a      	mov	r2, r3
 800c076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c07a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c07c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c07e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c080:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c082:	e841 2300 	strex	r3, r2, [r1]
 800c086:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d1e4      	bne.n	800c058 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c094:	4618      	mov	r0, r3
 800c096:	f7f8 f95b 	bl	8004350 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2202      	movs	r2, #2
 800c09e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	1ad3      	subs	r3, r2, r3
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 f91d 	bl	800c2f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c0ba:	e0fd      	b.n	800c2b8 <HAL_UART_IRQHandler+0x760>
 800c0bc:	40020010 	.word	0x40020010
 800c0c0:	40020028 	.word	0x40020028
 800c0c4:	40020040 	.word	0x40020040
 800c0c8:	40020058 	.word	0x40020058
 800c0cc:	40020070 	.word	0x40020070
 800c0d0:	40020088 	.word	0x40020088
 800c0d4:	400200a0 	.word	0x400200a0
 800c0d8:	400200b8 	.word	0x400200b8
 800c0dc:	40020410 	.word	0x40020410
 800c0e0:	40020428 	.word	0x40020428
 800c0e4:	40020440 	.word	0x40020440
 800c0e8:	40020458 	.word	0x40020458
 800c0ec:	40020470 	.word	0x40020470
 800c0f0:	40020488 	.word	0x40020488
 800c0f4:	400204a0 	.word	0x400204a0
 800c0f8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c108:	b29b      	uxth	r3, r3
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c116:	b29b      	uxth	r3, r3
 800c118:	2b00      	cmp	r3, #0
 800c11a:	f000 80cf 	beq.w	800c2bc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c11e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c122:	2b00      	cmp	r3, #0
 800c124:	f000 80ca 	beq.w	800c2bc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c130:	e853 3f00 	ldrex	r3, [r3]
 800c134:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c138:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c13c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	461a      	mov	r2, r3
 800c146:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c14a:	647b      	str	r3, [r7, #68]	; 0x44
 800c14c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c14e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c152:	e841 2300 	strex	r3, r2, [r1]
 800c156:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d1e4      	bne.n	800c128 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	3308      	adds	r3, #8
 800c164:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c168:	e853 3f00 	ldrex	r3, [r3]
 800c16c:	623b      	str	r3, [r7, #32]
   return(result);
 800c16e:	6a3a      	ldr	r2, [r7, #32]
 800c170:	4b55      	ldr	r3, [pc, #340]	; (800c2c8 <HAL_UART_IRQHandler+0x770>)
 800c172:	4013      	ands	r3, r2
 800c174:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	3308      	adds	r3, #8
 800c17e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c182:	633a      	str	r2, [r7, #48]	; 0x30
 800c184:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c186:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c18a:	e841 2300 	strex	r3, r2, [r1]
 800c18e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c192:	2b00      	cmp	r3, #0
 800c194:	d1e3      	bne.n	800c15e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2220      	movs	r2, #32
 800c19a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	e853 3f00 	ldrex	r3, [r3]
 800c1b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f023 0310 	bic.w	r3, r3, #16
 800c1be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c1cc:	61fb      	str	r3, [r7, #28]
 800c1ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d0:	69b9      	ldr	r1, [r7, #24]
 800c1d2:	69fa      	ldr	r2, [r7, #28]
 800c1d4:	e841 2300 	strex	r3, r2, [r1]
 800c1d8:	617b      	str	r3, [r7, #20]
   return(result);
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d1e4      	bne.n	800c1aa <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2202      	movs	r2, #2
 800c1e4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c1e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 f881 	bl	800c2f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c1f2:	e063      	b.n	800c2bc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c1f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00e      	beq.n	800c21e <HAL_UART_IRQHandler+0x6c6>
 800c200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d008      	beq.n	800c21e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c214:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f001 fe7a 	bl	800df10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c21c:	e051      	b.n	800c2c2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c21e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c226:	2b00      	cmp	r3, #0
 800c228:	d014      	beq.n	800c254 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c22a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c232:	2b00      	cmp	r3, #0
 800c234:	d105      	bne.n	800c242 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c23a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d008      	beq.n	800c254 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c246:	2b00      	cmp	r3, #0
 800c248:	d03a      	beq.n	800c2c0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	4798      	blx	r3
    }
    return;
 800c252:	e035      	b.n	800c2c0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d009      	beq.n	800c274 <HAL_UART_IRQHandler+0x71c>
 800c260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d003      	beq.n	800c274 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f001 f907 	bl	800d480 <UART_EndTransmit_IT>
    return;
 800c272:	e026      	b.n	800c2c2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c278:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d009      	beq.n	800c294 <HAL_UART_IRQHandler+0x73c>
 800c280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c284:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d003      	beq.n	800c294 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f001 fe53 	bl	800df38 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c292:	e016      	b.n	800c2c2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c298:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d010      	beq.n	800c2c2 <HAL_UART_IRQHandler+0x76a>
 800c2a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	da0c      	bge.n	800c2c2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f001 fe3b 	bl	800df24 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c2ae:	e008      	b.n	800c2c2 <HAL_UART_IRQHandler+0x76a>
      return;
 800c2b0:	bf00      	nop
 800c2b2:	e006      	b.n	800c2c2 <HAL_UART_IRQHandler+0x76a>
    return;
 800c2b4:	bf00      	nop
 800c2b6:	e004      	b.n	800c2c2 <HAL_UART_IRQHandler+0x76a>
      return;
 800c2b8:	bf00      	nop
 800c2ba:	e002      	b.n	800c2c2 <HAL_UART_IRQHandler+0x76a>
      return;
 800c2bc:	bf00      	nop
 800c2be:	e000      	b.n	800c2c2 <HAL_UART_IRQHandler+0x76a>
    return;
 800c2c0:	bf00      	nop
  }
}
 800c2c2:	37e8      	adds	r7, #232	; 0xe8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	effffffe 	.word	0xeffffffe

0800c2cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c2d4:	bf00      	nop
 800c2d6:	370c      	adds	r7, #12
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr

0800c2e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c2e8:	bf00      	nop
 800c2ea:	370c      	adds	r7, #12
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr

0800c2f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c300:	bf00      	nop
 800c302:	370c      	adds	r7, #12
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c30c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c310:	b092      	sub	sp, #72	; 0x48
 800c312:	af00      	add	r7, sp, #0
 800c314:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c316:	2300      	movs	r3, #0
 800c318:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	689a      	ldr	r2, [r3, #8]
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	691b      	ldr	r3, [r3, #16]
 800c324:	431a      	orrs	r2, r3
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	431a      	orrs	r2, r3
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	69db      	ldr	r3, [r3, #28]
 800c330:	4313      	orrs	r3, r2
 800c332:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	4bbe      	ldr	r3, [pc, #760]	; (800c634 <UART_SetConfig+0x328>)
 800c33c:	4013      	ands	r3, r2
 800c33e:	697a      	ldr	r2, [r7, #20]
 800c340:	6812      	ldr	r2, [r2, #0]
 800c342:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c344:	430b      	orrs	r3, r1
 800c346:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	68da      	ldr	r2, [r3, #12]
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	430a      	orrs	r2, r1
 800c35c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	699b      	ldr	r3, [r3, #24]
 800c362:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4ab3      	ldr	r2, [pc, #716]	; (800c638 <UART_SetConfig+0x32c>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d004      	beq.n	800c378 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	6a1b      	ldr	r3, [r3, #32]
 800c372:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c374:	4313      	orrs	r3, r2
 800c376:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	689a      	ldr	r2, [r3, #8]
 800c37e:	4baf      	ldr	r3, [pc, #700]	; (800c63c <UART_SetConfig+0x330>)
 800c380:	4013      	ands	r3, r2
 800c382:	697a      	ldr	r2, [r7, #20]
 800c384:	6812      	ldr	r2, [r2, #0]
 800c386:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c388:	430b      	orrs	r3, r1
 800c38a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c392:	f023 010f 	bic.w	r1, r3, #15
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	430a      	orrs	r2, r1
 800c3a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4aa6      	ldr	r2, [pc, #664]	; (800c640 <UART_SetConfig+0x334>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d177      	bne.n	800c49c <UART_SetConfig+0x190>
 800c3ac:	4ba5      	ldr	r3, [pc, #660]	; (800c644 <UART_SetConfig+0x338>)
 800c3ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c3b4:	2b28      	cmp	r3, #40	; 0x28
 800c3b6:	d86d      	bhi.n	800c494 <UART_SetConfig+0x188>
 800c3b8:	a201      	add	r2, pc, #4	; (adr r2, 800c3c0 <UART_SetConfig+0xb4>)
 800c3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3be:	bf00      	nop
 800c3c0:	0800c465 	.word	0x0800c465
 800c3c4:	0800c495 	.word	0x0800c495
 800c3c8:	0800c495 	.word	0x0800c495
 800c3cc:	0800c495 	.word	0x0800c495
 800c3d0:	0800c495 	.word	0x0800c495
 800c3d4:	0800c495 	.word	0x0800c495
 800c3d8:	0800c495 	.word	0x0800c495
 800c3dc:	0800c495 	.word	0x0800c495
 800c3e0:	0800c46d 	.word	0x0800c46d
 800c3e4:	0800c495 	.word	0x0800c495
 800c3e8:	0800c495 	.word	0x0800c495
 800c3ec:	0800c495 	.word	0x0800c495
 800c3f0:	0800c495 	.word	0x0800c495
 800c3f4:	0800c495 	.word	0x0800c495
 800c3f8:	0800c495 	.word	0x0800c495
 800c3fc:	0800c495 	.word	0x0800c495
 800c400:	0800c475 	.word	0x0800c475
 800c404:	0800c495 	.word	0x0800c495
 800c408:	0800c495 	.word	0x0800c495
 800c40c:	0800c495 	.word	0x0800c495
 800c410:	0800c495 	.word	0x0800c495
 800c414:	0800c495 	.word	0x0800c495
 800c418:	0800c495 	.word	0x0800c495
 800c41c:	0800c495 	.word	0x0800c495
 800c420:	0800c47d 	.word	0x0800c47d
 800c424:	0800c495 	.word	0x0800c495
 800c428:	0800c495 	.word	0x0800c495
 800c42c:	0800c495 	.word	0x0800c495
 800c430:	0800c495 	.word	0x0800c495
 800c434:	0800c495 	.word	0x0800c495
 800c438:	0800c495 	.word	0x0800c495
 800c43c:	0800c495 	.word	0x0800c495
 800c440:	0800c485 	.word	0x0800c485
 800c444:	0800c495 	.word	0x0800c495
 800c448:	0800c495 	.word	0x0800c495
 800c44c:	0800c495 	.word	0x0800c495
 800c450:	0800c495 	.word	0x0800c495
 800c454:	0800c495 	.word	0x0800c495
 800c458:	0800c495 	.word	0x0800c495
 800c45c:	0800c495 	.word	0x0800c495
 800c460:	0800c48d 	.word	0x0800c48d
 800c464:	2301      	movs	r3, #1
 800c466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c46a:	e222      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c46c:	2304      	movs	r3, #4
 800c46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c472:	e21e      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c474:	2308      	movs	r3, #8
 800c476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c47a:	e21a      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c47c:	2310      	movs	r3, #16
 800c47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c482:	e216      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c484:	2320      	movs	r3, #32
 800c486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c48a:	e212      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c48c:	2340      	movs	r3, #64	; 0x40
 800c48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c492:	e20e      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c494:	2380      	movs	r3, #128	; 0x80
 800c496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c49a:	e20a      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a69      	ldr	r2, [pc, #420]	; (800c648 <UART_SetConfig+0x33c>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d130      	bne.n	800c508 <UART_SetConfig+0x1fc>
 800c4a6:	4b67      	ldr	r3, [pc, #412]	; (800c644 <UART_SetConfig+0x338>)
 800c4a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4aa:	f003 0307 	and.w	r3, r3, #7
 800c4ae:	2b05      	cmp	r3, #5
 800c4b0:	d826      	bhi.n	800c500 <UART_SetConfig+0x1f4>
 800c4b2:	a201      	add	r2, pc, #4	; (adr r2, 800c4b8 <UART_SetConfig+0x1ac>)
 800c4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b8:	0800c4d1 	.word	0x0800c4d1
 800c4bc:	0800c4d9 	.word	0x0800c4d9
 800c4c0:	0800c4e1 	.word	0x0800c4e1
 800c4c4:	0800c4e9 	.word	0x0800c4e9
 800c4c8:	0800c4f1 	.word	0x0800c4f1
 800c4cc:	0800c4f9 	.word	0x0800c4f9
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4d6:	e1ec      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c4d8:	2304      	movs	r3, #4
 800c4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4de:	e1e8      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c4e0:	2308      	movs	r3, #8
 800c4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4e6:	e1e4      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c4e8:	2310      	movs	r3, #16
 800c4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ee:	e1e0      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c4f0:	2320      	movs	r3, #32
 800c4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4f6:	e1dc      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c4f8:	2340      	movs	r3, #64	; 0x40
 800c4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4fe:	e1d8      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c500:	2380      	movs	r3, #128	; 0x80
 800c502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c506:	e1d4      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4a4f      	ldr	r2, [pc, #316]	; (800c64c <UART_SetConfig+0x340>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d130      	bne.n	800c574 <UART_SetConfig+0x268>
 800c512:	4b4c      	ldr	r3, [pc, #304]	; (800c644 <UART_SetConfig+0x338>)
 800c514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c516:	f003 0307 	and.w	r3, r3, #7
 800c51a:	2b05      	cmp	r3, #5
 800c51c:	d826      	bhi.n	800c56c <UART_SetConfig+0x260>
 800c51e:	a201      	add	r2, pc, #4	; (adr r2, 800c524 <UART_SetConfig+0x218>)
 800c520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c524:	0800c53d 	.word	0x0800c53d
 800c528:	0800c545 	.word	0x0800c545
 800c52c:	0800c54d 	.word	0x0800c54d
 800c530:	0800c555 	.word	0x0800c555
 800c534:	0800c55d 	.word	0x0800c55d
 800c538:	0800c565 	.word	0x0800c565
 800c53c:	2300      	movs	r3, #0
 800c53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c542:	e1b6      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c544:	2304      	movs	r3, #4
 800c546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c54a:	e1b2      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c54c:	2308      	movs	r3, #8
 800c54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c552:	e1ae      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c554:	2310      	movs	r3, #16
 800c556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c55a:	e1aa      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c55c:	2320      	movs	r3, #32
 800c55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c562:	e1a6      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c564:	2340      	movs	r3, #64	; 0x40
 800c566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c56a:	e1a2      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c56c:	2380      	movs	r3, #128	; 0x80
 800c56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c572:	e19e      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4a35      	ldr	r2, [pc, #212]	; (800c650 <UART_SetConfig+0x344>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d130      	bne.n	800c5e0 <UART_SetConfig+0x2d4>
 800c57e:	4b31      	ldr	r3, [pc, #196]	; (800c644 <UART_SetConfig+0x338>)
 800c580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c582:	f003 0307 	and.w	r3, r3, #7
 800c586:	2b05      	cmp	r3, #5
 800c588:	d826      	bhi.n	800c5d8 <UART_SetConfig+0x2cc>
 800c58a:	a201      	add	r2, pc, #4	; (adr r2, 800c590 <UART_SetConfig+0x284>)
 800c58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c590:	0800c5a9 	.word	0x0800c5a9
 800c594:	0800c5b1 	.word	0x0800c5b1
 800c598:	0800c5b9 	.word	0x0800c5b9
 800c59c:	0800c5c1 	.word	0x0800c5c1
 800c5a0:	0800c5c9 	.word	0x0800c5c9
 800c5a4:	0800c5d1 	.word	0x0800c5d1
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ae:	e180      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c5b0:	2304      	movs	r3, #4
 800c5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5b6:	e17c      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c5b8:	2308      	movs	r3, #8
 800c5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5be:	e178      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c5c0:	2310      	movs	r3, #16
 800c5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5c6:	e174      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c5c8:	2320      	movs	r3, #32
 800c5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ce:	e170      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c5d0:	2340      	movs	r3, #64	; 0x40
 800c5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5d6:	e16c      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c5d8:	2380      	movs	r3, #128	; 0x80
 800c5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5de:	e168      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4a1b      	ldr	r2, [pc, #108]	; (800c654 <UART_SetConfig+0x348>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d142      	bne.n	800c670 <UART_SetConfig+0x364>
 800c5ea:	4b16      	ldr	r3, [pc, #88]	; (800c644 <UART_SetConfig+0x338>)
 800c5ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5ee:	f003 0307 	and.w	r3, r3, #7
 800c5f2:	2b05      	cmp	r3, #5
 800c5f4:	d838      	bhi.n	800c668 <UART_SetConfig+0x35c>
 800c5f6:	a201      	add	r2, pc, #4	; (adr r2, 800c5fc <UART_SetConfig+0x2f0>)
 800c5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5fc:	0800c615 	.word	0x0800c615
 800c600:	0800c61d 	.word	0x0800c61d
 800c604:	0800c625 	.word	0x0800c625
 800c608:	0800c62d 	.word	0x0800c62d
 800c60c:	0800c659 	.word	0x0800c659
 800c610:	0800c661 	.word	0x0800c661
 800c614:	2300      	movs	r3, #0
 800c616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c61a:	e14a      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c61c:	2304      	movs	r3, #4
 800c61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c622:	e146      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c624:	2308      	movs	r3, #8
 800c626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c62a:	e142      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c62c:	2310      	movs	r3, #16
 800c62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c632:	e13e      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c634:	cfff69f3 	.word	0xcfff69f3
 800c638:	58000c00 	.word	0x58000c00
 800c63c:	11fff4ff 	.word	0x11fff4ff
 800c640:	40011000 	.word	0x40011000
 800c644:	58024400 	.word	0x58024400
 800c648:	40004400 	.word	0x40004400
 800c64c:	40004800 	.word	0x40004800
 800c650:	40004c00 	.word	0x40004c00
 800c654:	40005000 	.word	0x40005000
 800c658:	2320      	movs	r3, #32
 800c65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c65e:	e128      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c660:	2340      	movs	r3, #64	; 0x40
 800c662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c666:	e124      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c668:	2380      	movs	r3, #128	; 0x80
 800c66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c66e:	e120      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4acb      	ldr	r2, [pc, #812]	; (800c9a4 <UART_SetConfig+0x698>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d176      	bne.n	800c768 <UART_SetConfig+0x45c>
 800c67a:	4bcb      	ldr	r3, [pc, #812]	; (800c9a8 <UART_SetConfig+0x69c>)
 800c67c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c67e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c682:	2b28      	cmp	r3, #40	; 0x28
 800c684:	d86c      	bhi.n	800c760 <UART_SetConfig+0x454>
 800c686:	a201      	add	r2, pc, #4	; (adr r2, 800c68c <UART_SetConfig+0x380>)
 800c688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c68c:	0800c731 	.word	0x0800c731
 800c690:	0800c761 	.word	0x0800c761
 800c694:	0800c761 	.word	0x0800c761
 800c698:	0800c761 	.word	0x0800c761
 800c69c:	0800c761 	.word	0x0800c761
 800c6a0:	0800c761 	.word	0x0800c761
 800c6a4:	0800c761 	.word	0x0800c761
 800c6a8:	0800c761 	.word	0x0800c761
 800c6ac:	0800c739 	.word	0x0800c739
 800c6b0:	0800c761 	.word	0x0800c761
 800c6b4:	0800c761 	.word	0x0800c761
 800c6b8:	0800c761 	.word	0x0800c761
 800c6bc:	0800c761 	.word	0x0800c761
 800c6c0:	0800c761 	.word	0x0800c761
 800c6c4:	0800c761 	.word	0x0800c761
 800c6c8:	0800c761 	.word	0x0800c761
 800c6cc:	0800c741 	.word	0x0800c741
 800c6d0:	0800c761 	.word	0x0800c761
 800c6d4:	0800c761 	.word	0x0800c761
 800c6d8:	0800c761 	.word	0x0800c761
 800c6dc:	0800c761 	.word	0x0800c761
 800c6e0:	0800c761 	.word	0x0800c761
 800c6e4:	0800c761 	.word	0x0800c761
 800c6e8:	0800c761 	.word	0x0800c761
 800c6ec:	0800c749 	.word	0x0800c749
 800c6f0:	0800c761 	.word	0x0800c761
 800c6f4:	0800c761 	.word	0x0800c761
 800c6f8:	0800c761 	.word	0x0800c761
 800c6fc:	0800c761 	.word	0x0800c761
 800c700:	0800c761 	.word	0x0800c761
 800c704:	0800c761 	.word	0x0800c761
 800c708:	0800c761 	.word	0x0800c761
 800c70c:	0800c751 	.word	0x0800c751
 800c710:	0800c761 	.word	0x0800c761
 800c714:	0800c761 	.word	0x0800c761
 800c718:	0800c761 	.word	0x0800c761
 800c71c:	0800c761 	.word	0x0800c761
 800c720:	0800c761 	.word	0x0800c761
 800c724:	0800c761 	.word	0x0800c761
 800c728:	0800c761 	.word	0x0800c761
 800c72c:	0800c759 	.word	0x0800c759
 800c730:	2301      	movs	r3, #1
 800c732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c736:	e0bc      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c738:	2304      	movs	r3, #4
 800c73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c73e:	e0b8      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c740:	2308      	movs	r3, #8
 800c742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c746:	e0b4      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c748:	2310      	movs	r3, #16
 800c74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c74e:	e0b0      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c750:	2320      	movs	r3, #32
 800c752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c756:	e0ac      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c758:	2340      	movs	r3, #64	; 0x40
 800c75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c75e:	e0a8      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c760:	2380      	movs	r3, #128	; 0x80
 800c762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c766:	e0a4      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a8f      	ldr	r2, [pc, #572]	; (800c9ac <UART_SetConfig+0x6a0>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d130      	bne.n	800c7d4 <UART_SetConfig+0x4c8>
 800c772:	4b8d      	ldr	r3, [pc, #564]	; (800c9a8 <UART_SetConfig+0x69c>)
 800c774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c776:	f003 0307 	and.w	r3, r3, #7
 800c77a:	2b05      	cmp	r3, #5
 800c77c:	d826      	bhi.n	800c7cc <UART_SetConfig+0x4c0>
 800c77e:	a201      	add	r2, pc, #4	; (adr r2, 800c784 <UART_SetConfig+0x478>)
 800c780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c784:	0800c79d 	.word	0x0800c79d
 800c788:	0800c7a5 	.word	0x0800c7a5
 800c78c:	0800c7ad 	.word	0x0800c7ad
 800c790:	0800c7b5 	.word	0x0800c7b5
 800c794:	0800c7bd 	.word	0x0800c7bd
 800c798:	0800c7c5 	.word	0x0800c7c5
 800c79c:	2300      	movs	r3, #0
 800c79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7a2:	e086      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c7a4:	2304      	movs	r3, #4
 800c7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7aa:	e082      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c7ac:	2308      	movs	r3, #8
 800c7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7b2:	e07e      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c7b4:	2310      	movs	r3, #16
 800c7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ba:	e07a      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c7bc:	2320      	movs	r3, #32
 800c7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7c2:	e076      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c7c4:	2340      	movs	r3, #64	; 0x40
 800c7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ca:	e072      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c7cc:	2380      	movs	r3, #128	; 0x80
 800c7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7d2:	e06e      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4a75      	ldr	r2, [pc, #468]	; (800c9b0 <UART_SetConfig+0x6a4>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d130      	bne.n	800c840 <UART_SetConfig+0x534>
 800c7de:	4b72      	ldr	r3, [pc, #456]	; (800c9a8 <UART_SetConfig+0x69c>)
 800c7e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7e2:	f003 0307 	and.w	r3, r3, #7
 800c7e6:	2b05      	cmp	r3, #5
 800c7e8:	d826      	bhi.n	800c838 <UART_SetConfig+0x52c>
 800c7ea:	a201      	add	r2, pc, #4	; (adr r2, 800c7f0 <UART_SetConfig+0x4e4>)
 800c7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7f0:	0800c809 	.word	0x0800c809
 800c7f4:	0800c811 	.word	0x0800c811
 800c7f8:	0800c819 	.word	0x0800c819
 800c7fc:	0800c821 	.word	0x0800c821
 800c800:	0800c829 	.word	0x0800c829
 800c804:	0800c831 	.word	0x0800c831
 800c808:	2300      	movs	r3, #0
 800c80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c80e:	e050      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c810:	2304      	movs	r3, #4
 800c812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c816:	e04c      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c818:	2308      	movs	r3, #8
 800c81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c81e:	e048      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c820:	2310      	movs	r3, #16
 800c822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c826:	e044      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c828:	2320      	movs	r3, #32
 800c82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c82e:	e040      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c830:	2340      	movs	r3, #64	; 0x40
 800c832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c836:	e03c      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c838:	2380      	movs	r3, #128	; 0x80
 800c83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c83e:	e038      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a5b      	ldr	r2, [pc, #364]	; (800c9b4 <UART_SetConfig+0x6a8>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d130      	bne.n	800c8ac <UART_SetConfig+0x5a0>
 800c84a:	4b57      	ldr	r3, [pc, #348]	; (800c9a8 <UART_SetConfig+0x69c>)
 800c84c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c84e:	f003 0307 	and.w	r3, r3, #7
 800c852:	2b05      	cmp	r3, #5
 800c854:	d826      	bhi.n	800c8a4 <UART_SetConfig+0x598>
 800c856:	a201      	add	r2, pc, #4	; (adr r2, 800c85c <UART_SetConfig+0x550>)
 800c858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c85c:	0800c875 	.word	0x0800c875
 800c860:	0800c87d 	.word	0x0800c87d
 800c864:	0800c885 	.word	0x0800c885
 800c868:	0800c88d 	.word	0x0800c88d
 800c86c:	0800c895 	.word	0x0800c895
 800c870:	0800c89d 	.word	0x0800c89d
 800c874:	2302      	movs	r3, #2
 800c876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c87a:	e01a      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c87c:	2304      	movs	r3, #4
 800c87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c882:	e016      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c884:	2308      	movs	r3, #8
 800c886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c88a:	e012      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c88c:	2310      	movs	r3, #16
 800c88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c892:	e00e      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c894:	2320      	movs	r3, #32
 800c896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c89a:	e00a      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c89c:	2340      	movs	r3, #64	; 0x40
 800c89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8a2:	e006      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c8a4:	2380      	movs	r3, #128	; 0x80
 800c8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8aa:	e002      	b.n	800c8b2 <UART_SetConfig+0x5a6>
 800c8ac:	2380      	movs	r3, #128	; 0x80
 800c8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4a3f      	ldr	r2, [pc, #252]	; (800c9b4 <UART_SetConfig+0x6a8>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	f040 80f8 	bne.w	800caae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c8be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c8c2:	2b20      	cmp	r3, #32
 800c8c4:	dc46      	bgt.n	800c954 <UART_SetConfig+0x648>
 800c8c6:	2b02      	cmp	r3, #2
 800c8c8:	f2c0 8082 	blt.w	800c9d0 <UART_SetConfig+0x6c4>
 800c8cc:	3b02      	subs	r3, #2
 800c8ce:	2b1e      	cmp	r3, #30
 800c8d0:	d87e      	bhi.n	800c9d0 <UART_SetConfig+0x6c4>
 800c8d2:	a201      	add	r2, pc, #4	; (adr r2, 800c8d8 <UART_SetConfig+0x5cc>)
 800c8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8d8:	0800c95b 	.word	0x0800c95b
 800c8dc:	0800c9d1 	.word	0x0800c9d1
 800c8e0:	0800c963 	.word	0x0800c963
 800c8e4:	0800c9d1 	.word	0x0800c9d1
 800c8e8:	0800c9d1 	.word	0x0800c9d1
 800c8ec:	0800c9d1 	.word	0x0800c9d1
 800c8f0:	0800c973 	.word	0x0800c973
 800c8f4:	0800c9d1 	.word	0x0800c9d1
 800c8f8:	0800c9d1 	.word	0x0800c9d1
 800c8fc:	0800c9d1 	.word	0x0800c9d1
 800c900:	0800c9d1 	.word	0x0800c9d1
 800c904:	0800c9d1 	.word	0x0800c9d1
 800c908:	0800c9d1 	.word	0x0800c9d1
 800c90c:	0800c9d1 	.word	0x0800c9d1
 800c910:	0800c983 	.word	0x0800c983
 800c914:	0800c9d1 	.word	0x0800c9d1
 800c918:	0800c9d1 	.word	0x0800c9d1
 800c91c:	0800c9d1 	.word	0x0800c9d1
 800c920:	0800c9d1 	.word	0x0800c9d1
 800c924:	0800c9d1 	.word	0x0800c9d1
 800c928:	0800c9d1 	.word	0x0800c9d1
 800c92c:	0800c9d1 	.word	0x0800c9d1
 800c930:	0800c9d1 	.word	0x0800c9d1
 800c934:	0800c9d1 	.word	0x0800c9d1
 800c938:	0800c9d1 	.word	0x0800c9d1
 800c93c:	0800c9d1 	.word	0x0800c9d1
 800c940:	0800c9d1 	.word	0x0800c9d1
 800c944:	0800c9d1 	.word	0x0800c9d1
 800c948:	0800c9d1 	.word	0x0800c9d1
 800c94c:	0800c9d1 	.word	0x0800c9d1
 800c950:	0800c9c3 	.word	0x0800c9c3
 800c954:	2b40      	cmp	r3, #64	; 0x40
 800c956:	d037      	beq.n	800c9c8 <UART_SetConfig+0x6bc>
 800c958:	e03a      	b.n	800c9d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c95a:	f7fc ff59 	bl	8009810 <HAL_RCCEx_GetD3PCLK1Freq>
 800c95e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c960:	e03c      	b.n	800c9dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c966:	4618      	mov	r0, r3
 800c968:	f7fc ff68 	bl	800983c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c970:	e034      	b.n	800c9dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c972:	f107 0318 	add.w	r3, r7, #24
 800c976:	4618      	mov	r0, r3
 800c978:	f7fd f8b4 	bl	8009ae4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c980:	e02c      	b.n	800c9dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c982:	4b09      	ldr	r3, [pc, #36]	; (800c9a8 <UART_SetConfig+0x69c>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f003 0320 	and.w	r3, r3, #32
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d016      	beq.n	800c9bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c98e:	4b06      	ldr	r3, [pc, #24]	; (800c9a8 <UART_SetConfig+0x69c>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	08db      	lsrs	r3, r3, #3
 800c994:	f003 0303 	and.w	r3, r3, #3
 800c998:	4a07      	ldr	r2, [pc, #28]	; (800c9b8 <UART_SetConfig+0x6ac>)
 800c99a:	fa22 f303 	lsr.w	r3, r2, r3
 800c99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c9a0:	e01c      	b.n	800c9dc <UART_SetConfig+0x6d0>
 800c9a2:	bf00      	nop
 800c9a4:	40011400 	.word	0x40011400
 800c9a8:	58024400 	.word	0x58024400
 800c9ac:	40007800 	.word	0x40007800
 800c9b0:	40007c00 	.word	0x40007c00
 800c9b4:	58000c00 	.word	0x58000c00
 800c9b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c9bc:	4b9d      	ldr	r3, [pc, #628]	; (800cc34 <UART_SetConfig+0x928>)
 800c9be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9c0:	e00c      	b.n	800c9dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9c2:	4b9d      	ldr	r3, [pc, #628]	; (800cc38 <UART_SetConfig+0x92c>)
 800c9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9c6:	e009      	b.n	800c9dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9ce:	e005      	b.n	800c9dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c9da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c9dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	f000 81de 	beq.w	800cda0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9e8:	4a94      	ldr	r2, [pc, #592]	; (800cc3c <UART_SetConfig+0x930>)
 800c9ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	685a      	ldr	r2, [r3, #4]
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	005b      	lsls	r3, r3, #1
 800ca00:	4413      	add	r3, r2
 800ca02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d305      	bcc.n	800ca14 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d903      	bls.n	800ca1c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ca14:	2301      	movs	r3, #1
 800ca16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ca1a:	e1c1      	b.n	800cda0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca1e:	2200      	movs	r2, #0
 800ca20:	60bb      	str	r3, [r7, #8]
 800ca22:	60fa      	str	r2, [r7, #12]
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca28:	4a84      	ldr	r2, [pc, #528]	; (800cc3c <UART_SetConfig+0x930>)
 800ca2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	2200      	movs	r2, #0
 800ca32:	603b      	str	r3, [r7, #0]
 800ca34:	607a      	str	r2, [r7, #4]
 800ca36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca3e:	f7f3 fca7 	bl	8000390 <__aeabi_uldivmod>
 800ca42:	4602      	mov	r2, r0
 800ca44:	460b      	mov	r3, r1
 800ca46:	4610      	mov	r0, r2
 800ca48:	4619      	mov	r1, r3
 800ca4a:	f04f 0200 	mov.w	r2, #0
 800ca4e:	f04f 0300 	mov.w	r3, #0
 800ca52:	020b      	lsls	r3, r1, #8
 800ca54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca58:	0202      	lsls	r2, r0, #8
 800ca5a:	6979      	ldr	r1, [r7, #20]
 800ca5c:	6849      	ldr	r1, [r1, #4]
 800ca5e:	0849      	lsrs	r1, r1, #1
 800ca60:	2000      	movs	r0, #0
 800ca62:	460c      	mov	r4, r1
 800ca64:	4605      	mov	r5, r0
 800ca66:	eb12 0804 	adds.w	r8, r2, r4
 800ca6a:	eb43 0905 	adc.w	r9, r3, r5
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	2200      	movs	r2, #0
 800ca74:	469a      	mov	sl, r3
 800ca76:	4693      	mov	fp, r2
 800ca78:	4652      	mov	r2, sl
 800ca7a:	465b      	mov	r3, fp
 800ca7c:	4640      	mov	r0, r8
 800ca7e:	4649      	mov	r1, r9
 800ca80:	f7f3 fc86 	bl	8000390 <__aeabi_uldivmod>
 800ca84:	4602      	mov	r2, r0
 800ca86:	460b      	mov	r3, r1
 800ca88:	4613      	mov	r3, r2
 800ca8a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca92:	d308      	bcc.n	800caa6 <UART_SetConfig+0x79a>
 800ca94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca9a:	d204      	bcs.n	800caa6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caa2:	60da      	str	r2, [r3, #12]
 800caa4:	e17c      	b.n	800cda0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800caa6:	2301      	movs	r3, #1
 800caa8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800caac:	e178      	b.n	800cda0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	69db      	ldr	r3, [r3, #28]
 800cab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cab6:	f040 80c5 	bne.w	800cc44 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800caba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cabe:	2b20      	cmp	r3, #32
 800cac0:	dc48      	bgt.n	800cb54 <UART_SetConfig+0x848>
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	db7b      	blt.n	800cbbe <UART_SetConfig+0x8b2>
 800cac6:	2b20      	cmp	r3, #32
 800cac8:	d879      	bhi.n	800cbbe <UART_SetConfig+0x8b2>
 800caca:	a201      	add	r2, pc, #4	; (adr r2, 800cad0 <UART_SetConfig+0x7c4>)
 800cacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad0:	0800cb5b 	.word	0x0800cb5b
 800cad4:	0800cb63 	.word	0x0800cb63
 800cad8:	0800cbbf 	.word	0x0800cbbf
 800cadc:	0800cbbf 	.word	0x0800cbbf
 800cae0:	0800cb6b 	.word	0x0800cb6b
 800cae4:	0800cbbf 	.word	0x0800cbbf
 800cae8:	0800cbbf 	.word	0x0800cbbf
 800caec:	0800cbbf 	.word	0x0800cbbf
 800caf0:	0800cb7b 	.word	0x0800cb7b
 800caf4:	0800cbbf 	.word	0x0800cbbf
 800caf8:	0800cbbf 	.word	0x0800cbbf
 800cafc:	0800cbbf 	.word	0x0800cbbf
 800cb00:	0800cbbf 	.word	0x0800cbbf
 800cb04:	0800cbbf 	.word	0x0800cbbf
 800cb08:	0800cbbf 	.word	0x0800cbbf
 800cb0c:	0800cbbf 	.word	0x0800cbbf
 800cb10:	0800cb8b 	.word	0x0800cb8b
 800cb14:	0800cbbf 	.word	0x0800cbbf
 800cb18:	0800cbbf 	.word	0x0800cbbf
 800cb1c:	0800cbbf 	.word	0x0800cbbf
 800cb20:	0800cbbf 	.word	0x0800cbbf
 800cb24:	0800cbbf 	.word	0x0800cbbf
 800cb28:	0800cbbf 	.word	0x0800cbbf
 800cb2c:	0800cbbf 	.word	0x0800cbbf
 800cb30:	0800cbbf 	.word	0x0800cbbf
 800cb34:	0800cbbf 	.word	0x0800cbbf
 800cb38:	0800cbbf 	.word	0x0800cbbf
 800cb3c:	0800cbbf 	.word	0x0800cbbf
 800cb40:	0800cbbf 	.word	0x0800cbbf
 800cb44:	0800cbbf 	.word	0x0800cbbf
 800cb48:	0800cbbf 	.word	0x0800cbbf
 800cb4c:	0800cbbf 	.word	0x0800cbbf
 800cb50:	0800cbb1 	.word	0x0800cbb1
 800cb54:	2b40      	cmp	r3, #64	; 0x40
 800cb56:	d02e      	beq.n	800cbb6 <UART_SetConfig+0x8aa>
 800cb58:	e031      	b.n	800cbbe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb5a:	f7fa fea3 	bl	80078a4 <HAL_RCC_GetPCLK1Freq>
 800cb5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb60:	e033      	b.n	800cbca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb62:	f7fa feb5 	bl	80078d0 <HAL_RCC_GetPCLK2Freq>
 800cb66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb68:	e02f      	b.n	800cbca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7fc fe64 	bl	800983c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb78:	e027      	b.n	800cbca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb7a:	f107 0318 	add.w	r3, r7, #24
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7fc ffb0 	bl	8009ae4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb84:	69fb      	ldr	r3, [r7, #28]
 800cb86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb88:	e01f      	b.n	800cbca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb8a:	4b2d      	ldr	r3, [pc, #180]	; (800cc40 <UART_SetConfig+0x934>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f003 0320 	and.w	r3, r3, #32
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d009      	beq.n	800cbaa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb96:	4b2a      	ldr	r3, [pc, #168]	; (800cc40 <UART_SetConfig+0x934>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	08db      	lsrs	r3, r3, #3
 800cb9c:	f003 0303 	and.w	r3, r3, #3
 800cba0:	4a24      	ldr	r2, [pc, #144]	; (800cc34 <UART_SetConfig+0x928>)
 800cba2:	fa22 f303 	lsr.w	r3, r2, r3
 800cba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cba8:	e00f      	b.n	800cbca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cbaa:	4b22      	ldr	r3, [pc, #136]	; (800cc34 <UART_SetConfig+0x928>)
 800cbac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbae:	e00c      	b.n	800cbca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cbb0:	4b21      	ldr	r3, [pc, #132]	; (800cc38 <UART_SetConfig+0x92c>)
 800cbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbb4:	e009      	b.n	800cbca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbbc:	e005      	b.n	800cbca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cbc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cbca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	f000 80e7 	beq.w	800cda0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd6:	4a19      	ldr	r2, [pc, #100]	; (800cc3c <UART_SetConfig+0x930>)
 800cbd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbdc:	461a      	mov	r2, r3
 800cbde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbe0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbe4:	005a      	lsls	r2, r3, #1
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	085b      	lsrs	r3, r3, #1
 800cbec:	441a      	add	r2, r3
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbf6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfa:	2b0f      	cmp	r3, #15
 800cbfc:	d916      	bls.n	800cc2c <UART_SetConfig+0x920>
 800cbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc04:	d212      	bcs.n	800cc2c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	f023 030f 	bic.w	r3, r3, #15
 800cc0e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc12:	085b      	lsrs	r3, r3, #1
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	f003 0307 	and.w	r3, r3, #7
 800cc1a:	b29a      	uxth	r2, r3
 800cc1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cc1e:	4313      	orrs	r3, r2
 800cc20:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cc28:	60da      	str	r2, [r3, #12]
 800cc2a:	e0b9      	b.n	800cda0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cc32:	e0b5      	b.n	800cda0 <UART_SetConfig+0xa94>
 800cc34:	03d09000 	.word	0x03d09000
 800cc38:	003d0900 	.word	0x003d0900
 800cc3c:	0800f394 	.word	0x0800f394
 800cc40:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800cc44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cc48:	2b20      	cmp	r3, #32
 800cc4a:	dc49      	bgt.n	800cce0 <UART_SetConfig+0x9d4>
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	db7c      	blt.n	800cd4a <UART_SetConfig+0xa3e>
 800cc50:	2b20      	cmp	r3, #32
 800cc52:	d87a      	bhi.n	800cd4a <UART_SetConfig+0xa3e>
 800cc54:	a201      	add	r2, pc, #4	; (adr r2, 800cc5c <UART_SetConfig+0x950>)
 800cc56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc5a:	bf00      	nop
 800cc5c:	0800cce7 	.word	0x0800cce7
 800cc60:	0800ccef 	.word	0x0800ccef
 800cc64:	0800cd4b 	.word	0x0800cd4b
 800cc68:	0800cd4b 	.word	0x0800cd4b
 800cc6c:	0800ccf7 	.word	0x0800ccf7
 800cc70:	0800cd4b 	.word	0x0800cd4b
 800cc74:	0800cd4b 	.word	0x0800cd4b
 800cc78:	0800cd4b 	.word	0x0800cd4b
 800cc7c:	0800cd07 	.word	0x0800cd07
 800cc80:	0800cd4b 	.word	0x0800cd4b
 800cc84:	0800cd4b 	.word	0x0800cd4b
 800cc88:	0800cd4b 	.word	0x0800cd4b
 800cc8c:	0800cd4b 	.word	0x0800cd4b
 800cc90:	0800cd4b 	.word	0x0800cd4b
 800cc94:	0800cd4b 	.word	0x0800cd4b
 800cc98:	0800cd4b 	.word	0x0800cd4b
 800cc9c:	0800cd17 	.word	0x0800cd17
 800cca0:	0800cd4b 	.word	0x0800cd4b
 800cca4:	0800cd4b 	.word	0x0800cd4b
 800cca8:	0800cd4b 	.word	0x0800cd4b
 800ccac:	0800cd4b 	.word	0x0800cd4b
 800ccb0:	0800cd4b 	.word	0x0800cd4b
 800ccb4:	0800cd4b 	.word	0x0800cd4b
 800ccb8:	0800cd4b 	.word	0x0800cd4b
 800ccbc:	0800cd4b 	.word	0x0800cd4b
 800ccc0:	0800cd4b 	.word	0x0800cd4b
 800ccc4:	0800cd4b 	.word	0x0800cd4b
 800ccc8:	0800cd4b 	.word	0x0800cd4b
 800cccc:	0800cd4b 	.word	0x0800cd4b
 800ccd0:	0800cd4b 	.word	0x0800cd4b
 800ccd4:	0800cd4b 	.word	0x0800cd4b
 800ccd8:	0800cd4b 	.word	0x0800cd4b
 800ccdc:	0800cd3d 	.word	0x0800cd3d
 800cce0:	2b40      	cmp	r3, #64	; 0x40
 800cce2:	d02e      	beq.n	800cd42 <UART_SetConfig+0xa36>
 800cce4:	e031      	b.n	800cd4a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cce6:	f7fa fddd 	bl	80078a4 <HAL_RCC_GetPCLK1Freq>
 800ccea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ccec:	e033      	b.n	800cd56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ccee:	f7fa fdef 	bl	80078d0 <HAL_RCC_GetPCLK2Freq>
 800ccf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ccf4:	e02f      	b.n	800cd56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7fc fd9e 	bl	800983c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd04:	e027      	b.n	800cd56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd06:	f107 0318 	add.w	r3, r7, #24
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7fc feea 	bl	8009ae4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd10:	69fb      	ldr	r3, [r7, #28]
 800cd12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd14:	e01f      	b.n	800cd56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd16:	4b2d      	ldr	r3, [pc, #180]	; (800cdcc <UART_SetConfig+0xac0>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f003 0320 	and.w	r3, r3, #32
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d009      	beq.n	800cd36 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd22:	4b2a      	ldr	r3, [pc, #168]	; (800cdcc <UART_SetConfig+0xac0>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	08db      	lsrs	r3, r3, #3
 800cd28:	f003 0303 	and.w	r3, r3, #3
 800cd2c:	4a28      	ldr	r2, [pc, #160]	; (800cdd0 <UART_SetConfig+0xac4>)
 800cd2e:	fa22 f303 	lsr.w	r3, r2, r3
 800cd32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd34:	e00f      	b.n	800cd56 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800cd36:	4b26      	ldr	r3, [pc, #152]	; (800cdd0 <UART_SetConfig+0xac4>)
 800cd38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd3a:	e00c      	b.n	800cd56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd3c:	4b25      	ldr	r3, [pc, #148]	; (800cdd4 <UART_SetConfig+0xac8>)
 800cd3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd40:	e009      	b.n	800cd56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd48:	e005      	b.n	800cd56 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cd4e:	2301      	movs	r3, #1
 800cd50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cd54:	bf00      	nop
    }

    if (pclk != 0U)
 800cd56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d021      	beq.n	800cda0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd60:	4a1d      	ldr	r2, [pc, #116]	; (800cdd8 <UART_SetConfig+0xacc>)
 800cd62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd66:	461a      	mov	r2, r3
 800cd68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd6a:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	085b      	lsrs	r3, r3, #1
 800cd74:	441a      	add	r2, r3
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd7e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd82:	2b0f      	cmp	r3, #15
 800cd84:	d909      	bls.n	800cd9a <UART_SetConfig+0xa8e>
 800cd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd8c:	d205      	bcs.n	800cd9a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cd8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd90:	b29a      	uxth	r2, r3
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	60da      	str	r2, [r3, #12]
 800cd98:	e002      	b.n	800cda0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	2201      	movs	r2, #1
 800cda4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800cdbc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3748      	adds	r7, #72	; 0x48
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cdca:	bf00      	nop
 800cdcc:	58024400 	.word	0x58024400
 800cdd0:	03d09000 	.word	0x03d09000
 800cdd4:	003d0900 	.word	0x003d0900
 800cdd8:	0800f394 	.word	0x0800f394

0800cddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b083      	sub	sp, #12
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cde8:	f003 0301 	and.w	r3, r3, #1
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d00a      	beq.n	800ce06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	430a      	orrs	r2, r1
 800ce04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce0a:	f003 0302 	and.w	r3, r3, #2
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00a      	beq.n	800ce28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	430a      	orrs	r2, r1
 800ce26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce2c:	f003 0304 	and.w	r3, r3, #4
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d00a      	beq.n	800ce4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	430a      	orrs	r2, r1
 800ce48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce4e:	f003 0308 	and.w	r3, r3, #8
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d00a      	beq.n	800ce6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	430a      	orrs	r2, r1
 800ce6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce70:	f003 0310 	and.w	r3, r3, #16
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00a      	beq.n	800ce8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	689b      	ldr	r3, [r3, #8]
 800ce7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	430a      	orrs	r2, r1
 800ce8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce92:	f003 0320 	and.w	r3, r3, #32
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d00a      	beq.n	800ceb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	689b      	ldr	r3, [r3, #8]
 800cea0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	430a      	orrs	r2, r1
 800ceae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d01a      	beq.n	800cef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	685b      	ldr	r3, [r3, #4]
 800cec2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	430a      	orrs	r2, r1
 800ced0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ced6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ceda:	d10a      	bne.n	800cef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	430a      	orrs	r2, r1
 800cef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d00a      	beq.n	800cf14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	430a      	orrs	r2, r1
 800cf12:	605a      	str	r2, [r3, #4]
  }
}
 800cf14:	bf00      	nop
 800cf16:	370c      	adds	r7, #12
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b098      	sub	sp, #96	; 0x60
 800cf24:	af02      	add	r7, sp, #8
 800cf26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf30:	f7f6 f80a 	bl	8002f48 <HAL_GetTick>
 800cf34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f003 0308 	and.w	r3, r3, #8
 800cf40:	2b08      	cmp	r3, #8
 800cf42:	d12f      	bne.n	800cfa4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf48:	9300      	str	r3, [sp, #0]
 800cf4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 f88e 	bl	800d074 <UART_WaitOnFlagUntilTimeout>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d022      	beq.n	800cfa4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf66:	e853 3f00 	ldrex	r3, [r3]
 800cf6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cf6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf72:	653b      	str	r3, [r7, #80]	; 0x50
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	461a      	mov	r2, r3
 800cf7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf7c:	647b      	str	r3, [r7, #68]	; 0x44
 800cf7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cf82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf84:	e841 2300 	strex	r3, r2, [r1]
 800cf88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cf8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d1e6      	bne.n	800cf5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2220      	movs	r2, #32
 800cf94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfa0:	2303      	movs	r3, #3
 800cfa2:	e063      	b.n	800d06c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f003 0304 	and.w	r3, r3, #4
 800cfae:	2b04      	cmp	r3, #4
 800cfb0:	d149      	bne.n	800d046 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cfb6:	9300      	str	r3, [sp, #0]
 800cfb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f000 f857 	bl	800d074 <UART_WaitOnFlagUntilTimeout>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d03c      	beq.n	800d046 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd4:	e853 3f00 	ldrex	r3, [r3]
 800cfd8:	623b      	str	r3, [r7, #32]
   return(result);
 800cfda:	6a3b      	ldr	r3, [r7, #32]
 800cfdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cfe0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfea:	633b      	str	r3, [r7, #48]	; 0x30
 800cfec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cff2:	e841 2300 	strex	r3, r2, [r1]
 800cff6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1e6      	bne.n	800cfcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	3308      	adds	r3, #8
 800d004:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	e853 3f00 	ldrex	r3, [r3]
 800d00c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f023 0301 	bic.w	r3, r3, #1
 800d014:	64bb      	str	r3, [r7, #72]	; 0x48
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	3308      	adds	r3, #8
 800d01c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d01e:	61fa      	str	r2, [r7, #28]
 800d020:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d022:	69b9      	ldr	r1, [r7, #24]
 800d024:	69fa      	ldr	r2, [r7, #28]
 800d026:	e841 2300 	strex	r3, r2, [r1]
 800d02a:	617b      	str	r3, [r7, #20]
   return(result);
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d1e5      	bne.n	800cffe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2220      	movs	r2, #32
 800d036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d042:	2303      	movs	r3, #3
 800d044:	e012      	b.n	800d06c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2220      	movs	r2, #32
 800d04a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2220      	movs	r2, #32
 800d052:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2200      	movs	r2, #0
 800d05a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2200      	movs	r2, #0
 800d066:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d06a:	2300      	movs	r3, #0
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3758      	adds	r7, #88	; 0x58
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b084      	sub	sp, #16
 800d078:	af00      	add	r7, sp, #0
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	603b      	str	r3, [r7, #0]
 800d080:	4613      	mov	r3, r2
 800d082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d084:	e049      	b.n	800d11a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d086:	69bb      	ldr	r3, [r7, #24]
 800d088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d08c:	d045      	beq.n	800d11a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d08e:	f7f5 ff5b 	bl	8002f48 <HAL_GetTick>
 800d092:	4602      	mov	r2, r0
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	1ad3      	subs	r3, r2, r3
 800d098:	69ba      	ldr	r2, [r7, #24]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d302      	bcc.n	800d0a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d101      	bne.n	800d0a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d0a4:	2303      	movs	r3, #3
 800d0a6:	e048      	b.n	800d13a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f003 0304 	and.w	r3, r3, #4
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d031      	beq.n	800d11a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	69db      	ldr	r3, [r3, #28]
 800d0bc:	f003 0308 	and.w	r3, r3, #8
 800d0c0:	2b08      	cmp	r3, #8
 800d0c2:	d110      	bne.n	800d0e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2208      	movs	r2, #8
 800d0ca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d0cc:	68f8      	ldr	r0, [r7, #12]
 800d0ce:	f000 f95b 	bl	800d388 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2208      	movs	r2, #8
 800d0d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e029      	b.n	800d13a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	69db      	ldr	r3, [r3, #28]
 800d0ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d0f4:	d111      	bne.n	800d11a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d0fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f000 f941 	bl	800d388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2220      	movs	r2, #32
 800d10a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2200      	movs	r2, #0
 800d112:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d116:	2303      	movs	r3, #3
 800d118:	e00f      	b.n	800d13a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	69da      	ldr	r2, [r3, #28]
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	4013      	ands	r3, r2
 800d124:	68ba      	ldr	r2, [r7, #8]
 800d126:	429a      	cmp	r2, r3
 800d128:	bf0c      	ite	eq
 800d12a:	2301      	moveq	r3, #1
 800d12c:	2300      	movne	r3, #0
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	461a      	mov	r2, r3
 800d132:	79fb      	ldrb	r3, [r7, #7]
 800d134:	429a      	cmp	r2, r3
 800d136:	d0a6      	beq.n	800d086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d138:	2300      	movs	r3, #0
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3710      	adds	r7, #16
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
	...

0800d144 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d144:	b480      	push	{r7}
 800d146:	b0a3      	sub	sp, #140	; 0x8c
 800d148:	af00      	add	r7, sp, #0
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	60b9      	str	r1, [r7, #8]
 800d14e:	4613      	mov	r3, r2
 800d150:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	68ba      	ldr	r2, [r7, #8]
 800d156:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	88fa      	ldrh	r2, [r7, #6]
 800d15c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	88fa      	ldrh	r2, [r7, #6]
 800d164:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2200      	movs	r2, #0
 800d16c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	689b      	ldr	r3, [r3, #8]
 800d172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d176:	d10e      	bne.n	800d196 <UART_Start_Receive_IT+0x52>
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	691b      	ldr	r3, [r3, #16]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d105      	bne.n	800d18c <UART_Start_Receive_IT+0x48>
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d186:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d18a:	e02d      	b.n	800d1e8 <UART_Start_Receive_IT+0xa4>
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	22ff      	movs	r2, #255	; 0xff
 800d190:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d194:	e028      	b.n	800d1e8 <UART_Start_Receive_IT+0xa4>
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	689b      	ldr	r3, [r3, #8]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d10d      	bne.n	800d1ba <UART_Start_Receive_IT+0x76>
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	691b      	ldr	r3, [r3, #16]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d104      	bne.n	800d1b0 <UART_Start_Receive_IT+0x6c>
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	22ff      	movs	r2, #255	; 0xff
 800d1aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d1ae:	e01b      	b.n	800d1e8 <UART_Start_Receive_IT+0xa4>
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	227f      	movs	r2, #127	; 0x7f
 800d1b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d1b8:	e016      	b.n	800d1e8 <UART_Start_Receive_IT+0xa4>
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	689b      	ldr	r3, [r3, #8]
 800d1be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d1c2:	d10d      	bne.n	800d1e0 <UART_Start_Receive_IT+0x9c>
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	691b      	ldr	r3, [r3, #16]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d104      	bne.n	800d1d6 <UART_Start_Receive_IT+0x92>
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	227f      	movs	r2, #127	; 0x7f
 800d1d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d1d4:	e008      	b.n	800d1e8 <UART_Start_Receive_IT+0xa4>
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	223f      	movs	r2, #63	; 0x3f
 800d1da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d1de:	e003      	b.n	800d1e8 <UART_Start_Receive_IT+0xa4>
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2222      	movs	r2, #34	; 0x22
 800d1f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	3308      	adds	r3, #8
 800d1fe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d202:	e853 3f00 	ldrex	r3, [r3]
 800d206:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d208:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d20a:	f043 0301 	orr.w	r3, r3, #1
 800d20e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	3308      	adds	r3, #8
 800d218:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d21c:	673a      	str	r2, [r7, #112]	; 0x70
 800d21e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d220:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d222:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d224:	e841 2300 	strex	r3, r2, [r1]
 800d228:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800d22a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d1e3      	bne.n	800d1f8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d238:	d14f      	bne.n	800d2da <UART_Start_Receive_IT+0x196>
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d240:	88fa      	ldrh	r2, [r7, #6]
 800d242:	429a      	cmp	r2, r3
 800d244:	d349      	bcc.n	800d2da <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	689b      	ldr	r3, [r3, #8]
 800d24a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d24e:	d107      	bne.n	800d260 <UART_Start_Receive_IT+0x11c>
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	691b      	ldr	r3, [r3, #16]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d103      	bne.n	800d260 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	4a47      	ldr	r2, [pc, #284]	; (800d378 <UART_Start_Receive_IT+0x234>)
 800d25c:	675a      	str	r2, [r3, #116]	; 0x74
 800d25e:	e002      	b.n	800d266 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	4a46      	ldr	r2, [pc, #280]	; (800d37c <UART_Start_Receive_IT+0x238>)
 800d264:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	691b      	ldr	r3, [r3, #16]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d01a      	beq.n	800d2a4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d276:	e853 3f00 	ldrex	r3, [r3]
 800d27a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d27e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d282:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	461a      	mov	r2, r3
 800d28c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d290:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d292:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d294:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d296:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d298:	e841 2300 	strex	r3, r2, [r1]
 800d29c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d29e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d1e4      	bne.n	800d26e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	3308      	adds	r3, #8
 800d2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ae:	e853 3f00 	ldrex	r3, [r3]
 800d2b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	3308      	adds	r3, #8
 800d2c2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d2c4:	64ba      	str	r2, [r7, #72]	; 0x48
 800d2c6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d2ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d2cc:	e841 2300 	strex	r3, r2, [r1]
 800d2d0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d2d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d1e5      	bne.n	800d2a4 <UART_Start_Receive_IT+0x160>
 800d2d8:	e046      	b.n	800d368 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	689b      	ldr	r3, [r3, #8]
 800d2de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2e2:	d107      	bne.n	800d2f4 <UART_Start_Receive_IT+0x1b0>
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	691b      	ldr	r3, [r3, #16]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d103      	bne.n	800d2f4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	4a24      	ldr	r2, [pc, #144]	; (800d380 <UART_Start_Receive_IT+0x23c>)
 800d2f0:	675a      	str	r2, [r3, #116]	; 0x74
 800d2f2:	e002      	b.n	800d2fa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	4a23      	ldr	r2, [pc, #140]	; (800d384 <UART_Start_Receive_IT+0x240>)
 800d2f8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	691b      	ldr	r3, [r3, #16]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d019      	beq.n	800d336 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30a:	e853 3f00 	ldrex	r3, [r3]
 800d30e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d312:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d316:	677b      	str	r3, [r7, #116]	; 0x74
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	461a      	mov	r2, r3
 800d31e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d320:	637b      	str	r3, [r7, #52]	; 0x34
 800d322:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d324:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d328:	e841 2300 	strex	r3, r2, [r1]
 800d32c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d330:	2b00      	cmp	r3, #0
 800d332:	d1e6      	bne.n	800d302 <UART_Start_Receive_IT+0x1be>
 800d334:	e018      	b.n	800d368 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	e853 3f00 	ldrex	r3, [r3]
 800d342:	613b      	str	r3, [r7, #16]
   return(result);
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	f043 0320 	orr.w	r3, r3, #32
 800d34a:	67bb      	str	r3, [r7, #120]	; 0x78
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	461a      	mov	r2, r3
 800d352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d354:	623b      	str	r3, [r7, #32]
 800d356:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d358:	69f9      	ldr	r1, [r7, #28]
 800d35a:	6a3a      	ldr	r2, [r7, #32]
 800d35c:	e841 2300 	strex	r3, r2, [r1]
 800d360:	61bb      	str	r3, [r7, #24]
   return(result);
 800d362:	69bb      	ldr	r3, [r7, #24]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d1e6      	bne.n	800d336 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d368:	2300      	movs	r3, #0
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	378c      	adds	r7, #140	; 0x8c
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	0800dba9 	.word	0x0800dba9
 800d37c:	0800d849 	.word	0x0800d849
 800d380:	0800d691 	.word	0x0800d691
 800d384:	0800d4d9 	.word	0x0800d4d9

0800d388 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d388:	b480      	push	{r7}
 800d38a:	b095      	sub	sp, #84	; 0x54
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d398:	e853 3f00 	ldrex	r3, [r3]
 800d39c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d3a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3ae:	643b      	str	r3, [r7, #64]	; 0x40
 800d3b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d3b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3b6:	e841 2300 	strex	r3, r2, [r1]
 800d3ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d1e6      	bne.n	800d390 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	3308      	adds	r3, #8
 800d3c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ca:	6a3b      	ldr	r3, [r7, #32]
 800d3cc:	e853 3f00 	ldrex	r3, [r3]
 800d3d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d3d2:	69fa      	ldr	r2, [r7, #28]
 800d3d4:	4b1e      	ldr	r3, [pc, #120]	; (800d450 <UART_EndRxTransfer+0xc8>)
 800d3d6:	4013      	ands	r3, r2
 800d3d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	3308      	adds	r3, #8
 800d3e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d3e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3ea:	e841 2300 	strex	r3, r2, [r1]
 800d3ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d1e5      	bne.n	800d3c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d118      	bne.n	800d430 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	e853 3f00 	ldrex	r3, [r3]
 800d40a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	f023 0310 	bic.w	r3, r3, #16
 800d412:	647b      	str	r3, [r7, #68]	; 0x44
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	461a      	mov	r2, r3
 800d41a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d41c:	61bb      	str	r3, [r7, #24]
 800d41e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d420:	6979      	ldr	r1, [r7, #20]
 800d422:	69ba      	ldr	r2, [r7, #24]
 800d424:	e841 2300 	strex	r3, r2, [r1]
 800d428:	613b      	str	r3, [r7, #16]
   return(result);
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d1e6      	bne.n	800d3fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2220      	movs	r2, #32
 800d434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2200      	movs	r2, #0
 800d43c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2200      	movs	r2, #0
 800d442:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d444:	bf00      	nop
 800d446:	3754      	adds	r7, #84	; 0x54
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr
 800d450:	effffffe 	.word	0xeffffffe

0800d454 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d460:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2200      	movs	r2, #0
 800d466:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2200      	movs	r2, #0
 800d46e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d472:	68f8      	ldr	r0, [r7, #12]
 800d474:	f7fe ff34 	bl	800c2e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d478:	bf00      	nop
 800d47a:	3710      	adds	r7, #16
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b088      	sub	sp, #32
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	e853 3f00 	ldrex	r3, [r3]
 800d494:	60bb      	str	r3, [r7, #8]
   return(result);
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d49c:	61fb      	str	r3, [r7, #28]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	69fb      	ldr	r3, [r7, #28]
 800d4a6:	61bb      	str	r3, [r7, #24]
 800d4a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4aa:	6979      	ldr	r1, [r7, #20]
 800d4ac:	69ba      	ldr	r2, [r7, #24]
 800d4ae:	e841 2300 	strex	r3, r2, [r1]
 800d4b2:	613b      	str	r3, [r7, #16]
   return(result);
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d1e6      	bne.n	800d488 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2220      	movs	r2, #32
 800d4be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f7fe feff 	bl	800c2cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4ce:	bf00      	nop
 800d4d0:	3720      	adds	r7, #32
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
	...

0800d4d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b09c      	sub	sp, #112	; 0x70
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d4e6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4f0:	2b22      	cmp	r3, #34	; 0x22
 800d4f2:	f040 80be 	bne.w	800d672 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d500:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d504:	b2d9      	uxtb	r1, r3
 800d506:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d50a:	b2da      	uxtb	r2, r3
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d510:	400a      	ands	r2, r1
 800d512:	b2d2      	uxtb	r2, r2
 800d514:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d51a:	1c5a      	adds	r2, r3, #1
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d526:	b29b      	uxth	r3, r3
 800d528:	3b01      	subs	r3, #1
 800d52a:	b29a      	uxth	r2, r3
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d538:	b29b      	uxth	r3, r3
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	f040 80a1 	bne.w	800d682 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d548:	e853 3f00 	ldrex	r3, [r3]
 800d54c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d54e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d550:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d554:	66bb      	str	r3, [r7, #104]	; 0x68
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	461a      	mov	r2, r3
 800d55c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d55e:	65bb      	str	r3, [r7, #88]	; 0x58
 800d560:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d562:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d564:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d566:	e841 2300 	strex	r3, r2, [r1]
 800d56a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d56c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d1e6      	bne.n	800d540 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	3308      	adds	r3, #8
 800d578:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57c:	e853 3f00 	ldrex	r3, [r3]
 800d580:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d584:	f023 0301 	bic.w	r3, r3, #1
 800d588:	667b      	str	r3, [r7, #100]	; 0x64
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	3308      	adds	r3, #8
 800d590:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d592:	647a      	str	r2, [r7, #68]	; 0x44
 800d594:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d596:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d598:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d59a:	e841 2300 	strex	r3, r2, [r1]
 800d59e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d1e5      	bne.n	800d572 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2220      	movs	r2, #32
 800d5aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	4a33      	ldr	r2, [pc, #204]	; (800d68c <UART_RxISR_8BIT+0x1b4>)
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d01f      	beq.n	800d604 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	685b      	ldr	r3, [r3, #4]
 800d5ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d018      	beq.n	800d604 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5da:	e853 3f00 	ldrex	r3, [r3]
 800d5de:	623b      	str	r3, [r7, #32]
   return(result);
 800d5e0:	6a3b      	ldr	r3, [r7, #32]
 800d5e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d5e6:	663b      	str	r3, [r7, #96]	; 0x60
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d5f0:	633b      	str	r3, [r7, #48]	; 0x30
 800d5f2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d5f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5f8:	e841 2300 	strex	r3, r2, [r1]
 800d5fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d600:	2b00      	cmp	r3, #0
 800d602:	d1e6      	bne.n	800d5d2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d12e      	bne.n	800d66a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2200      	movs	r2, #0
 800d610:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	e853 3f00 	ldrex	r3, [r3]
 800d61e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f023 0310 	bic.w	r3, r3, #16
 800d626:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	461a      	mov	r2, r3
 800d62e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d630:	61fb      	str	r3, [r7, #28]
 800d632:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d634:	69b9      	ldr	r1, [r7, #24]
 800d636:	69fa      	ldr	r2, [r7, #28]
 800d638:	e841 2300 	strex	r3, r2, [r1]
 800d63c:	617b      	str	r3, [r7, #20]
   return(result);
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d1e6      	bne.n	800d612 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	69db      	ldr	r3, [r3, #28]
 800d64a:	f003 0310 	and.w	r3, r3, #16
 800d64e:	2b10      	cmp	r3, #16
 800d650:	d103      	bne.n	800d65a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	2210      	movs	r2, #16
 800d658:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d660:	4619      	mov	r1, r3
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f7fe fe46 	bl	800c2f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d668:	e00b      	b.n	800d682 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f7f4 fa4c 	bl	8001b08 <HAL_UART_RxCpltCallback>
}
 800d670:	e007      	b.n	800d682 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	699a      	ldr	r2, [r3, #24]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f042 0208 	orr.w	r2, r2, #8
 800d680:	619a      	str	r2, [r3, #24]
}
 800d682:	bf00      	nop
 800d684:	3770      	adds	r7, #112	; 0x70
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	58000c00 	.word	0x58000c00

0800d690 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b09c      	sub	sp, #112	; 0x70
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d69e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6a8:	2b22      	cmp	r3, #34	; 0x22
 800d6aa:	f040 80be 	bne.w	800d82a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6bc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d6be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800d6c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d6c6:	4013      	ands	r3, r2
 800d6c8:	b29a      	uxth	r2, r3
 800d6ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6d2:	1c9a      	adds	r2, r3, #2
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	b29a      	uxth	r2, r3
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	f040 80a1 	bne.w	800d83a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d700:	e853 3f00 	ldrex	r3, [r3]
 800d704:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d708:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d70c:	667b      	str	r3, [r7, #100]	; 0x64
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	461a      	mov	r2, r3
 800d714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d716:	657b      	str	r3, [r7, #84]	; 0x54
 800d718:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d71a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d71c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d71e:	e841 2300 	strex	r3, r2, [r1]
 800d722:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d726:	2b00      	cmp	r3, #0
 800d728:	d1e6      	bne.n	800d6f8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	3308      	adds	r3, #8
 800d730:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d734:	e853 3f00 	ldrex	r3, [r3]
 800d738:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d73c:	f023 0301 	bic.w	r3, r3, #1
 800d740:	663b      	str	r3, [r7, #96]	; 0x60
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	3308      	adds	r3, #8
 800d748:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d74a:	643a      	str	r2, [r7, #64]	; 0x40
 800d74c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d74e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d750:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d752:	e841 2300 	strex	r3, r2, [r1]
 800d756:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d1e5      	bne.n	800d72a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2220      	movs	r2, #32
 800d762:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2200      	movs	r2, #0
 800d76a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2200      	movs	r2, #0
 800d770:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a33      	ldr	r2, [pc, #204]	; (800d844 <UART_RxISR_16BIT+0x1b4>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d01f      	beq.n	800d7bc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d786:	2b00      	cmp	r3, #0
 800d788:	d018      	beq.n	800d7bc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d790:	6a3b      	ldr	r3, [r7, #32]
 800d792:	e853 3f00 	ldrex	r3, [r3]
 800d796:	61fb      	str	r3, [r7, #28]
   return(result);
 800d798:	69fb      	ldr	r3, [r7, #28]
 800d79a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d79e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	461a      	mov	r2, r3
 800d7a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7aa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7b0:	e841 2300 	strex	r3, r2, [r1]
 800d7b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d1e6      	bne.n	800d78a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d12e      	bne.n	800d822 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	e853 3f00 	ldrex	r3, [r3]
 800d7d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	f023 0310 	bic.w	r3, r3, #16
 800d7de:	65bb      	str	r3, [r7, #88]	; 0x58
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7e8:	61bb      	str	r3, [r7, #24]
 800d7ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ec:	6979      	ldr	r1, [r7, #20]
 800d7ee:	69ba      	ldr	r2, [r7, #24]
 800d7f0:	e841 2300 	strex	r3, r2, [r1]
 800d7f4:	613b      	str	r3, [r7, #16]
   return(result);
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d1e6      	bne.n	800d7ca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	69db      	ldr	r3, [r3, #28]
 800d802:	f003 0310 	and.w	r3, r3, #16
 800d806:	2b10      	cmp	r3, #16
 800d808:	d103      	bne.n	800d812 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2210      	movs	r2, #16
 800d810:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d818:	4619      	mov	r1, r3
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f7fe fd6a 	bl	800c2f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d820:	e00b      	b.n	800d83a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f7f4 f970 	bl	8001b08 <HAL_UART_RxCpltCallback>
}
 800d828:	e007      	b.n	800d83a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	699a      	ldr	r2, [r3, #24]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f042 0208 	orr.w	r2, r2, #8
 800d838:	619a      	str	r2, [r3, #24]
}
 800d83a:	bf00      	nop
 800d83c:	3770      	adds	r7, #112	; 0x70
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	58000c00 	.word	0x58000c00

0800d848 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b0ac      	sub	sp, #176	; 0xb0
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d856:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	69db      	ldr	r3, [r3, #28]
 800d860:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	689b      	ldr	r3, [r3, #8]
 800d874:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d87e:	2b22      	cmp	r3, #34	; 0x22
 800d880:	f040 8180 	bne.w	800db84 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d88a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d88e:	e123      	b.n	800dad8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d896:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d89a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d89e:	b2d9      	uxtb	r1, r3
 800d8a0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800d8a4:	b2da      	uxtb	r2, r3
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8aa:	400a      	ands	r2, r1
 800d8ac:	b2d2      	uxtb	r2, r2
 800d8ae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8b4:	1c5a      	adds	r2, r3, #1
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	3b01      	subs	r3, #1
 800d8c4:	b29a      	uxth	r2, r3
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	69db      	ldr	r3, [r3, #28]
 800d8d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d8d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8da:	f003 0307 	and.w	r3, r3, #7
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d053      	beq.n	800d98a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d8e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8e6:	f003 0301 	and.w	r3, r3, #1
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d011      	beq.n	800d912 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d8ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d8f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d00b      	beq.n	800d912 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	2201      	movs	r2, #1
 800d900:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d908:	f043 0201 	orr.w	r2, r3, #1
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d916:	f003 0302 	and.w	r3, r3, #2
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d011      	beq.n	800d942 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d91e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d922:	f003 0301 	and.w	r3, r3, #1
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00b      	beq.n	800d942 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	2202      	movs	r2, #2
 800d930:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d938:	f043 0204 	orr.w	r2, r3, #4
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d946:	f003 0304 	and.w	r3, r3, #4
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d011      	beq.n	800d972 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d94e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d952:	f003 0301 	and.w	r3, r3, #1
 800d956:	2b00      	cmp	r3, #0
 800d958:	d00b      	beq.n	800d972 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	2204      	movs	r2, #4
 800d960:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d968:	f043 0202 	orr.w	r2, r3, #2
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d006      	beq.n	800d98a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f7fe fcaf 	bl	800c2e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2200      	movs	r2, #0
 800d986:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d990:	b29b      	uxth	r3, r3
 800d992:	2b00      	cmp	r3, #0
 800d994:	f040 80a0 	bne.w	800dad8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d99e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d9a0:	e853 3f00 	ldrex	r3, [r3]
 800d9a4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800d9a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d9ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d9bc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9be:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d9c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d9c2:	e841 2300 	strex	r3, r2, [r1]
 800d9c6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800d9c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d1e4      	bne.n	800d998 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	3308      	adds	r3, #8
 800d9d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9d8:	e853 3f00 	ldrex	r3, [r3]
 800d9dc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d9de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d9e0:	4b6e      	ldr	r3, [pc, #440]	; (800db9c <UART_RxISR_8BIT_FIFOEN+0x354>)
 800d9e2:	4013      	ands	r3, r2
 800d9e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	3308      	adds	r3, #8
 800d9ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d9f2:	66ba      	str	r2, [r7, #104]	; 0x68
 800d9f4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9f6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d9f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d9fa:	e841 2300 	strex	r3, r2, [r1]
 800d9fe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800da00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da02:	2b00      	cmp	r3, #0
 800da04:	d1e3      	bne.n	800d9ce <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2220      	movs	r2, #32
 800da0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2200      	movs	r2, #0
 800da18:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	4a60      	ldr	r2, [pc, #384]	; (800dba0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d021      	beq.n	800da68 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d01a      	beq.n	800da68 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da3a:	e853 3f00 	ldrex	r3, [r3]
 800da3e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800da40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800da46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	461a      	mov	r2, r3
 800da50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800da54:	657b      	str	r3, [r7, #84]	; 0x54
 800da56:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800da5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800da5c:	e841 2300 	strex	r3, r2, [r1]
 800da60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800da62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da64:	2b00      	cmp	r3, #0
 800da66:	d1e4      	bne.n	800da32 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d130      	bne.n	800dad2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2200      	movs	r2, #0
 800da74:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da7e:	e853 3f00 	ldrex	r3, [r3]
 800da82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800da84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da86:	f023 0310 	bic.w	r3, r3, #16
 800da8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	461a      	mov	r2, r3
 800da94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800da98:	643b      	str	r3, [r7, #64]	; 0x40
 800da9a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800da9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800daa0:	e841 2300 	strex	r3, r2, [r1]
 800daa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800daa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d1e4      	bne.n	800da76 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	69db      	ldr	r3, [r3, #28]
 800dab2:	f003 0310 	and.w	r3, r3, #16
 800dab6:	2b10      	cmp	r3, #16
 800dab8:	d103      	bne.n	800dac2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	2210      	movs	r2, #16
 800dac0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dac8:	4619      	mov	r1, r3
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f7fe fc12 	bl	800c2f4 <HAL_UARTEx_RxEventCallback>
 800dad0:	e002      	b.n	800dad8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f7f4 f818 	bl	8001b08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dad8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d006      	beq.n	800daee <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800dae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dae4:	f003 0320 	and.w	r3, r3, #32
 800dae8:	2b00      	cmp	r3, #0
 800daea:	f47f aed1 	bne.w	800d890 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800daf4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800daf8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d049      	beq.n	800db94 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800db06:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d242      	bcs.n	800db94 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	3308      	adds	r3, #8
 800db14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db16:	6a3b      	ldr	r3, [r7, #32]
 800db18:	e853 3f00 	ldrex	r3, [r3]
 800db1c:	61fb      	str	r3, [r7, #28]
   return(result);
 800db1e:	69fb      	ldr	r3, [r7, #28]
 800db20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800db24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	3308      	adds	r3, #8
 800db2e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800db32:	62fa      	str	r2, [r7, #44]	; 0x2c
 800db34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db3a:	e841 2300 	strex	r3, r2, [r1]
 800db3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800db40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db42:	2b00      	cmp	r3, #0
 800db44:	d1e3      	bne.n	800db0e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	4a16      	ldr	r2, [pc, #88]	; (800dba4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800db4a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	e853 3f00 	ldrex	r3, [r3]
 800db58:	60bb      	str	r3, [r7, #8]
   return(result);
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	f043 0320 	orr.w	r3, r3, #32
 800db60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	461a      	mov	r2, r3
 800db6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800db6e:	61bb      	str	r3, [r7, #24]
 800db70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db72:	6979      	ldr	r1, [r7, #20]
 800db74:	69ba      	ldr	r2, [r7, #24]
 800db76:	e841 2300 	strex	r3, r2, [r1]
 800db7a:	613b      	str	r3, [r7, #16]
   return(result);
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d1e4      	bne.n	800db4c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800db82:	e007      	b.n	800db94 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	699a      	ldr	r2, [r3, #24]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f042 0208 	orr.w	r2, r2, #8
 800db92:	619a      	str	r2, [r3, #24]
}
 800db94:	bf00      	nop
 800db96:	37b0      	adds	r7, #176	; 0xb0
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}
 800db9c:	effffffe 	.word	0xeffffffe
 800dba0:	58000c00 	.word	0x58000c00
 800dba4:	0800d4d9 	.word	0x0800d4d9

0800dba8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b0ae      	sub	sp, #184	; 0xb8
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dbb6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	69db      	ldr	r3, [r3, #28]
 800dbc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	689b      	ldr	r3, [r3, #8]
 800dbd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbde:	2b22      	cmp	r3, #34	; 0x22
 800dbe0:	f040 8184 	bne.w	800deec <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dbea:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dbee:	e127      	b.n	800de40 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800dc02:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800dc06:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800dc0a:	4013      	ands	r3, r2
 800dc0c:	b29a      	uxth	r2, r3
 800dc0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dc12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc18:	1c9a      	adds	r2, r3, #2
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	3b01      	subs	r3, #1
 800dc28:	b29a      	uxth	r2, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	69db      	ldr	r3, [r3, #28]
 800dc36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dc3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc3e:	f003 0307 	and.w	r3, r3, #7
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d053      	beq.n	800dcee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dc46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc4a:	f003 0301 	and.w	r3, r3, #1
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d011      	beq.n	800dc76 <UART_RxISR_16BIT_FIFOEN+0xce>
 800dc52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d00b      	beq.n	800dc76 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	2201      	movs	r2, #1
 800dc64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc6c:	f043 0201 	orr.w	r2, r3, #1
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc7a:	f003 0302 	and.w	r3, r3, #2
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d011      	beq.n	800dca6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800dc82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dc86:	f003 0301 	and.w	r3, r3, #1
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d00b      	beq.n	800dca6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	2202      	movs	r2, #2
 800dc94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc9c:	f043 0204 	orr.w	r2, r3, #4
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dca6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dcaa:	f003 0304 	and.w	r3, r3, #4
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d011      	beq.n	800dcd6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800dcb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dcb6:	f003 0301 	and.w	r3, r3, #1
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d00b      	beq.n	800dcd6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	2204      	movs	r2, #4
 800dcc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dccc:	f043 0202 	orr.w	r2, r3, #2
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d006      	beq.n	800dcee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f7fe fafd 	bl	800c2e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2200      	movs	r2, #0
 800dcea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	f040 80a2 	bne.w	800de40 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dd04:	e853 3f00 	ldrex	r3, [r3]
 800dd08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dd0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	461a      	mov	r2, r3
 800dd1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dd1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dd22:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dd26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dd2a:	e841 2300 	strex	r3, r2, [r1]
 800dd2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dd30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d1e2      	bne.n	800dcfc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	3308      	adds	r3, #8
 800dd3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd40:	e853 3f00 	ldrex	r3, [r3]
 800dd44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dd46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dd48:	4b6e      	ldr	r3, [pc, #440]	; (800df04 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800dd4a:	4013      	ands	r3, r2
 800dd4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	3308      	adds	r3, #8
 800dd56:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800dd5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dd5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dd60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dd62:	e841 2300 	strex	r3, r2, [r1]
 800dd66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dd68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d1e3      	bne.n	800dd36 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2220      	movs	r2, #32
 800dd72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4a60      	ldr	r2, [pc, #384]	; (800df08 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d021      	beq.n	800ddd0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	685b      	ldr	r3, [r3, #4]
 800dd92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d01a      	beq.n	800ddd0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dda0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dda2:	e853 3f00 	ldrex	r3, [r3]
 800dda6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dda8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddaa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ddae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ddbc:	65bb      	str	r3, [r7, #88]	; 0x58
 800ddbe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ddc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ddc4:	e841 2300 	strex	r3, r2, [r1]
 800ddc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ddca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d1e4      	bne.n	800dd9a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	d130      	bne.n	800de3a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2200      	movs	r2, #0
 800dddc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde6:	e853 3f00 	ldrex	r3, [r3]
 800ddea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ddec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddee:	f023 0310 	bic.w	r3, r3, #16
 800ddf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	461a      	mov	r2, r3
 800ddfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de00:	647b      	str	r3, [r7, #68]	; 0x44
 800de02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800de06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de08:	e841 2300 	strex	r3, r2, [r1]
 800de0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800de0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de10:	2b00      	cmp	r3, #0
 800de12:	d1e4      	bne.n	800ddde <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	69db      	ldr	r3, [r3, #28]
 800de1a:	f003 0310 	and.w	r3, r3, #16
 800de1e:	2b10      	cmp	r3, #16
 800de20:	d103      	bne.n	800de2a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	2210      	movs	r2, #16
 800de28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800de30:	4619      	mov	r1, r3
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f7fe fa5e 	bl	800c2f4 <HAL_UARTEx_RxEventCallback>
 800de38:	e002      	b.n	800de40 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f7f3 fe64 	bl	8001b08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800de40:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800de44:	2b00      	cmp	r3, #0
 800de46:	d006      	beq.n	800de56 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800de48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de4c:	f003 0320 	and.w	r3, r3, #32
 800de50:	2b00      	cmp	r3, #0
 800de52:	f47f aecd 	bne.w	800dbf0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de5c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800de60:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800de64:	2b00      	cmp	r3, #0
 800de66:	d049      	beq.n	800defc <UART_RxISR_16BIT_FIFOEN+0x354>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800de6e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800de72:	429a      	cmp	r2, r3
 800de74:	d242      	bcs.n	800defc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	3308      	adds	r3, #8
 800de7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de80:	e853 3f00 	ldrex	r3, [r3]
 800de84:	623b      	str	r3, [r7, #32]
   return(result);
 800de86:	6a3b      	ldr	r3, [r7, #32]
 800de88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800de8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	3308      	adds	r3, #8
 800de96:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800de9a:	633a      	str	r2, [r7, #48]	; 0x30
 800de9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dea2:	e841 2300 	strex	r3, r2, [r1]
 800dea6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d1e3      	bne.n	800de76 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	4a16      	ldr	r2, [pc, #88]	; (800df0c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800deb2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	e853 3f00 	ldrex	r3, [r3]
 800dec0:	60fb      	str	r3, [r7, #12]
   return(result);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	f043 0320 	orr.w	r3, r3, #32
 800dec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	461a      	mov	r2, r3
 800ded2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ded6:	61fb      	str	r3, [r7, #28]
 800ded8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deda:	69b9      	ldr	r1, [r7, #24]
 800dedc:	69fa      	ldr	r2, [r7, #28]
 800dede:	e841 2300 	strex	r3, r2, [r1]
 800dee2:	617b      	str	r3, [r7, #20]
   return(result);
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d1e4      	bne.n	800deb4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800deea:	e007      	b.n	800defc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	699a      	ldr	r2, [r3, #24]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	f042 0208 	orr.w	r2, r2, #8
 800defa:	619a      	str	r2, [r3, #24]
}
 800defc:	bf00      	nop
 800defe:	37b8      	adds	r7, #184	; 0xb8
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}
 800df04:	effffffe 	.word	0xeffffffe
 800df08:	58000c00 	.word	0x58000c00
 800df0c:	0800d691 	.word	0x0800d691

0800df10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800df10:	b480      	push	{r7}
 800df12:	b083      	sub	sp, #12
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800df18:	bf00      	nop
 800df1a:	370c      	adds	r7, #12
 800df1c:	46bd      	mov	sp, r7
 800df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df22:	4770      	bx	lr

0800df24 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800df2c:	bf00      	nop
 800df2e:	370c      	adds	r7, #12
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr

0800df38 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800df38:	b480      	push	{r7}
 800df3a:	b083      	sub	sp, #12
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800df40:	bf00      	nop
 800df42:	370c      	adds	r7, #12
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr

0800df4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b085      	sub	sp, #20
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800df5a:	2b01      	cmp	r3, #1
 800df5c:	d101      	bne.n	800df62 <HAL_UARTEx_DisableFifoMode+0x16>
 800df5e:	2302      	movs	r3, #2
 800df60:	e027      	b.n	800dfb2 <HAL_UARTEx_DisableFifoMode+0x66>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2201      	movs	r2, #1
 800df66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2224      	movs	r2, #36	; 0x24
 800df6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	681a      	ldr	r2, [r3, #0]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f022 0201 	bic.w	r2, r2, #1
 800df88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800df90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2200      	movs	r2, #0
 800df96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	68fa      	ldr	r2, [r7, #12]
 800df9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2220      	movs	r2, #32
 800dfa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dfb0:	2300      	movs	r3, #0
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3714      	adds	r7, #20
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr

0800dfbe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dfbe:	b580      	push	{r7, lr}
 800dfc0:	b084      	sub	sp, #16
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	6078      	str	r0, [r7, #4]
 800dfc6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d101      	bne.n	800dfd6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dfd2:	2302      	movs	r3, #2
 800dfd4:	e02d      	b.n	800e032 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2201      	movs	r2, #1
 800dfda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2224      	movs	r2, #36	; 0x24
 800dfe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	681a      	ldr	r2, [r3, #0]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f022 0201 	bic.w	r2, r2, #1
 800dffc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	689b      	ldr	r3, [r3, #8]
 800e004:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	683a      	ldr	r2, [r7, #0]
 800e00e:	430a      	orrs	r2, r1
 800e010:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f000 f850 	bl	800e0b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	68fa      	ldr	r2, [r7, #12]
 800e01e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2220      	movs	r2, #32
 800e024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2200      	movs	r2, #0
 800e02c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e030:	2300      	movs	r3, #0
}
 800e032:	4618      	mov	r0, r3
 800e034:	3710      	adds	r7, #16
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}

0800e03a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e03a:	b580      	push	{r7, lr}
 800e03c:	b084      	sub	sp, #16
 800e03e:	af00      	add	r7, sp, #0
 800e040:	6078      	str	r0, [r7, #4]
 800e042:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d101      	bne.n	800e052 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e04e:	2302      	movs	r3, #2
 800e050:	e02d      	b.n	800e0ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2201      	movs	r2, #1
 800e056:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2224      	movs	r2, #36	; 0x24
 800e05e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	681a      	ldr	r2, [r3, #0]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f022 0201 	bic.w	r2, r2, #1
 800e078:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	689b      	ldr	r3, [r3, #8]
 800e080:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	683a      	ldr	r2, [r7, #0]
 800e08a:	430a      	orrs	r2, r1
 800e08c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f000 f812 	bl	800e0b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	68fa      	ldr	r2, [r7, #12]
 800e09a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2220      	movs	r2, #32
 800e0a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e0ac:	2300      	movs	r3, #0
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3710      	adds	r7, #16
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
	...

0800e0b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b085      	sub	sp, #20
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d108      	bne.n	800e0da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e0d8:	e031      	b.n	800e13e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e0da:	2310      	movs	r3, #16
 800e0dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e0de:	2310      	movs	r3, #16
 800e0e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	689b      	ldr	r3, [r3, #8]
 800e0e8:	0e5b      	lsrs	r3, r3, #25
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	f003 0307 	and.w	r3, r3, #7
 800e0f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	689b      	ldr	r3, [r3, #8]
 800e0f8:	0f5b      	lsrs	r3, r3, #29
 800e0fa:	b2db      	uxtb	r3, r3
 800e0fc:	f003 0307 	and.w	r3, r3, #7
 800e100:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e102:	7bbb      	ldrb	r3, [r7, #14]
 800e104:	7b3a      	ldrb	r2, [r7, #12]
 800e106:	4911      	ldr	r1, [pc, #68]	; (800e14c <UARTEx_SetNbDataToProcess+0x94>)
 800e108:	5c8a      	ldrb	r2, [r1, r2]
 800e10a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e10e:	7b3a      	ldrb	r2, [r7, #12]
 800e110:	490f      	ldr	r1, [pc, #60]	; (800e150 <UARTEx_SetNbDataToProcess+0x98>)
 800e112:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e114:	fb93 f3f2 	sdiv	r3, r3, r2
 800e118:	b29a      	uxth	r2, r3
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e120:	7bfb      	ldrb	r3, [r7, #15]
 800e122:	7b7a      	ldrb	r2, [r7, #13]
 800e124:	4909      	ldr	r1, [pc, #36]	; (800e14c <UARTEx_SetNbDataToProcess+0x94>)
 800e126:	5c8a      	ldrb	r2, [r1, r2]
 800e128:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e12c:	7b7a      	ldrb	r2, [r7, #13]
 800e12e:	4908      	ldr	r1, [pc, #32]	; (800e150 <UARTEx_SetNbDataToProcess+0x98>)
 800e130:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e132:	fb93 f3f2 	sdiv	r3, r3, r2
 800e136:	b29a      	uxth	r2, r3
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e13e:	bf00      	nop
 800e140:	3714      	adds	r7, #20
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop
 800e14c:	0800f3ac 	.word	0x0800f3ac
 800e150:	0800f3b4 	.word	0x0800f3b4

0800e154 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e154:	b480      	push	{r7}
 800e156:	b083      	sub	sp, #12
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d121      	bne.n	800e1aa <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	4b27      	ldr	r3, [pc, #156]	; (800e208 <FMC_SDRAM_Init+0xb4>)
 800e16c:	4013      	ands	r3, r2
 800e16e:	683a      	ldr	r2, [r7, #0]
 800e170:	6851      	ldr	r1, [r2, #4]
 800e172:	683a      	ldr	r2, [r7, #0]
 800e174:	6892      	ldr	r2, [r2, #8]
 800e176:	4311      	orrs	r1, r2
 800e178:	683a      	ldr	r2, [r7, #0]
 800e17a:	68d2      	ldr	r2, [r2, #12]
 800e17c:	4311      	orrs	r1, r2
 800e17e:	683a      	ldr	r2, [r7, #0]
 800e180:	6912      	ldr	r2, [r2, #16]
 800e182:	4311      	orrs	r1, r2
 800e184:	683a      	ldr	r2, [r7, #0]
 800e186:	6952      	ldr	r2, [r2, #20]
 800e188:	4311      	orrs	r1, r2
 800e18a:	683a      	ldr	r2, [r7, #0]
 800e18c:	6992      	ldr	r2, [r2, #24]
 800e18e:	4311      	orrs	r1, r2
 800e190:	683a      	ldr	r2, [r7, #0]
 800e192:	69d2      	ldr	r2, [r2, #28]
 800e194:	4311      	orrs	r1, r2
 800e196:	683a      	ldr	r2, [r7, #0]
 800e198:	6a12      	ldr	r2, [r2, #32]
 800e19a:	4311      	orrs	r1, r2
 800e19c:	683a      	ldr	r2, [r7, #0]
 800e19e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e1a0:	430a      	orrs	r2, r1
 800e1a2:	431a      	orrs	r2, r3
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	601a      	str	r2, [r3, #0]
 800e1a8:	e026      	b.n	800e1f8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	69d9      	ldr	r1, [r3, #28]
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	6a1b      	ldr	r3, [r3, #32]
 800e1ba:	4319      	orrs	r1, r3
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c0:	430b      	orrs	r3, r1
 800e1c2:	431a      	orrs	r2, r3
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	685a      	ldr	r2, [r3, #4]
 800e1cc:	4b0e      	ldr	r3, [pc, #56]	; (800e208 <FMC_SDRAM_Init+0xb4>)
 800e1ce:	4013      	ands	r3, r2
 800e1d0:	683a      	ldr	r2, [r7, #0]
 800e1d2:	6851      	ldr	r1, [r2, #4]
 800e1d4:	683a      	ldr	r2, [r7, #0]
 800e1d6:	6892      	ldr	r2, [r2, #8]
 800e1d8:	4311      	orrs	r1, r2
 800e1da:	683a      	ldr	r2, [r7, #0]
 800e1dc:	68d2      	ldr	r2, [r2, #12]
 800e1de:	4311      	orrs	r1, r2
 800e1e0:	683a      	ldr	r2, [r7, #0]
 800e1e2:	6912      	ldr	r2, [r2, #16]
 800e1e4:	4311      	orrs	r1, r2
 800e1e6:	683a      	ldr	r2, [r7, #0]
 800e1e8:	6952      	ldr	r2, [r2, #20]
 800e1ea:	4311      	orrs	r1, r2
 800e1ec:	683a      	ldr	r2, [r7, #0]
 800e1ee:	6992      	ldr	r2, [r2, #24]
 800e1f0:	430a      	orrs	r2, r1
 800e1f2:	431a      	orrs	r2, r3
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800e1f8:	2300      	movs	r3, #0
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	370c      	adds	r7, #12
 800e1fe:	46bd      	mov	sp, r7
 800e200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e204:	4770      	bx	lr
 800e206:	bf00      	nop
 800e208:	ffff8000 	.word	0xffff8000

0800e20c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e20c:	b480      	push	{r7}
 800e20e:	b085      	sub	sp, #20
 800e210:	af00      	add	r7, sp, #0
 800e212:	60f8      	str	r0, [r7, #12]
 800e214:	60b9      	str	r1, [r7, #8]
 800e216:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d128      	bne.n	800e270 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	689b      	ldr	r3, [r3, #8]
 800e222:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	1e59      	subs	r1, r3, #1
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	3b01      	subs	r3, #1
 800e232:	011b      	lsls	r3, r3, #4
 800e234:	4319      	orrs	r1, r3
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	689b      	ldr	r3, [r3, #8]
 800e23a:	3b01      	subs	r3, #1
 800e23c:	021b      	lsls	r3, r3, #8
 800e23e:	4319      	orrs	r1, r3
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	68db      	ldr	r3, [r3, #12]
 800e244:	3b01      	subs	r3, #1
 800e246:	031b      	lsls	r3, r3, #12
 800e248:	4319      	orrs	r1, r3
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	691b      	ldr	r3, [r3, #16]
 800e24e:	3b01      	subs	r3, #1
 800e250:	041b      	lsls	r3, r3, #16
 800e252:	4319      	orrs	r1, r3
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	695b      	ldr	r3, [r3, #20]
 800e258:	3b01      	subs	r3, #1
 800e25a:	051b      	lsls	r3, r3, #20
 800e25c:	4319      	orrs	r1, r3
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	699b      	ldr	r3, [r3, #24]
 800e262:	3b01      	subs	r3, #1
 800e264:	061b      	lsls	r3, r3, #24
 800e266:	430b      	orrs	r3, r1
 800e268:	431a      	orrs	r2, r3
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	609a      	str	r2, [r3, #8]
 800e26e:	e02d      	b.n	800e2cc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	689a      	ldr	r2, [r3, #8]
 800e274:	4b19      	ldr	r3, [pc, #100]	; (800e2dc <FMC_SDRAM_Timing_Init+0xd0>)
 800e276:	4013      	ands	r3, r2
 800e278:	68ba      	ldr	r2, [r7, #8]
 800e27a:	68d2      	ldr	r2, [r2, #12]
 800e27c:	3a01      	subs	r2, #1
 800e27e:	0311      	lsls	r1, r2, #12
 800e280:	68ba      	ldr	r2, [r7, #8]
 800e282:	6952      	ldr	r2, [r2, #20]
 800e284:	3a01      	subs	r2, #1
 800e286:	0512      	lsls	r2, r2, #20
 800e288:	430a      	orrs	r2, r1
 800e28a:	431a      	orrs	r2, r3
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	68db      	ldr	r3, [r3, #12]
 800e294:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	1e59      	subs	r1, r3, #1
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	685b      	ldr	r3, [r3, #4]
 800e2a2:	3b01      	subs	r3, #1
 800e2a4:	011b      	lsls	r3, r3, #4
 800e2a6:	4319      	orrs	r1, r3
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	689b      	ldr	r3, [r3, #8]
 800e2ac:	3b01      	subs	r3, #1
 800e2ae:	021b      	lsls	r3, r3, #8
 800e2b0:	4319      	orrs	r1, r3
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	691b      	ldr	r3, [r3, #16]
 800e2b6:	3b01      	subs	r3, #1
 800e2b8:	041b      	lsls	r3, r3, #16
 800e2ba:	4319      	orrs	r1, r3
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	699b      	ldr	r3, [r3, #24]
 800e2c0:	3b01      	subs	r3, #1
 800e2c2:	061b      	lsls	r3, r3, #24
 800e2c4:	430b      	orrs	r3, r1
 800e2c6:	431a      	orrs	r2, r3
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800e2cc:	2300      	movs	r3, #0
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3714      	adds	r7, #20
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d8:	4770      	bx	lr
 800e2da:	bf00      	nop
 800e2dc:	ff0f0fff 	.word	0xff0f0fff

0800e2e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e2e0:	b084      	sub	sp, #16
 800e2e2:	b580      	push	{r7, lr}
 800e2e4:	b084      	sub	sp, #16
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
 800e2ea:	f107 001c 	add.w	r0, r7, #28
 800e2ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	d120      	bne.n	800e33a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	68da      	ldr	r2, [r3, #12]
 800e308:	4b2a      	ldr	r3, [pc, #168]	; (800e3b4 <USB_CoreInit+0xd4>)
 800e30a:	4013      	ands	r3, r2
 800e30c:	687a      	ldr	r2, [r7, #4]
 800e30e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	68db      	ldr	r3, [r3, #12]
 800e314:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e31c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e31e:	2b01      	cmp	r3, #1
 800e320:	d105      	bne.n	800e32e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f000 faac 	bl	800e88c <USB_CoreReset>
 800e334:	4603      	mov	r3, r0
 800e336:	73fb      	strb	r3, [r7, #15]
 800e338:	e01a      	b.n	800e370 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	68db      	ldr	r3, [r3, #12]
 800e33e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f000 faa0 	bl	800e88c <USB_CoreReset>
 800e34c:	4603      	mov	r3, r0
 800e34e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e352:	2b00      	cmp	r3, #0
 800e354:	d106      	bne.n	800e364 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e35a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	639a      	str	r2, [r3, #56]	; 0x38
 800e362:	e005      	b.n	800e370 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e368:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e372:	2b01      	cmp	r3, #1
 800e374:	d116      	bne.n	800e3a4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e37a:	b29a      	uxth	r2, r3
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e384:	4b0c      	ldr	r3, [pc, #48]	; (800e3b8 <USB_CoreInit+0xd8>)
 800e386:	4313      	orrs	r3, r2
 800e388:	687a      	ldr	r2, [r7, #4]
 800e38a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	689b      	ldr	r3, [r3, #8]
 800e390:	f043 0206 	orr.w	r2, r3, #6
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	689b      	ldr	r3, [r3, #8]
 800e39c:	f043 0220 	orr.w	r2, r3, #32
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e3b0:	b004      	add	sp, #16
 800e3b2:	4770      	bx	lr
 800e3b4:	ffbdffbf 	.word	0xffbdffbf
 800e3b8:	03ee0000 	.word	0x03ee0000

0800e3bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b083      	sub	sp, #12
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	689b      	ldr	r3, [r3, #8]
 800e3c8:	f023 0201 	bic.w	r2, r3, #1
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e3d0:	2300      	movs	r3, #0
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	370c      	adds	r7, #12
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr

0800e3de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	b084      	sub	sp, #16
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
 800e3e6:	460b      	mov	r3, r1
 800e3e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	68db      	ldr	r3, [r3, #12]
 800e3f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e3fa:	78fb      	ldrb	r3, [r7, #3]
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	d115      	bne.n	800e42c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	68db      	ldr	r3, [r3, #12]
 800e404:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e40c:	2001      	movs	r0, #1
 800e40e:	f7f4 fda7 	bl	8002f60 <HAL_Delay>
      ms++;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	3301      	adds	r3, #1
 800e416:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f000 fa29 	bl	800e870 <USB_GetMode>
 800e41e:	4603      	mov	r3, r0
 800e420:	2b01      	cmp	r3, #1
 800e422:	d01e      	beq.n	800e462 <USB_SetCurrentMode+0x84>
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2b31      	cmp	r3, #49	; 0x31
 800e428:	d9f0      	bls.n	800e40c <USB_SetCurrentMode+0x2e>
 800e42a:	e01a      	b.n	800e462 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e42c:	78fb      	ldrb	r3, [r7, #3]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d115      	bne.n	800e45e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e43e:	2001      	movs	r0, #1
 800e440:	f7f4 fd8e 	bl	8002f60 <HAL_Delay>
      ms++;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	3301      	adds	r3, #1
 800e448:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f000 fa10 	bl	800e870 <USB_GetMode>
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d005      	beq.n	800e462 <USB_SetCurrentMode+0x84>
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2b31      	cmp	r3, #49	; 0x31
 800e45a:	d9f0      	bls.n	800e43e <USB_SetCurrentMode+0x60>
 800e45c:	e001      	b.n	800e462 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e45e:	2301      	movs	r3, #1
 800e460:	e005      	b.n	800e46e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2b32      	cmp	r3, #50	; 0x32
 800e466:	d101      	bne.n	800e46c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e468:	2301      	movs	r3, #1
 800e46a:	e000      	b.n	800e46e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e46c:	2300      	movs	r3, #0
}
 800e46e:	4618      	mov	r0, r3
 800e470:	3710      	adds	r7, #16
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
	...

0800e478 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e478:	b084      	sub	sp, #16
 800e47a:	b580      	push	{r7, lr}
 800e47c:	b086      	sub	sp, #24
 800e47e:	af00      	add	r7, sp, #0
 800e480:	6078      	str	r0, [r7, #4]
 800e482:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e486:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e48a:	2300      	movs	r3, #0
 800e48c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e492:	2300      	movs	r3, #0
 800e494:	613b      	str	r3, [r7, #16]
 800e496:	e009      	b.n	800e4ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e498:	687a      	ldr	r2, [r7, #4]
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	3340      	adds	r3, #64	; 0x40
 800e49e:	009b      	lsls	r3, r3, #2
 800e4a0:	4413      	add	r3, r2
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	3301      	adds	r3, #1
 800e4aa:	613b      	str	r3, [r7, #16]
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	2b0e      	cmp	r3, #14
 800e4b0:	d9f2      	bls.n	800e498 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e4b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d11c      	bne.n	800e4f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	68fa      	ldr	r2, [r7, #12]
 800e4c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e4c6:	f043 0302 	orr.w	r3, r3, #2
 800e4ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	601a      	str	r2, [r3, #0]
 800e4f0:	e005      	b.n	800e4fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e504:	461a      	mov	r2, r3
 800e506:	2300      	movs	r3, #0
 800e508:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e510:	4619      	mov	r1, r3
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e518:	461a      	mov	r2, r3
 800e51a:	680b      	ldr	r3, [r1, #0]
 800e51c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e520:	2b01      	cmp	r3, #1
 800e522:	d10c      	bne.n	800e53e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e526:	2b00      	cmp	r3, #0
 800e528:	d104      	bne.n	800e534 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e52a:	2100      	movs	r1, #0
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f000 f965 	bl	800e7fc <USB_SetDevSpeed>
 800e532:	e008      	b.n	800e546 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e534:	2101      	movs	r1, #1
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f000 f960 	bl	800e7fc <USB_SetDevSpeed>
 800e53c:	e003      	b.n	800e546 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e53e:	2103      	movs	r1, #3
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f000 f95b 	bl	800e7fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e546:	2110      	movs	r1, #16
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f000 f8f3 	bl	800e734 <USB_FlushTxFifo>
 800e54e:	4603      	mov	r3, r0
 800e550:	2b00      	cmp	r3, #0
 800e552:	d001      	beq.n	800e558 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800e554:	2301      	movs	r3, #1
 800e556:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f000 f91f 	bl	800e79c <USB_FlushRxFifo>
 800e55e:	4603      	mov	r3, r0
 800e560:	2b00      	cmp	r3, #0
 800e562:	d001      	beq.n	800e568 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800e564:	2301      	movs	r3, #1
 800e566:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e56e:	461a      	mov	r2, r3
 800e570:	2300      	movs	r3, #0
 800e572:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e57a:	461a      	mov	r2, r3
 800e57c:	2300      	movs	r3, #0
 800e57e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e586:	461a      	mov	r2, r3
 800e588:	2300      	movs	r3, #0
 800e58a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e58c:	2300      	movs	r3, #0
 800e58e:	613b      	str	r3, [r7, #16]
 800e590:	e043      	b.n	800e61a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	015a      	lsls	r2, r3, #5
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	4413      	add	r3, r2
 800e59a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e5a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5a8:	d118      	bne.n	800e5dc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d10a      	bne.n	800e5c6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	015a      	lsls	r2, r3, #5
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	4413      	add	r3, r2
 800e5b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5bc:	461a      	mov	r2, r3
 800e5be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e5c2:	6013      	str	r3, [r2, #0]
 800e5c4:	e013      	b.n	800e5ee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	015a      	lsls	r2, r3, #5
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	4413      	add	r3, r2
 800e5ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e5d8:	6013      	str	r3, [r2, #0]
 800e5da:	e008      	b.n	800e5ee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	015a      	lsls	r2, r3, #5
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	4413      	add	r3, r2
 800e5e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	015a      	lsls	r2, r3, #5
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	4413      	add	r3, r2
 800e5f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	015a      	lsls	r2, r3, #5
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	4413      	add	r3, r2
 800e608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e60c:	461a      	mov	r2, r3
 800e60e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e612:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	3301      	adds	r3, #1
 800e618:	613b      	str	r3, [r7, #16]
 800e61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61c:	693a      	ldr	r2, [r7, #16]
 800e61e:	429a      	cmp	r2, r3
 800e620:	d3b7      	bcc.n	800e592 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e622:	2300      	movs	r3, #0
 800e624:	613b      	str	r3, [r7, #16]
 800e626:	e043      	b.n	800e6b0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	015a      	lsls	r2, r3, #5
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	4413      	add	r3, r2
 800e630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e63a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e63e:	d118      	bne.n	800e672 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d10a      	bne.n	800e65c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	015a      	lsls	r2, r3, #5
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	4413      	add	r3, r2
 800e64e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e652:	461a      	mov	r2, r3
 800e654:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e658:	6013      	str	r3, [r2, #0]
 800e65a:	e013      	b.n	800e684 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	015a      	lsls	r2, r3, #5
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	4413      	add	r3, r2
 800e664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e668:	461a      	mov	r2, r3
 800e66a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e66e:	6013      	str	r3, [r2, #0]
 800e670:	e008      	b.n	800e684 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	015a      	lsls	r2, r3, #5
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	4413      	add	r3, r2
 800e67a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e67e:	461a      	mov	r2, r3
 800e680:	2300      	movs	r3, #0
 800e682:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	015a      	lsls	r2, r3, #5
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	4413      	add	r3, r2
 800e68c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e690:	461a      	mov	r2, r3
 800e692:	2300      	movs	r3, #0
 800e694:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	015a      	lsls	r2, r3, #5
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	4413      	add	r3, r2
 800e69e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e6a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	613b      	str	r3, [r7, #16]
 800e6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b2:	693a      	ldr	r2, [r7, #16]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d3b7      	bcc.n	800e628 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6be:	691b      	ldr	r3, [r3, #16]
 800e6c0:	68fa      	ldr	r2, [r7, #12]
 800e6c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e6ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e6d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d105      	bne.n	800e6ec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	699b      	ldr	r3, [r3, #24]
 800e6e4:	f043 0210 	orr.w	r2, r3, #16
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	699a      	ldr	r2, [r3, #24]
 800e6f0:	4b0e      	ldr	r3, [pc, #56]	; (800e72c <USB_DevInit+0x2b4>)
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	687a      	ldr	r2, [r7, #4]
 800e6f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d005      	beq.n	800e70a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	699b      	ldr	r3, [r3, #24]
 800e702:	f043 0208 	orr.w	r2, r3, #8
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e70a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	d105      	bne.n	800e71c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	699a      	ldr	r2, [r3, #24]
 800e714:	4b06      	ldr	r3, [pc, #24]	; (800e730 <USB_DevInit+0x2b8>)
 800e716:	4313      	orrs	r3, r2
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e71c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3718      	adds	r7, #24
 800e722:	46bd      	mov	sp, r7
 800e724:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e728:	b004      	add	sp, #16
 800e72a:	4770      	bx	lr
 800e72c:	803c3800 	.word	0x803c3800
 800e730:	40000004 	.word	0x40000004

0800e734 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e734:	b480      	push	{r7}
 800e736:	b085      	sub	sp, #20
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e73e:	2300      	movs	r3, #0
 800e740:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	3301      	adds	r3, #1
 800e746:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	4a13      	ldr	r2, [pc, #76]	; (800e798 <USB_FlushTxFifo+0x64>)
 800e74c:	4293      	cmp	r3, r2
 800e74e:	d901      	bls.n	800e754 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e750:	2303      	movs	r3, #3
 800e752:	e01b      	b.n	800e78c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	691b      	ldr	r3, [r3, #16]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	daf2      	bge.n	800e742 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e75c:	2300      	movs	r3, #0
 800e75e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	019b      	lsls	r3, r3, #6
 800e764:	f043 0220 	orr.w	r2, r3, #32
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	3301      	adds	r3, #1
 800e770:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	4a08      	ldr	r2, [pc, #32]	; (800e798 <USB_FlushTxFifo+0x64>)
 800e776:	4293      	cmp	r3, r2
 800e778:	d901      	bls.n	800e77e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e77a:	2303      	movs	r3, #3
 800e77c:	e006      	b.n	800e78c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	691b      	ldr	r3, [r3, #16]
 800e782:	f003 0320 	and.w	r3, r3, #32
 800e786:	2b20      	cmp	r3, #32
 800e788:	d0f0      	beq.n	800e76c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e78a:	2300      	movs	r3, #0
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3714      	adds	r7, #20
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr
 800e798:	00030d40 	.word	0x00030d40

0800e79c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b085      	sub	sp, #20
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	4a11      	ldr	r2, [pc, #68]	; (800e7f8 <USB_FlushRxFifo+0x5c>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d901      	bls.n	800e7ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e7b6:	2303      	movs	r3, #3
 800e7b8:	e018      	b.n	800e7ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	691b      	ldr	r3, [r3, #16]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	daf2      	bge.n	800e7a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2210      	movs	r2, #16
 800e7ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	4a08      	ldr	r2, [pc, #32]	; (800e7f8 <USB_FlushRxFifo+0x5c>)
 800e7d6:	4293      	cmp	r3, r2
 800e7d8:	d901      	bls.n	800e7de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e7da:	2303      	movs	r3, #3
 800e7dc:	e006      	b.n	800e7ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	691b      	ldr	r3, [r3, #16]
 800e7e2:	f003 0310 	and.w	r3, r3, #16
 800e7e6:	2b10      	cmp	r3, #16
 800e7e8:	d0f0      	beq.n	800e7cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e7ea:	2300      	movs	r3, #0
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3714      	adds	r7, #20
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr
 800e7f8:	00030d40 	.word	0x00030d40

0800e7fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b085      	sub	sp, #20
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	460b      	mov	r3, r1
 800e806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e812:	681a      	ldr	r2, [r3, #0]
 800e814:	78fb      	ldrb	r3, [r7, #3]
 800e816:	68f9      	ldr	r1, [r7, #12]
 800e818:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e81c:	4313      	orrs	r3, r2
 800e81e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e820:	2300      	movs	r3, #0
}
 800e822:	4618      	mov	r0, r3
 800e824:	3714      	adds	r7, #20
 800e826:	46bd      	mov	sp, r7
 800e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82c:	4770      	bx	lr

0800e82e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e82e:	b480      	push	{r7}
 800e830:	b085      	sub	sp, #20
 800e832:	af00      	add	r7, sp, #0
 800e834:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	68fa      	ldr	r2, [r7, #12]
 800e844:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e848:	f023 0303 	bic.w	r3, r3, #3
 800e84c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	68fa      	ldr	r2, [r7, #12]
 800e858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e85c:	f043 0302 	orr.w	r3, r3, #2
 800e860:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e862:	2300      	movs	r3, #0
}
 800e864:	4618      	mov	r0, r3
 800e866:	3714      	adds	r7, #20
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr

0800e870 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e870:	b480      	push	{r7}
 800e872:	b083      	sub	sp, #12
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	695b      	ldr	r3, [r3, #20]
 800e87c:	f003 0301 	and.w	r3, r3, #1
}
 800e880:	4618      	mov	r0, r3
 800e882:	370c      	adds	r7, #12
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr

0800e88c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b085      	sub	sp, #20
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e894:	2300      	movs	r3, #0
 800e896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	3301      	adds	r3, #1
 800e89c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	4a13      	ldr	r2, [pc, #76]	; (800e8f0 <USB_CoreReset+0x64>)
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d901      	bls.n	800e8aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e8a6:	2303      	movs	r3, #3
 800e8a8:	e01b      	b.n	800e8e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	691b      	ldr	r3, [r3, #16]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	daf2      	bge.n	800e898 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	691b      	ldr	r3, [r3, #16]
 800e8ba:	f043 0201 	orr.w	r2, r3, #1
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	3301      	adds	r3, #1
 800e8c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	4a09      	ldr	r2, [pc, #36]	; (800e8f0 <USB_CoreReset+0x64>)
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	d901      	bls.n	800e8d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e8d0:	2303      	movs	r3, #3
 800e8d2:	e006      	b.n	800e8e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	691b      	ldr	r3, [r3, #16]
 800e8d8:	f003 0301 	and.w	r3, r3, #1
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d0f0      	beq.n	800e8c2 <USB_CoreReset+0x36>

  return HAL_OK;
 800e8e0:	2300      	movs	r3, #0
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3714      	adds	r7, #20
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ec:	4770      	bx	lr
 800e8ee:	bf00      	nop
 800e8f0:	00030d40 	.word	0x00030d40

0800e8f4 <__errno>:
 800e8f4:	4b01      	ldr	r3, [pc, #4]	; (800e8fc <__errno+0x8>)
 800e8f6:	6818      	ldr	r0, [r3, #0]
 800e8f8:	4770      	bx	lr
 800e8fa:	bf00      	nop
 800e8fc:	24000038 	.word	0x24000038

0800e900 <__libc_init_array>:
 800e900:	b570      	push	{r4, r5, r6, lr}
 800e902:	4d0d      	ldr	r5, [pc, #52]	; (800e938 <__libc_init_array+0x38>)
 800e904:	4c0d      	ldr	r4, [pc, #52]	; (800e93c <__libc_init_array+0x3c>)
 800e906:	1b64      	subs	r4, r4, r5
 800e908:	10a4      	asrs	r4, r4, #2
 800e90a:	2600      	movs	r6, #0
 800e90c:	42a6      	cmp	r6, r4
 800e90e:	d109      	bne.n	800e924 <__libc_init_array+0x24>
 800e910:	4d0b      	ldr	r5, [pc, #44]	; (800e940 <__libc_init_array+0x40>)
 800e912:	4c0c      	ldr	r4, [pc, #48]	; (800e944 <__libc_init_array+0x44>)
 800e914:	f000 fc8e 	bl	800f234 <_init>
 800e918:	1b64      	subs	r4, r4, r5
 800e91a:	10a4      	asrs	r4, r4, #2
 800e91c:	2600      	movs	r6, #0
 800e91e:	42a6      	cmp	r6, r4
 800e920:	d105      	bne.n	800e92e <__libc_init_array+0x2e>
 800e922:	bd70      	pop	{r4, r5, r6, pc}
 800e924:	f855 3b04 	ldr.w	r3, [r5], #4
 800e928:	4798      	blx	r3
 800e92a:	3601      	adds	r6, #1
 800e92c:	e7ee      	b.n	800e90c <__libc_init_array+0xc>
 800e92e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e932:	4798      	blx	r3
 800e934:	3601      	adds	r6, #1
 800e936:	e7f2      	b.n	800e91e <__libc_init_array+0x1e>
 800e938:	0800f3f8 	.word	0x0800f3f8
 800e93c:	0800f3f8 	.word	0x0800f3f8
 800e940:	0800f3f8 	.word	0x0800f3f8
 800e944:	0800f3fc 	.word	0x0800f3fc

0800e948 <memcpy>:
 800e948:	440a      	add	r2, r1
 800e94a:	4291      	cmp	r1, r2
 800e94c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e950:	d100      	bne.n	800e954 <memcpy+0xc>
 800e952:	4770      	bx	lr
 800e954:	b510      	push	{r4, lr}
 800e956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e95a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e95e:	4291      	cmp	r1, r2
 800e960:	d1f9      	bne.n	800e956 <memcpy+0xe>
 800e962:	bd10      	pop	{r4, pc}

0800e964 <memset>:
 800e964:	4402      	add	r2, r0
 800e966:	4603      	mov	r3, r0
 800e968:	4293      	cmp	r3, r2
 800e96a:	d100      	bne.n	800e96e <memset+0xa>
 800e96c:	4770      	bx	lr
 800e96e:	f803 1b01 	strb.w	r1, [r3], #1
 800e972:	e7f9      	b.n	800e968 <memset+0x4>

0800e974 <siprintf>:
 800e974:	b40e      	push	{r1, r2, r3}
 800e976:	b500      	push	{lr}
 800e978:	b09c      	sub	sp, #112	; 0x70
 800e97a:	ab1d      	add	r3, sp, #116	; 0x74
 800e97c:	9002      	str	r0, [sp, #8]
 800e97e:	9006      	str	r0, [sp, #24]
 800e980:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e984:	4809      	ldr	r0, [pc, #36]	; (800e9ac <siprintf+0x38>)
 800e986:	9107      	str	r1, [sp, #28]
 800e988:	9104      	str	r1, [sp, #16]
 800e98a:	4909      	ldr	r1, [pc, #36]	; (800e9b0 <siprintf+0x3c>)
 800e98c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e990:	9105      	str	r1, [sp, #20]
 800e992:	6800      	ldr	r0, [r0, #0]
 800e994:	9301      	str	r3, [sp, #4]
 800e996:	a902      	add	r1, sp, #8
 800e998:	f000 f868 	bl	800ea6c <_svfiprintf_r>
 800e99c:	9b02      	ldr	r3, [sp, #8]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	701a      	strb	r2, [r3, #0]
 800e9a2:	b01c      	add	sp, #112	; 0x70
 800e9a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9a8:	b003      	add	sp, #12
 800e9aa:	4770      	bx	lr
 800e9ac:	24000038 	.word	0x24000038
 800e9b0:	ffff0208 	.word	0xffff0208

0800e9b4 <__ssputs_r>:
 800e9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9b8:	688e      	ldr	r6, [r1, #8]
 800e9ba:	429e      	cmp	r6, r3
 800e9bc:	4682      	mov	sl, r0
 800e9be:	460c      	mov	r4, r1
 800e9c0:	4690      	mov	r8, r2
 800e9c2:	461f      	mov	r7, r3
 800e9c4:	d838      	bhi.n	800ea38 <__ssputs_r+0x84>
 800e9c6:	898a      	ldrh	r2, [r1, #12]
 800e9c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e9cc:	d032      	beq.n	800ea34 <__ssputs_r+0x80>
 800e9ce:	6825      	ldr	r5, [r4, #0]
 800e9d0:	6909      	ldr	r1, [r1, #16]
 800e9d2:	eba5 0901 	sub.w	r9, r5, r1
 800e9d6:	6965      	ldr	r5, [r4, #20]
 800e9d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e9dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	444b      	add	r3, r9
 800e9e4:	106d      	asrs	r5, r5, #1
 800e9e6:	429d      	cmp	r5, r3
 800e9e8:	bf38      	it	cc
 800e9ea:	461d      	movcc	r5, r3
 800e9ec:	0553      	lsls	r3, r2, #21
 800e9ee:	d531      	bpl.n	800ea54 <__ssputs_r+0xa0>
 800e9f0:	4629      	mov	r1, r5
 800e9f2:	f000 fb55 	bl	800f0a0 <_malloc_r>
 800e9f6:	4606      	mov	r6, r0
 800e9f8:	b950      	cbnz	r0, 800ea10 <__ssputs_r+0x5c>
 800e9fa:	230c      	movs	r3, #12
 800e9fc:	f8ca 3000 	str.w	r3, [sl]
 800ea00:	89a3      	ldrh	r3, [r4, #12]
 800ea02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea06:	81a3      	strh	r3, [r4, #12]
 800ea08:	f04f 30ff 	mov.w	r0, #4294967295
 800ea0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea10:	6921      	ldr	r1, [r4, #16]
 800ea12:	464a      	mov	r2, r9
 800ea14:	f7ff ff98 	bl	800e948 <memcpy>
 800ea18:	89a3      	ldrh	r3, [r4, #12]
 800ea1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea22:	81a3      	strh	r3, [r4, #12]
 800ea24:	6126      	str	r6, [r4, #16]
 800ea26:	6165      	str	r5, [r4, #20]
 800ea28:	444e      	add	r6, r9
 800ea2a:	eba5 0509 	sub.w	r5, r5, r9
 800ea2e:	6026      	str	r6, [r4, #0]
 800ea30:	60a5      	str	r5, [r4, #8]
 800ea32:	463e      	mov	r6, r7
 800ea34:	42be      	cmp	r6, r7
 800ea36:	d900      	bls.n	800ea3a <__ssputs_r+0x86>
 800ea38:	463e      	mov	r6, r7
 800ea3a:	6820      	ldr	r0, [r4, #0]
 800ea3c:	4632      	mov	r2, r6
 800ea3e:	4641      	mov	r1, r8
 800ea40:	f000 faa8 	bl	800ef94 <memmove>
 800ea44:	68a3      	ldr	r3, [r4, #8]
 800ea46:	1b9b      	subs	r3, r3, r6
 800ea48:	60a3      	str	r3, [r4, #8]
 800ea4a:	6823      	ldr	r3, [r4, #0]
 800ea4c:	4433      	add	r3, r6
 800ea4e:	6023      	str	r3, [r4, #0]
 800ea50:	2000      	movs	r0, #0
 800ea52:	e7db      	b.n	800ea0c <__ssputs_r+0x58>
 800ea54:	462a      	mov	r2, r5
 800ea56:	f000 fb97 	bl	800f188 <_realloc_r>
 800ea5a:	4606      	mov	r6, r0
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d1e1      	bne.n	800ea24 <__ssputs_r+0x70>
 800ea60:	6921      	ldr	r1, [r4, #16]
 800ea62:	4650      	mov	r0, sl
 800ea64:	f000 fab0 	bl	800efc8 <_free_r>
 800ea68:	e7c7      	b.n	800e9fa <__ssputs_r+0x46>
	...

0800ea6c <_svfiprintf_r>:
 800ea6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea70:	4698      	mov	r8, r3
 800ea72:	898b      	ldrh	r3, [r1, #12]
 800ea74:	061b      	lsls	r3, r3, #24
 800ea76:	b09d      	sub	sp, #116	; 0x74
 800ea78:	4607      	mov	r7, r0
 800ea7a:	460d      	mov	r5, r1
 800ea7c:	4614      	mov	r4, r2
 800ea7e:	d50e      	bpl.n	800ea9e <_svfiprintf_r+0x32>
 800ea80:	690b      	ldr	r3, [r1, #16]
 800ea82:	b963      	cbnz	r3, 800ea9e <_svfiprintf_r+0x32>
 800ea84:	2140      	movs	r1, #64	; 0x40
 800ea86:	f000 fb0b 	bl	800f0a0 <_malloc_r>
 800ea8a:	6028      	str	r0, [r5, #0]
 800ea8c:	6128      	str	r0, [r5, #16]
 800ea8e:	b920      	cbnz	r0, 800ea9a <_svfiprintf_r+0x2e>
 800ea90:	230c      	movs	r3, #12
 800ea92:	603b      	str	r3, [r7, #0]
 800ea94:	f04f 30ff 	mov.w	r0, #4294967295
 800ea98:	e0d1      	b.n	800ec3e <_svfiprintf_r+0x1d2>
 800ea9a:	2340      	movs	r3, #64	; 0x40
 800ea9c:	616b      	str	r3, [r5, #20]
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	9309      	str	r3, [sp, #36]	; 0x24
 800eaa2:	2320      	movs	r3, #32
 800eaa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eaa8:	f8cd 800c 	str.w	r8, [sp, #12]
 800eaac:	2330      	movs	r3, #48	; 0x30
 800eaae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ec58 <_svfiprintf_r+0x1ec>
 800eab2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eab6:	f04f 0901 	mov.w	r9, #1
 800eaba:	4623      	mov	r3, r4
 800eabc:	469a      	mov	sl, r3
 800eabe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eac2:	b10a      	cbz	r2, 800eac8 <_svfiprintf_r+0x5c>
 800eac4:	2a25      	cmp	r2, #37	; 0x25
 800eac6:	d1f9      	bne.n	800eabc <_svfiprintf_r+0x50>
 800eac8:	ebba 0b04 	subs.w	fp, sl, r4
 800eacc:	d00b      	beq.n	800eae6 <_svfiprintf_r+0x7a>
 800eace:	465b      	mov	r3, fp
 800ead0:	4622      	mov	r2, r4
 800ead2:	4629      	mov	r1, r5
 800ead4:	4638      	mov	r0, r7
 800ead6:	f7ff ff6d 	bl	800e9b4 <__ssputs_r>
 800eada:	3001      	adds	r0, #1
 800eadc:	f000 80aa 	beq.w	800ec34 <_svfiprintf_r+0x1c8>
 800eae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eae2:	445a      	add	r2, fp
 800eae4:	9209      	str	r2, [sp, #36]	; 0x24
 800eae6:	f89a 3000 	ldrb.w	r3, [sl]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	f000 80a2 	beq.w	800ec34 <_svfiprintf_r+0x1c8>
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	f04f 32ff 	mov.w	r2, #4294967295
 800eaf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eafa:	f10a 0a01 	add.w	sl, sl, #1
 800eafe:	9304      	str	r3, [sp, #16]
 800eb00:	9307      	str	r3, [sp, #28]
 800eb02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb06:	931a      	str	r3, [sp, #104]	; 0x68
 800eb08:	4654      	mov	r4, sl
 800eb0a:	2205      	movs	r2, #5
 800eb0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb10:	4851      	ldr	r0, [pc, #324]	; (800ec58 <_svfiprintf_r+0x1ec>)
 800eb12:	f7f1 fbed 	bl	80002f0 <memchr>
 800eb16:	9a04      	ldr	r2, [sp, #16]
 800eb18:	b9d8      	cbnz	r0, 800eb52 <_svfiprintf_r+0xe6>
 800eb1a:	06d0      	lsls	r0, r2, #27
 800eb1c:	bf44      	itt	mi
 800eb1e:	2320      	movmi	r3, #32
 800eb20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb24:	0711      	lsls	r1, r2, #28
 800eb26:	bf44      	itt	mi
 800eb28:	232b      	movmi	r3, #43	; 0x2b
 800eb2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb2e:	f89a 3000 	ldrb.w	r3, [sl]
 800eb32:	2b2a      	cmp	r3, #42	; 0x2a
 800eb34:	d015      	beq.n	800eb62 <_svfiprintf_r+0xf6>
 800eb36:	9a07      	ldr	r2, [sp, #28]
 800eb38:	4654      	mov	r4, sl
 800eb3a:	2000      	movs	r0, #0
 800eb3c:	f04f 0c0a 	mov.w	ip, #10
 800eb40:	4621      	mov	r1, r4
 800eb42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb46:	3b30      	subs	r3, #48	; 0x30
 800eb48:	2b09      	cmp	r3, #9
 800eb4a:	d94e      	bls.n	800ebea <_svfiprintf_r+0x17e>
 800eb4c:	b1b0      	cbz	r0, 800eb7c <_svfiprintf_r+0x110>
 800eb4e:	9207      	str	r2, [sp, #28]
 800eb50:	e014      	b.n	800eb7c <_svfiprintf_r+0x110>
 800eb52:	eba0 0308 	sub.w	r3, r0, r8
 800eb56:	fa09 f303 	lsl.w	r3, r9, r3
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	9304      	str	r3, [sp, #16]
 800eb5e:	46a2      	mov	sl, r4
 800eb60:	e7d2      	b.n	800eb08 <_svfiprintf_r+0x9c>
 800eb62:	9b03      	ldr	r3, [sp, #12]
 800eb64:	1d19      	adds	r1, r3, #4
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	9103      	str	r1, [sp, #12]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	bfbb      	ittet	lt
 800eb6e:	425b      	neglt	r3, r3
 800eb70:	f042 0202 	orrlt.w	r2, r2, #2
 800eb74:	9307      	strge	r3, [sp, #28]
 800eb76:	9307      	strlt	r3, [sp, #28]
 800eb78:	bfb8      	it	lt
 800eb7a:	9204      	strlt	r2, [sp, #16]
 800eb7c:	7823      	ldrb	r3, [r4, #0]
 800eb7e:	2b2e      	cmp	r3, #46	; 0x2e
 800eb80:	d10c      	bne.n	800eb9c <_svfiprintf_r+0x130>
 800eb82:	7863      	ldrb	r3, [r4, #1]
 800eb84:	2b2a      	cmp	r3, #42	; 0x2a
 800eb86:	d135      	bne.n	800ebf4 <_svfiprintf_r+0x188>
 800eb88:	9b03      	ldr	r3, [sp, #12]
 800eb8a:	1d1a      	adds	r2, r3, #4
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	9203      	str	r2, [sp, #12]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	bfb8      	it	lt
 800eb94:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb98:	3402      	adds	r4, #2
 800eb9a:	9305      	str	r3, [sp, #20]
 800eb9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ec68 <_svfiprintf_r+0x1fc>
 800eba0:	7821      	ldrb	r1, [r4, #0]
 800eba2:	2203      	movs	r2, #3
 800eba4:	4650      	mov	r0, sl
 800eba6:	f7f1 fba3 	bl	80002f0 <memchr>
 800ebaa:	b140      	cbz	r0, 800ebbe <_svfiprintf_r+0x152>
 800ebac:	2340      	movs	r3, #64	; 0x40
 800ebae:	eba0 000a 	sub.w	r0, r0, sl
 800ebb2:	fa03 f000 	lsl.w	r0, r3, r0
 800ebb6:	9b04      	ldr	r3, [sp, #16]
 800ebb8:	4303      	orrs	r3, r0
 800ebba:	3401      	adds	r4, #1
 800ebbc:	9304      	str	r3, [sp, #16]
 800ebbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebc2:	4826      	ldr	r0, [pc, #152]	; (800ec5c <_svfiprintf_r+0x1f0>)
 800ebc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebc8:	2206      	movs	r2, #6
 800ebca:	f7f1 fb91 	bl	80002f0 <memchr>
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	d038      	beq.n	800ec44 <_svfiprintf_r+0x1d8>
 800ebd2:	4b23      	ldr	r3, [pc, #140]	; (800ec60 <_svfiprintf_r+0x1f4>)
 800ebd4:	bb1b      	cbnz	r3, 800ec1e <_svfiprintf_r+0x1b2>
 800ebd6:	9b03      	ldr	r3, [sp, #12]
 800ebd8:	3307      	adds	r3, #7
 800ebda:	f023 0307 	bic.w	r3, r3, #7
 800ebde:	3308      	adds	r3, #8
 800ebe0:	9303      	str	r3, [sp, #12]
 800ebe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebe4:	4433      	add	r3, r6
 800ebe6:	9309      	str	r3, [sp, #36]	; 0x24
 800ebe8:	e767      	b.n	800eaba <_svfiprintf_r+0x4e>
 800ebea:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebee:	460c      	mov	r4, r1
 800ebf0:	2001      	movs	r0, #1
 800ebf2:	e7a5      	b.n	800eb40 <_svfiprintf_r+0xd4>
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	3401      	adds	r4, #1
 800ebf8:	9305      	str	r3, [sp, #20]
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	f04f 0c0a 	mov.w	ip, #10
 800ec00:	4620      	mov	r0, r4
 800ec02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec06:	3a30      	subs	r2, #48	; 0x30
 800ec08:	2a09      	cmp	r2, #9
 800ec0a:	d903      	bls.n	800ec14 <_svfiprintf_r+0x1a8>
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d0c5      	beq.n	800eb9c <_svfiprintf_r+0x130>
 800ec10:	9105      	str	r1, [sp, #20]
 800ec12:	e7c3      	b.n	800eb9c <_svfiprintf_r+0x130>
 800ec14:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec18:	4604      	mov	r4, r0
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	e7f0      	b.n	800ec00 <_svfiprintf_r+0x194>
 800ec1e:	ab03      	add	r3, sp, #12
 800ec20:	9300      	str	r3, [sp, #0]
 800ec22:	462a      	mov	r2, r5
 800ec24:	4b0f      	ldr	r3, [pc, #60]	; (800ec64 <_svfiprintf_r+0x1f8>)
 800ec26:	a904      	add	r1, sp, #16
 800ec28:	4638      	mov	r0, r7
 800ec2a:	f3af 8000 	nop.w
 800ec2e:	1c42      	adds	r2, r0, #1
 800ec30:	4606      	mov	r6, r0
 800ec32:	d1d6      	bne.n	800ebe2 <_svfiprintf_r+0x176>
 800ec34:	89ab      	ldrh	r3, [r5, #12]
 800ec36:	065b      	lsls	r3, r3, #25
 800ec38:	f53f af2c 	bmi.w	800ea94 <_svfiprintf_r+0x28>
 800ec3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec3e:	b01d      	add	sp, #116	; 0x74
 800ec40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec44:	ab03      	add	r3, sp, #12
 800ec46:	9300      	str	r3, [sp, #0]
 800ec48:	462a      	mov	r2, r5
 800ec4a:	4b06      	ldr	r3, [pc, #24]	; (800ec64 <_svfiprintf_r+0x1f8>)
 800ec4c:	a904      	add	r1, sp, #16
 800ec4e:	4638      	mov	r0, r7
 800ec50:	f000 f87a 	bl	800ed48 <_printf_i>
 800ec54:	e7eb      	b.n	800ec2e <_svfiprintf_r+0x1c2>
 800ec56:	bf00      	nop
 800ec58:	0800f3bc 	.word	0x0800f3bc
 800ec5c:	0800f3c6 	.word	0x0800f3c6
 800ec60:	00000000 	.word	0x00000000
 800ec64:	0800e9b5 	.word	0x0800e9b5
 800ec68:	0800f3c2 	.word	0x0800f3c2

0800ec6c <_printf_common>:
 800ec6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec70:	4616      	mov	r6, r2
 800ec72:	4699      	mov	r9, r3
 800ec74:	688a      	ldr	r2, [r1, #8]
 800ec76:	690b      	ldr	r3, [r1, #16]
 800ec78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	bfb8      	it	lt
 800ec80:	4613      	movlt	r3, r2
 800ec82:	6033      	str	r3, [r6, #0]
 800ec84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec88:	4607      	mov	r7, r0
 800ec8a:	460c      	mov	r4, r1
 800ec8c:	b10a      	cbz	r2, 800ec92 <_printf_common+0x26>
 800ec8e:	3301      	adds	r3, #1
 800ec90:	6033      	str	r3, [r6, #0]
 800ec92:	6823      	ldr	r3, [r4, #0]
 800ec94:	0699      	lsls	r1, r3, #26
 800ec96:	bf42      	ittt	mi
 800ec98:	6833      	ldrmi	r3, [r6, #0]
 800ec9a:	3302      	addmi	r3, #2
 800ec9c:	6033      	strmi	r3, [r6, #0]
 800ec9e:	6825      	ldr	r5, [r4, #0]
 800eca0:	f015 0506 	ands.w	r5, r5, #6
 800eca4:	d106      	bne.n	800ecb4 <_printf_common+0x48>
 800eca6:	f104 0a19 	add.w	sl, r4, #25
 800ecaa:	68e3      	ldr	r3, [r4, #12]
 800ecac:	6832      	ldr	r2, [r6, #0]
 800ecae:	1a9b      	subs	r3, r3, r2
 800ecb0:	42ab      	cmp	r3, r5
 800ecb2:	dc26      	bgt.n	800ed02 <_printf_common+0x96>
 800ecb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ecb8:	1e13      	subs	r3, r2, #0
 800ecba:	6822      	ldr	r2, [r4, #0]
 800ecbc:	bf18      	it	ne
 800ecbe:	2301      	movne	r3, #1
 800ecc0:	0692      	lsls	r2, r2, #26
 800ecc2:	d42b      	bmi.n	800ed1c <_printf_common+0xb0>
 800ecc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ecc8:	4649      	mov	r1, r9
 800ecca:	4638      	mov	r0, r7
 800eccc:	47c0      	blx	r8
 800ecce:	3001      	adds	r0, #1
 800ecd0:	d01e      	beq.n	800ed10 <_printf_common+0xa4>
 800ecd2:	6823      	ldr	r3, [r4, #0]
 800ecd4:	68e5      	ldr	r5, [r4, #12]
 800ecd6:	6832      	ldr	r2, [r6, #0]
 800ecd8:	f003 0306 	and.w	r3, r3, #6
 800ecdc:	2b04      	cmp	r3, #4
 800ecde:	bf08      	it	eq
 800ece0:	1aad      	subeq	r5, r5, r2
 800ece2:	68a3      	ldr	r3, [r4, #8]
 800ece4:	6922      	ldr	r2, [r4, #16]
 800ece6:	bf0c      	ite	eq
 800ece8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ecec:	2500      	movne	r5, #0
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	bfc4      	itt	gt
 800ecf2:	1a9b      	subgt	r3, r3, r2
 800ecf4:	18ed      	addgt	r5, r5, r3
 800ecf6:	2600      	movs	r6, #0
 800ecf8:	341a      	adds	r4, #26
 800ecfa:	42b5      	cmp	r5, r6
 800ecfc:	d11a      	bne.n	800ed34 <_printf_common+0xc8>
 800ecfe:	2000      	movs	r0, #0
 800ed00:	e008      	b.n	800ed14 <_printf_common+0xa8>
 800ed02:	2301      	movs	r3, #1
 800ed04:	4652      	mov	r2, sl
 800ed06:	4649      	mov	r1, r9
 800ed08:	4638      	mov	r0, r7
 800ed0a:	47c0      	blx	r8
 800ed0c:	3001      	adds	r0, #1
 800ed0e:	d103      	bne.n	800ed18 <_printf_common+0xac>
 800ed10:	f04f 30ff 	mov.w	r0, #4294967295
 800ed14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed18:	3501      	adds	r5, #1
 800ed1a:	e7c6      	b.n	800ecaa <_printf_common+0x3e>
 800ed1c:	18e1      	adds	r1, r4, r3
 800ed1e:	1c5a      	adds	r2, r3, #1
 800ed20:	2030      	movs	r0, #48	; 0x30
 800ed22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed26:	4422      	add	r2, r4
 800ed28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed30:	3302      	adds	r3, #2
 800ed32:	e7c7      	b.n	800ecc4 <_printf_common+0x58>
 800ed34:	2301      	movs	r3, #1
 800ed36:	4622      	mov	r2, r4
 800ed38:	4649      	mov	r1, r9
 800ed3a:	4638      	mov	r0, r7
 800ed3c:	47c0      	blx	r8
 800ed3e:	3001      	adds	r0, #1
 800ed40:	d0e6      	beq.n	800ed10 <_printf_common+0xa4>
 800ed42:	3601      	adds	r6, #1
 800ed44:	e7d9      	b.n	800ecfa <_printf_common+0x8e>
	...

0800ed48 <_printf_i>:
 800ed48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed4c:	7e0f      	ldrb	r7, [r1, #24]
 800ed4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ed50:	2f78      	cmp	r7, #120	; 0x78
 800ed52:	4691      	mov	r9, r2
 800ed54:	4680      	mov	r8, r0
 800ed56:	460c      	mov	r4, r1
 800ed58:	469a      	mov	sl, r3
 800ed5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ed5e:	d807      	bhi.n	800ed70 <_printf_i+0x28>
 800ed60:	2f62      	cmp	r7, #98	; 0x62
 800ed62:	d80a      	bhi.n	800ed7a <_printf_i+0x32>
 800ed64:	2f00      	cmp	r7, #0
 800ed66:	f000 80d8 	beq.w	800ef1a <_printf_i+0x1d2>
 800ed6a:	2f58      	cmp	r7, #88	; 0x58
 800ed6c:	f000 80a3 	beq.w	800eeb6 <_printf_i+0x16e>
 800ed70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ed78:	e03a      	b.n	800edf0 <_printf_i+0xa8>
 800ed7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ed7e:	2b15      	cmp	r3, #21
 800ed80:	d8f6      	bhi.n	800ed70 <_printf_i+0x28>
 800ed82:	a101      	add	r1, pc, #4	; (adr r1, 800ed88 <_printf_i+0x40>)
 800ed84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed88:	0800ede1 	.word	0x0800ede1
 800ed8c:	0800edf5 	.word	0x0800edf5
 800ed90:	0800ed71 	.word	0x0800ed71
 800ed94:	0800ed71 	.word	0x0800ed71
 800ed98:	0800ed71 	.word	0x0800ed71
 800ed9c:	0800ed71 	.word	0x0800ed71
 800eda0:	0800edf5 	.word	0x0800edf5
 800eda4:	0800ed71 	.word	0x0800ed71
 800eda8:	0800ed71 	.word	0x0800ed71
 800edac:	0800ed71 	.word	0x0800ed71
 800edb0:	0800ed71 	.word	0x0800ed71
 800edb4:	0800ef01 	.word	0x0800ef01
 800edb8:	0800ee25 	.word	0x0800ee25
 800edbc:	0800eee3 	.word	0x0800eee3
 800edc0:	0800ed71 	.word	0x0800ed71
 800edc4:	0800ed71 	.word	0x0800ed71
 800edc8:	0800ef23 	.word	0x0800ef23
 800edcc:	0800ed71 	.word	0x0800ed71
 800edd0:	0800ee25 	.word	0x0800ee25
 800edd4:	0800ed71 	.word	0x0800ed71
 800edd8:	0800ed71 	.word	0x0800ed71
 800eddc:	0800eeeb 	.word	0x0800eeeb
 800ede0:	682b      	ldr	r3, [r5, #0]
 800ede2:	1d1a      	adds	r2, r3, #4
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	602a      	str	r2, [r5, #0]
 800ede8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800edec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800edf0:	2301      	movs	r3, #1
 800edf2:	e0a3      	b.n	800ef3c <_printf_i+0x1f4>
 800edf4:	6820      	ldr	r0, [r4, #0]
 800edf6:	6829      	ldr	r1, [r5, #0]
 800edf8:	0606      	lsls	r6, r0, #24
 800edfa:	f101 0304 	add.w	r3, r1, #4
 800edfe:	d50a      	bpl.n	800ee16 <_printf_i+0xce>
 800ee00:	680e      	ldr	r6, [r1, #0]
 800ee02:	602b      	str	r3, [r5, #0]
 800ee04:	2e00      	cmp	r6, #0
 800ee06:	da03      	bge.n	800ee10 <_printf_i+0xc8>
 800ee08:	232d      	movs	r3, #45	; 0x2d
 800ee0a:	4276      	negs	r6, r6
 800ee0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee10:	485e      	ldr	r0, [pc, #376]	; (800ef8c <_printf_i+0x244>)
 800ee12:	230a      	movs	r3, #10
 800ee14:	e019      	b.n	800ee4a <_printf_i+0x102>
 800ee16:	680e      	ldr	r6, [r1, #0]
 800ee18:	602b      	str	r3, [r5, #0]
 800ee1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ee1e:	bf18      	it	ne
 800ee20:	b236      	sxthne	r6, r6
 800ee22:	e7ef      	b.n	800ee04 <_printf_i+0xbc>
 800ee24:	682b      	ldr	r3, [r5, #0]
 800ee26:	6820      	ldr	r0, [r4, #0]
 800ee28:	1d19      	adds	r1, r3, #4
 800ee2a:	6029      	str	r1, [r5, #0]
 800ee2c:	0601      	lsls	r1, r0, #24
 800ee2e:	d501      	bpl.n	800ee34 <_printf_i+0xec>
 800ee30:	681e      	ldr	r6, [r3, #0]
 800ee32:	e002      	b.n	800ee3a <_printf_i+0xf2>
 800ee34:	0646      	lsls	r6, r0, #25
 800ee36:	d5fb      	bpl.n	800ee30 <_printf_i+0xe8>
 800ee38:	881e      	ldrh	r6, [r3, #0]
 800ee3a:	4854      	ldr	r0, [pc, #336]	; (800ef8c <_printf_i+0x244>)
 800ee3c:	2f6f      	cmp	r7, #111	; 0x6f
 800ee3e:	bf0c      	ite	eq
 800ee40:	2308      	moveq	r3, #8
 800ee42:	230a      	movne	r3, #10
 800ee44:	2100      	movs	r1, #0
 800ee46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee4a:	6865      	ldr	r5, [r4, #4]
 800ee4c:	60a5      	str	r5, [r4, #8]
 800ee4e:	2d00      	cmp	r5, #0
 800ee50:	bfa2      	ittt	ge
 800ee52:	6821      	ldrge	r1, [r4, #0]
 800ee54:	f021 0104 	bicge.w	r1, r1, #4
 800ee58:	6021      	strge	r1, [r4, #0]
 800ee5a:	b90e      	cbnz	r6, 800ee60 <_printf_i+0x118>
 800ee5c:	2d00      	cmp	r5, #0
 800ee5e:	d04d      	beq.n	800eefc <_printf_i+0x1b4>
 800ee60:	4615      	mov	r5, r2
 800ee62:	fbb6 f1f3 	udiv	r1, r6, r3
 800ee66:	fb03 6711 	mls	r7, r3, r1, r6
 800ee6a:	5dc7      	ldrb	r7, [r0, r7]
 800ee6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ee70:	4637      	mov	r7, r6
 800ee72:	42bb      	cmp	r3, r7
 800ee74:	460e      	mov	r6, r1
 800ee76:	d9f4      	bls.n	800ee62 <_printf_i+0x11a>
 800ee78:	2b08      	cmp	r3, #8
 800ee7a:	d10b      	bne.n	800ee94 <_printf_i+0x14c>
 800ee7c:	6823      	ldr	r3, [r4, #0]
 800ee7e:	07de      	lsls	r6, r3, #31
 800ee80:	d508      	bpl.n	800ee94 <_printf_i+0x14c>
 800ee82:	6923      	ldr	r3, [r4, #16]
 800ee84:	6861      	ldr	r1, [r4, #4]
 800ee86:	4299      	cmp	r1, r3
 800ee88:	bfde      	ittt	le
 800ee8a:	2330      	movle	r3, #48	; 0x30
 800ee8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ee90:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ee94:	1b52      	subs	r2, r2, r5
 800ee96:	6122      	str	r2, [r4, #16]
 800ee98:	f8cd a000 	str.w	sl, [sp]
 800ee9c:	464b      	mov	r3, r9
 800ee9e:	aa03      	add	r2, sp, #12
 800eea0:	4621      	mov	r1, r4
 800eea2:	4640      	mov	r0, r8
 800eea4:	f7ff fee2 	bl	800ec6c <_printf_common>
 800eea8:	3001      	adds	r0, #1
 800eeaa:	d14c      	bne.n	800ef46 <_printf_i+0x1fe>
 800eeac:	f04f 30ff 	mov.w	r0, #4294967295
 800eeb0:	b004      	add	sp, #16
 800eeb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeb6:	4835      	ldr	r0, [pc, #212]	; (800ef8c <_printf_i+0x244>)
 800eeb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800eebc:	6829      	ldr	r1, [r5, #0]
 800eebe:	6823      	ldr	r3, [r4, #0]
 800eec0:	f851 6b04 	ldr.w	r6, [r1], #4
 800eec4:	6029      	str	r1, [r5, #0]
 800eec6:	061d      	lsls	r5, r3, #24
 800eec8:	d514      	bpl.n	800eef4 <_printf_i+0x1ac>
 800eeca:	07df      	lsls	r7, r3, #31
 800eecc:	bf44      	itt	mi
 800eece:	f043 0320 	orrmi.w	r3, r3, #32
 800eed2:	6023      	strmi	r3, [r4, #0]
 800eed4:	b91e      	cbnz	r6, 800eede <_printf_i+0x196>
 800eed6:	6823      	ldr	r3, [r4, #0]
 800eed8:	f023 0320 	bic.w	r3, r3, #32
 800eedc:	6023      	str	r3, [r4, #0]
 800eede:	2310      	movs	r3, #16
 800eee0:	e7b0      	b.n	800ee44 <_printf_i+0xfc>
 800eee2:	6823      	ldr	r3, [r4, #0]
 800eee4:	f043 0320 	orr.w	r3, r3, #32
 800eee8:	6023      	str	r3, [r4, #0]
 800eeea:	2378      	movs	r3, #120	; 0x78
 800eeec:	4828      	ldr	r0, [pc, #160]	; (800ef90 <_printf_i+0x248>)
 800eeee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eef2:	e7e3      	b.n	800eebc <_printf_i+0x174>
 800eef4:	0659      	lsls	r1, r3, #25
 800eef6:	bf48      	it	mi
 800eef8:	b2b6      	uxthmi	r6, r6
 800eefa:	e7e6      	b.n	800eeca <_printf_i+0x182>
 800eefc:	4615      	mov	r5, r2
 800eefe:	e7bb      	b.n	800ee78 <_printf_i+0x130>
 800ef00:	682b      	ldr	r3, [r5, #0]
 800ef02:	6826      	ldr	r6, [r4, #0]
 800ef04:	6961      	ldr	r1, [r4, #20]
 800ef06:	1d18      	adds	r0, r3, #4
 800ef08:	6028      	str	r0, [r5, #0]
 800ef0a:	0635      	lsls	r5, r6, #24
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	d501      	bpl.n	800ef14 <_printf_i+0x1cc>
 800ef10:	6019      	str	r1, [r3, #0]
 800ef12:	e002      	b.n	800ef1a <_printf_i+0x1d2>
 800ef14:	0670      	lsls	r0, r6, #25
 800ef16:	d5fb      	bpl.n	800ef10 <_printf_i+0x1c8>
 800ef18:	8019      	strh	r1, [r3, #0]
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	6123      	str	r3, [r4, #16]
 800ef1e:	4615      	mov	r5, r2
 800ef20:	e7ba      	b.n	800ee98 <_printf_i+0x150>
 800ef22:	682b      	ldr	r3, [r5, #0]
 800ef24:	1d1a      	adds	r2, r3, #4
 800ef26:	602a      	str	r2, [r5, #0]
 800ef28:	681d      	ldr	r5, [r3, #0]
 800ef2a:	6862      	ldr	r2, [r4, #4]
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	4628      	mov	r0, r5
 800ef30:	f7f1 f9de 	bl	80002f0 <memchr>
 800ef34:	b108      	cbz	r0, 800ef3a <_printf_i+0x1f2>
 800ef36:	1b40      	subs	r0, r0, r5
 800ef38:	6060      	str	r0, [r4, #4]
 800ef3a:	6863      	ldr	r3, [r4, #4]
 800ef3c:	6123      	str	r3, [r4, #16]
 800ef3e:	2300      	movs	r3, #0
 800ef40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef44:	e7a8      	b.n	800ee98 <_printf_i+0x150>
 800ef46:	6923      	ldr	r3, [r4, #16]
 800ef48:	462a      	mov	r2, r5
 800ef4a:	4649      	mov	r1, r9
 800ef4c:	4640      	mov	r0, r8
 800ef4e:	47d0      	blx	sl
 800ef50:	3001      	adds	r0, #1
 800ef52:	d0ab      	beq.n	800eeac <_printf_i+0x164>
 800ef54:	6823      	ldr	r3, [r4, #0]
 800ef56:	079b      	lsls	r3, r3, #30
 800ef58:	d413      	bmi.n	800ef82 <_printf_i+0x23a>
 800ef5a:	68e0      	ldr	r0, [r4, #12]
 800ef5c:	9b03      	ldr	r3, [sp, #12]
 800ef5e:	4298      	cmp	r0, r3
 800ef60:	bfb8      	it	lt
 800ef62:	4618      	movlt	r0, r3
 800ef64:	e7a4      	b.n	800eeb0 <_printf_i+0x168>
 800ef66:	2301      	movs	r3, #1
 800ef68:	4632      	mov	r2, r6
 800ef6a:	4649      	mov	r1, r9
 800ef6c:	4640      	mov	r0, r8
 800ef6e:	47d0      	blx	sl
 800ef70:	3001      	adds	r0, #1
 800ef72:	d09b      	beq.n	800eeac <_printf_i+0x164>
 800ef74:	3501      	adds	r5, #1
 800ef76:	68e3      	ldr	r3, [r4, #12]
 800ef78:	9903      	ldr	r1, [sp, #12]
 800ef7a:	1a5b      	subs	r3, r3, r1
 800ef7c:	42ab      	cmp	r3, r5
 800ef7e:	dcf2      	bgt.n	800ef66 <_printf_i+0x21e>
 800ef80:	e7eb      	b.n	800ef5a <_printf_i+0x212>
 800ef82:	2500      	movs	r5, #0
 800ef84:	f104 0619 	add.w	r6, r4, #25
 800ef88:	e7f5      	b.n	800ef76 <_printf_i+0x22e>
 800ef8a:	bf00      	nop
 800ef8c:	0800f3cd 	.word	0x0800f3cd
 800ef90:	0800f3de 	.word	0x0800f3de

0800ef94 <memmove>:
 800ef94:	4288      	cmp	r0, r1
 800ef96:	b510      	push	{r4, lr}
 800ef98:	eb01 0402 	add.w	r4, r1, r2
 800ef9c:	d902      	bls.n	800efa4 <memmove+0x10>
 800ef9e:	4284      	cmp	r4, r0
 800efa0:	4623      	mov	r3, r4
 800efa2:	d807      	bhi.n	800efb4 <memmove+0x20>
 800efa4:	1e43      	subs	r3, r0, #1
 800efa6:	42a1      	cmp	r1, r4
 800efa8:	d008      	beq.n	800efbc <memmove+0x28>
 800efaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efb2:	e7f8      	b.n	800efa6 <memmove+0x12>
 800efb4:	4402      	add	r2, r0
 800efb6:	4601      	mov	r1, r0
 800efb8:	428a      	cmp	r2, r1
 800efba:	d100      	bne.n	800efbe <memmove+0x2a>
 800efbc:	bd10      	pop	{r4, pc}
 800efbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efc6:	e7f7      	b.n	800efb8 <memmove+0x24>

0800efc8 <_free_r>:
 800efc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800efca:	2900      	cmp	r1, #0
 800efcc:	d044      	beq.n	800f058 <_free_r+0x90>
 800efce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efd2:	9001      	str	r0, [sp, #4]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	f1a1 0404 	sub.w	r4, r1, #4
 800efda:	bfb8      	it	lt
 800efdc:	18e4      	addlt	r4, r4, r3
 800efde:	f000 f913 	bl	800f208 <__malloc_lock>
 800efe2:	4a1e      	ldr	r2, [pc, #120]	; (800f05c <_free_r+0x94>)
 800efe4:	9801      	ldr	r0, [sp, #4]
 800efe6:	6813      	ldr	r3, [r2, #0]
 800efe8:	b933      	cbnz	r3, 800eff8 <_free_r+0x30>
 800efea:	6063      	str	r3, [r4, #4]
 800efec:	6014      	str	r4, [r2, #0]
 800efee:	b003      	add	sp, #12
 800eff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eff4:	f000 b90e 	b.w	800f214 <__malloc_unlock>
 800eff8:	42a3      	cmp	r3, r4
 800effa:	d908      	bls.n	800f00e <_free_r+0x46>
 800effc:	6825      	ldr	r5, [r4, #0]
 800effe:	1961      	adds	r1, r4, r5
 800f000:	428b      	cmp	r3, r1
 800f002:	bf01      	itttt	eq
 800f004:	6819      	ldreq	r1, [r3, #0]
 800f006:	685b      	ldreq	r3, [r3, #4]
 800f008:	1949      	addeq	r1, r1, r5
 800f00a:	6021      	streq	r1, [r4, #0]
 800f00c:	e7ed      	b.n	800efea <_free_r+0x22>
 800f00e:	461a      	mov	r2, r3
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	b10b      	cbz	r3, 800f018 <_free_r+0x50>
 800f014:	42a3      	cmp	r3, r4
 800f016:	d9fa      	bls.n	800f00e <_free_r+0x46>
 800f018:	6811      	ldr	r1, [r2, #0]
 800f01a:	1855      	adds	r5, r2, r1
 800f01c:	42a5      	cmp	r5, r4
 800f01e:	d10b      	bne.n	800f038 <_free_r+0x70>
 800f020:	6824      	ldr	r4, [r4, #0]
 800f022:	4421      	add	r1, r4
 800f024:	1854      	adds	r4, r2, r1
 800f026:	42a3      	cmp	r3, r4
 800f028:	6011      	str	r1, [r2, #0]
 800f02a:	d1e0      	bne.n	800efee <_free_r+0x26>
 800f02c:	681c      	ldr	r4, [r3, #0]
 800f02e:	685b      	ldr	r3, [r3, #4]
 800f030:	6053      	str	r3, [r2, #4]
 800f032:	4421      	add	r1, r4
 800f034:	6011      	str	r1, [r2, #0]
 800f036:	e7da      	b.n	800efee <_free_r+0x26>
 800f038:	d902      	bls.n	800f040 <_free_r+0x78>
 800f03a:	230c      	movs	r3, #12
 800f03c:	6003      	str	r3, [r0, #0]
 800f03e:	e7d6      	b.n	800efee <_free_r+0x26>
 800f040:	6825      	ldr	r5, [r4, #0]
 800f042:	1961      	adds	r1, r4, r5
 800f044:	428b      	cmp	r3, r1
 800f046:	bf04      	itt	eq
 800f048:	6819      	ldreq	r1, [r3, #0]
 800f04a:	685b      	ldreq	r3, [r3, #4]
 800f04c:	6063      	str	r3, [r4, #4]
 800f04e:	bf04      	itt	eq
 800f050:	1949      	addeq	r1, r1, r5
 800f052:	6021      	streq	r1, [r4, #0]
 800f054:	6054      	str	r4, [r2, #4]
 800f056:	e7ca      	b.n	800efee <_free_r+0x26>
 800f058:	b003      	add	sp, #12
 800f05a:	bd30      	pop	{r4, r5, pc}
 800f05c:	24000dcc 	.word	0x24000dcc

0800f060 <sbrk_aligned>:
 800f060:	b570      	push	{r4, r5, r6, lr}
 800f062:	4e0e      	ldr	r6, [pc, #56]	; (800f09c <sbrk_aligned+0x3c>)
 800f064:	460c      	mov	r4, r1
 800f066:	6831      	ldr	r1, [r6, #0]
 800f068:	4605      	mov	r5, r0
 800f06a:	b911      	cbnz	r1, 800f072 <sbrk_aligned+0x12>
 800f06c:	f000 f8bc 	bl	800f1e8 <_sbrk_r>
 800f070:	6030      	str	r0, [r6, #0]
 800f072:	4621      	mov	r1, r4
 800f074:	4628      	mov	r0, r5
 800f076:	f000 f8b7 	bl	800f1e8 <_sbrk_r>
 800f07a:	1c43      	adds	r3, r0, #1
 800f07c:	d00a      	beq.n	800f094 <sbrk_aligned+0x34>
 800f07e:	1cc4      	adds	r4, r0, #3
 800f080:	f024 0403 	bic.w	r4, r4, #3
 800f084:	42a0      	cmp	r0, r4
 800f086:	d007      	beq.n	800f098 <sbrk_aligned+0x38>
 800f088:	1a21      	subs	r1, r4, r0
 800f08a:	4628      	mov	r0, r5
 800f08c:	f000 f8ac 	bl	800f1e8 <_sbrk_r>
 800f090:	3001      	adds	r0, #1
 800f092:	d101      	bne.n	800f098 <sbrk_aligned+0x38>
 800f094:	f04f 34ff 	mov.w	r4, #4294967295
 800f098:	4620      	mov	r0, r4
 800f09a:	bd70      	pop	{r4, r5, r6, pc}
 800f09c:	24000dd0 	.word	0x24000dd0

0800f0a0 <_malloc_r>:
 800f0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a4:	1ccd      	adds	r5, r1, #3
 800f0a6:	f025 0503 	bic.w	r5, r5, #3
 800f0aa:	3508      	adds	r5, #8
 800f0ac:	2d0c      	cmp	r5, #12
 800f0ae:	bf38      	it	cc
 800f0b0:	250c      	movcc	r5, #12
 800f0b2:	2d00      	cmp	r5, #0
 800f0b4:	4607      	mov	r7, r0
 800f0b6:	db01      	blt.n	800f0bc <_malloc_r+0x1c>
 800f0b8:	42a9      	cmp	r1, r5
 800f0ba:	d905      	bls.n	800f0c8 <_malloc_r+0x28>
 800f0bc:	230c      	movs	r3, #12
 800f0be:	603b      	str	r3, [r7, #0]
 800f0c0:	2600      	movs	r6, #0
 800f0c2:	4630      	mov	r0, r6
 800f0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0c8:	4e2e      	ldr	r6, [pc, #184]	; (800f184 <_malloc_r+0xe4>)
 800f0ca:	f000 f89d 	bl	800f208 <__malloc_lock>
 800f0ce:	6833      	ldr	r3, [r6, #0]
 800f0d0:	461c      	mov	r4, r3
 800f0d2:	bb34      	cbnz	r4, 800f122 <_malloc_r+0x82>
 800f0d4:	4629      	mov	r1, r5
 800f0d6:	4638      	mov	r0, r7
 800f0d8:	f7ff ffc2 	bl	800f060 <sbrk_aligned>
 800f0dc:	1c43      	adds	r3, r0, #1
 800f0de:	4604      	mov	r4, r0
 800f0e0:	d14d      	bne.n	800f17e <_malloc_r+0xde>
 800f0e2:	6834      	ldr	r4, [r6, #0]
 800f0e4:	4626      	mov	r6, r4
 800f0e6:	2e00      	cmp	r6, #0
 800f0e8:	d140      	bne.n	800f16c <_malloc_r+0xcc>
 800f0ea:	6823      	ldr	r3, [r4, #0]
 800f0ec:	4631      	mov	r1, r6
 800f0ee:	4638      	mov	r0, r7
 800f0f0:	eb04 0803 	add.w	r8, r4, r3
 800f0f4:	f000 f878 	bl	800f1e8 <_sbrk_r>
 800f0f8:	4580      	cmp	r8, r0
 800f0fa:	d13a      	bne.n	800f172 <_malloc_r+0xd2>
 800f0fc:	6821      	ldr	r1, [r4, #0]
 800f0fe:	3503      	adds	r5, #3
 800f100:	1a6d      	subs	r5, r5, r1
 800f102:	f025 0503 	bic.w	r5, r5, #3
 800f106:	3508      	adds	r5, #8
 800f108:	2d0c      	cmp	r5, #12
 800f10a:	bf38      	it	cc
 800f10c:	250c      	movcc	r5, #12
 800f10e:	4629      	mov	r1, r5
 800f110:	4638      	mov	r0, r7
 800f112:	f7ff ffa5 	bl	800f060 <sbrk_aligned>
 800f116:	3001      	adds	r0, #1
 800f118:	d02b      	beq.n	800f172 <_malloc_r+0xd2>
 800f11a:	6823      	ldr	r3, [r4, #0]
 800f11c:	442b      	add	r3, r5
 800f11e:	6023      	str	r3, [r4, #0]
 800f120:	e00e      	b.n	800f140 <_malloc_r+0xa0>
 800f122:	6822      	ldr	r2, [r4, #0]
 800f124:	1b52      	subs	r2, r2, r5
 800f126:	d41e      	bmi.n	800f166 <_malloc_r+0xc6>
 800f128:	2a0b      	cmp	r2, #11
 800f12a:	d916      	bls.n	800f15a <_malloc_r+0xba>
 800f12c:	1961      	adds	r1, r4, r5
 800f12e:	42a3      	cmp	r3, r4
 800f130:	6025      	str	r5, [r4, #0]
 800f132:	bf18      	it	ne
 800f134:	6059      	strne	r1, [r3, #4]
 800f136:	6863      	ldr	r3, [r4, #4]
 800f138:	bf08      	it	eq
 800f13a:	6031      	streq	r1, [r6, #0]
 800f13c:	5162      	str	r2, [r4, r5]
 800f13e:	604b      	str	r3, [r1, #4]
 800f140:	4638      	mov	r0, r7
 800f142:	f104 060b 	add.w	r6, r4, #11
 800f146:	f000 f865 	bl	800f214 <__malloc_unlock>
 800f14a:	f026 0607 	bic.w	r6, r6, #7
 800f14e:	1d23      	adds	r3, r4, #4
 800f150:	1af2      	subs	r2, r6, r3
 800f152:	d0b6      	beq.n	800f0c2 <_malloc_r+0x22>
 800f154:	1b9b      	subs	r3, r3, r6
 800f156:	50a3      	str	r3, [r4, r2]
 800f158:	e7b3      	b.n	800f0c2 <_malloc_r+0x22>
 800f15a:	6862      	ldr	r2, [r4, #4]
 800f15c:	42a3      	cmp	r3, r4
 800f15e:	bf0c      	ite	eq
 800f160:	6032      	streq	r2, [r6, #0]
 800f162:	605a      	strne	r2, [r3, #4]
 800f164:	e7ec      	b.n	800f140 <_malloc_r+0xa0>
 800f166:	4623      	mov	r3, r4
 800f168:	6864      	ldr	r4, [r4, #4]
 800f16a:	e7b2      	b.n	800f0d2 <_malloc_r+0x32>
 800f16c:	4634      	mov	r4, r6
 800f16e:	6876      	ldr	r6, [r6, #4]
 800f170:	e7b9      	b.n	800f0e6 <_malloc_r+0x46>
 800f172:	230c      	movs	r3, #12
 800f174:	603b      	str	r3, [r7, #0]
 800f176:	4638      	mov	r0, r7
 800f178:	f000 f84c 	bl	800f214 <__malloc_unlock>
 800f17c:	e7a1      	b.n	800f0c2 <_malloc_r+0x22>
 800f17e:	6025      	str	r5, [r4, #0]
 800f180:	e7de      	b.n	800f140 <_malloc_r+0xa0>
 800f182:	bf00      	nop
 800f184:	24000dcc 	.word	0x24000dcc

0800f188 <_realloc_r>:
 800f188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f18c:	4680      	mov	r8, r0
 800f18e:	4614      	mov	r4, r2
 800f190:	460e      	mov	r6, r1
 800f192:	b921      	cbnz	r1, 800f19e <_realloc_r+0x16>
 800f194:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f198:	4611      	mov	r1, r2
 800f19a:	f7ff bf81 	b.w	800f0a0 <_malloc_r>
 800f19e:	b92a      	cbnz	r2, 800f1ac <_realloc_r+0x24>
 800f1a0:	f7ff ff12 	bl	800efc8 <_free_r>
 800f1a4:	4625      	mov	r5, r4
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1ac:	f000 f838 	bl	800f220 <_malloc_usable_size_r>
 800f1b0:	4284      	cmp	r4, r0
 800f1b2:	4607      	mov	r7, r0
 800f1b4:	d802      	bhi.n	800f1bc <_realloc_r+0x34>
 800f1b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f1ba:	d812      	bhi.n	800f1e2 <_realloc_r+0x5a>
 800f1bc:	4621      	mov	r1, r4
 800f1be:	4640      	mov	r0, r8
 800f1c0:	f7ff ff6e 	bl	800f0a0 <_malloc_r>
 800f1c4:	4605      	mov	r5, r0
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	d0ed      	beq.n	800f1a6 <_realloc_r+0x1e>
 800f1ca:	42bc      	cmp	r4, r7
 800f1cc:	4622      	mov	r2, r4
 800f1ce:	4631      	mov	r1, r6
 800f1d0:	bf28      	it	cs
 800f1d2:	463a      	movcs	r2, r7
 800f1d4:	f7ff fbb8 	bl	800e948 <memcpy>
 800f1d8:	4631      	mov	r1, r6
 800f1da:	4640      	mov	r0, r8
 800f1dc:	f7ff fef4 	bl	800efc8 <_free_r>
 800f1e0:	e7e1      	b.n	800f1a6 <_realloc_r+0x1e>
 800f1e2:	4635      	mov	r5, r6
 800f1e4:	e7df      	b.n	800f1a6 <_realloc_r+0x1e>
	...

0800f1e8 <_sbrk_r>:
 800f1e8:	b538      	push	{r3, r4, r5, lr}
 800f1ea:	4d06      	ldr	r5, [pc, #24]	; (800f204 <_sbrk_r+0x1c>)
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	4604      	mov	r4, r0
 800f1f0:	4608      	mov	r0, r1
 800f1f2:	602b      	str	r3, [r5, #0]
 800f1f4:	f7f3 fd3a 	bl	8002c6c <_sbrk>
 800f1f8:	1c43      	adds	r3, r0, #1
 800f1fa:	d102      	bne.n	800f202 <_sbrk_r+0x1a>
 800f1fc:	682b      	ldr	r3, [r5, #0]
 800f1fe:	b103      	cbz	r3, 800f202 <_sbrk_r+0x1a>
 800f200:	6023      	str	r3, [r4, #0]
 800f202:	bd38      	pop	{r3, r4, r5, pc}
 800f204:	24000dd4 	.word	0x24000dd4

0800f208 <__malloc_lock>:
 800f208:	4801      	ldr	r0, [pc, #4]	; (800f210 <__malloc_lock+0x8>)
 800f20a:	f000 b811 	b.w	800f230 <__retarget_lock_acquire_recursive>
 800f20e:	bf00      	nop
 800f210:	24000dd8 	.word	0x24000dd8

0800f214 <__malloc_unlock>:
 800f214:	4801      	ldr	r0, [pc, #4]	; (800f21c <__malloc_unlock+0x8>)
 800f216:	f000 b80c 	b.w	800f232 <__retarget_lock_release_recursive>
 800f21a:	bf00      	nop
 800f21c:	24000dd8 	.word	0x24000dd8

0800f220 <_malloc_usable_size_r>:
 800f220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f224:	1f18      	subs	r0, r3, #4
 800f226:	2b00      	cmp	r3, #0
 800f228:	bfbc      	itt	lt
 800f22a:	580b      	ldrlt	r3, [r1, r0]
 800f22c:	18c0      	addlt	r0, r0, r3
 800f22e:	4770      	bx	lr

0800f230 <__retarget_lock_acquire_recursive>:
 800f230:	4770      	bx	lr

0800f232 <__retarget_lock_release_recursive>:
 800f232:	4770      	bx	lr

0800f234 <_init>:
 800f234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f236:	bf00      	nop
 800f238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f23a:	bc08      	pop	{r3}
 800f23c:	469e      	mov	lr, r3
 800f23e:	4770      	bx	lr

0800f240 <_fini>:
 800f240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f242:	bf00      	nop
 800f244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f246:	bc08      	pop	{r3}
 800f248:	469e      	mov	lr, r3
 800f24a:	4770      	bx	lr
